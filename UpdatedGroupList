#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
===================================================================================
                                Akamai Access Group Management Script
===================================================================================
Script Name:
    Akamai Access Group Management Script

Description:
    This script retrieves Akamai IAM groups and checks if a specified user exists
    in the group based on a given region.

Parameters:
    --group_id                 : The ID of the group to check users.
    --region                   : The region to use for selecting the parent group.
    --user_email               : Email address of the user to check in the group.
    --env                      : The environment (DEV or PROD). Default is DEV.
    --edgerc_file              : Path to the .edgerc file. Default is '~/.edgerc'.
    --section_name             : Section name in the .edgerc file. Default is 'default'.

Usage:
    - Check if a user exists in a group using the region:
        python script.py --region APAC --user_email "user@example.com"

    - Check using an explicit group ID:
        python script.py --group_id "123456" --user_email "user@example.com"

===================================================================================
"""

import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Define region-to-parent-group and group ID mapping
REGION_SETTINGS = {
    "Global": {"parent_group_name": "HSBC-DDos-KSD-P-2YNY4RH", "group_id": "111111"},
    "APAC": {"parent_group_name": "HSBC - APAC-V-5A82LRN", "group_id": "222222"},
    "EMEA": {"parent_group_name": "HSBC - EMEA-V-5A82MHB", "group_id": "333333"},
    "LATAM": {"parent_group_name": "HSBC-AMER -LATAM(V-5A854K9)", "group_id": "444444"},
    "AMER": {"parent_group_name": "HSBC-AMER -LATAM(V-5A854K9)", "group_id": "444444"}  # LATAM and AMER share the same group
}

# Function to set up the session using the .edgerc file for authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"‚ùå Error reading .edgerc file: {e}")
        exit(1)

# Function to check if a user email exists in the specified Akamai IAM group
def check_user_in_group(session, base_url, group_id, user_email):
    """Checks if a given user email exists in an Akamai IAM group."""
    try:
        url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{group_id}/members")
        headers = {"accept": "application/json"}

        print(f"üîç Checking if {user_email} exists in Group ID {group_id} at URL: {url}")
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            users = response.json()

            # Debugging: Print the returned JSON user list
            print("‚úÖ Users found in the group:")
            print(json.dumps(users, indent=4))

            # Check if user_email exists in the returned list
            for user in users:
                if user.get("email", "").lower() == user_email.lower():
                    print(f"‚úÖ Match found: {user_email} exists in Group ID {group_id}.")
                    return True

            print(f"‚ùå No match: {user_email} is NOT found in Group ID {group_id}.")
            return False

        elif response.status_code == 403:
            print(f"‚ùå API lacks permission to retrieve users. Check Akamai IAM settings.")

        elif response.status_code == 404:
            print(f"‚ùå Group ID {group_id} not found, or it has no assigned users.")

        else:
            print(f"‚ö†Ô∏è Failed to retrieve users: {response.status_code} - {response.text}")

        return False

    except Exception as e:
        print(f"‚ùå Error fetching user information: {e}")
        return False

# Main logic
def main():
    parser = argparse.ArgumentParser(description="Check if a user email exists in an Akamai IAM Group.")
    parser.add_argument("--group_id", help="Group ID to check users.")
    parser.add_argument("--region", choices=REGION_SETTINGS.keys(), help="Region to determine parent group.")
    parser.add_argument("--user_email", required=True, help="Email of the user to check in the group.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    # Setup session
    edgerc_file = os.path.expanduser(args.edgerc_file)

    # If PROD, use the region name as the .edgerc section name
    section_name = args.section_name
    if args.env == "PROD" and args.region:
        section_name = args.region  # Use the region name as the .edgerc section

    session, base_url = setup_session(edgerc_file, section_name)

    # Determine the group ID based on the region
    group_id = args.group_id
    if not group_id and args.region:
        region_info = REGION_SETTINGS.get(args.region)
        if region_info:
            group_id = region_info["group_id"]
            print(f"üîÑ Using mapped Group ID for region '{args.region}': {group_id}")

    # Ensure we have a valid group ID
    if not group_id:
        print("‚ùå No valid group ID found. Exiting.")
        return

    # Check if the user exists in the group
    user_exists = check_user_in_group(session, base_url, group_id, args.user_email)

    # Output result
    if user_exists:
        print(f"‚úÖ User {args.user_email} EXISTS in Group ID {group_id}.")
    else:
        print(f"‚ùå User {args.user_email} does NOT exist in Group ID {group_id}.")

if __name__ == "__main__":
    main()
