"""
===================================================================================
                    Entitlement Check - Access Group Membership for SC
===================================================================================
Script Name:
    Entitlement Check - Access Group Membership for SC

Description:
    This script retrieves the Access Group details (Group Name and Group ID) associated
    with a specified Akamai Security Configuration. It also lists all email addresses
    of users belonging to the Access Group and checks if a specific email address exists
    in that list.

Parameters:
    security_config_name           : Name of the Security Configuration (required).
    --account                      : Account name to determine section names. Default is 'Global'.
                                     Possible values: Global, AMER, LATM, EMEA, APAC, DEV.
    --edgerc_file                  : Path to the .edgerc file. Default is '~/.edgerc'.
    --email                        : (Optional) Email address to check for membership in the Access Group.

Section Naming Convention:
    - For Security Configuration lookup: <account>_SEC (e.g., AMER_SEC)
    - For Access Group lookup: <account>_GRP (e.g., AMER_GRP)

Usage:
    - To retrieve group details for a Security Configuration:
        python script.py "MySecurityConfig"

    - To specify an account (e.g., EMEA):
        python script.py "MySecurityConfig" --account EMEA

    - To check if an email exists in the group:
        python script.py "MySecurityConfig" --email user@example.com

    - Full example with all parameters:
        python script.py "MySecurityConfig" --account APAC --edgerc_file /path/to/.edgerc --email user@example.com

Notes:
    - Section names are derived from the account parameter.
    - The script handles API lookups for both Security Configuration details and Access Group details.
    - Each step includes validation to ensure proper API responses.
===================================================================================
"""

import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import argparse

# Function to set up the session using the .edgerc file for authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)


def get_security_config(config_name, session, base_url):
    """
    Retrieve the Group ID and Contract ID for the given security configuration name.
    """
    configs_url = urljoin(base_url, "appsec/v1/configs")
    response = session.get(configs_url, headers={"Accept": "application/json"})
    response.raise_for_status()

    configs = response.json().get("configurations", [])
    for config in configs:
        if config.get("name") == config_name:
            return config.get("groupId"), config.get("contractId"), config.get("id")

    raise ValueError(f"Security configuration '{config_name}' not found.")


def get_group_details(group_id, session, base_url):
    """
    Retrieve the Group Name given a Group ID.
    """
    groups_url = urljoin(base_url, "papi/v1/groups")
    resp_groups = session.get(groups_url, headers={"Accept": "application/json"})
    resp_groups.raise_for_status()

    groups_data = resp_groups.json()
    for group in groups_data.get("groups", {}).get("items", []):
        if group.get("groupId").endswith(str(group_id)):
            return group.get("groupName"), group.get("groupId")

    raise ValueError(f"Group with ID '{group_id}' not found.")


def get_group_members(group_id, session, base_url):
    """
    Retrieve a list of group member email addresses for the given Group ID.
    """
    members_url = urljoin(base_url, f"identity-management/v2/user-admin/groups/{group_id}/members")
    response = session.get(members_url, headers={"Accept": "application/json"})
    response.raise_for_status()

    members_data = response.json()
    return [member.get("email") for member in members_data.get("members", [])]


def main():
    parser = argparse.ArgumentParser(description="Check SC Access Group Membership")
    parser.add_argument("security_config_name", help="SC Name")
    parser.add_argument("--account", default="Global", choices=["Global", "AMER", "LATM", "EMEA", "APAC", "DEV"],
                        help="Account name to determine section names. Default is 'Global'.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--email", help="Email address to check in the group members list.")
    args = parser.parse_args()

    try:
        # Determine section names based on account
        security_section = f"{args.account}_SEC"
        group_section = f"{args.account}_GRP"

        # API lookup for Security Configuration Details
        sec_session, sec_base_url = setup_session(args.edgerc_file, security_section)
        group_id, contract_id, config_id = get_security_config(args.security_config_name, sec_session, sec_base_url)

        # API lookup for Access Group Details
        grp_session, grp_base_url = setup_session(args.edgerc_file, group_section)
        group_name, group_id_str = get_group_details(group_id, grp_session, grp_base_url)
        group_members = get_group_members(group_id_str, grp_session, grp_base_url)

        print(f"\nSecurity Configuration: {args.security_config_name}")
        print(f"Group Name: {group_name}")
        print(f"Group ID: {group_id_str}")
        print("\nGroup Members Email Addresses:")
        for email in group_members:
            print(f"- {email}")

        if args.email:
            email_exists = args.email in group_members
            print(f"\nEmail '{args.email}' exists in group: {email_exists}")

    except Exception as e:
        print(f"Error: {str(e)}")


if __name__ == "__main__":
    main()
