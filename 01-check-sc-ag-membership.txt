"""
===================================================================================
                    Entitlement Check - Access Group Membership for SC
===================================================================================
Script Name:
    Entitlement Check - Access Group Membership for SC

Description:
    This script retrieves the Access Group details (Group Name and Group ID) associated
    with a specified Akamai Security Configuration by matching the Security Configuration
    Name to the Access Group Name. It also lists all email addresses of users belonging
    to the Access Group and checks if a specific email address exists in that list.

Parameters:
    --config_name                  : Name of the Security Configuration (required).
    --account                      : Account name to determine section names. Default is 'Global'.
                                     Possible values: Global, AMER, LATM, EMEA, APAC, DEV.
    --edgerc_file                  : Path to the .edgerc file. Default is '~/.edgerc'.
    --email                        : (Optional) Email address to check for membership in the Access Group.

Section Naming Convention:
    - For Security Configuration lookup: <account>_SEC (e.g., AMER_SEC)
    - For Access Group lookup: <account>_GRP (e.g., AMER_GRP)

Usage:
    - To retrieve group details for a Security Configuration:
        python script.py --config_name "MySecurityConfig"

    - To specify an account (e.g., EMEA):
        python script.py --config_name "MySecurityConfig" --account EMEA

    - To check if an email exists in the group:
        python script.py --config_name "MySecurityConfig" --email user@example.com

    - Full example with all parameters:
        python script.py --config_name "MySecurityConfig" --account APAC --edgerc_file /path/to/.edgerc --email user@example.com

Notes:
    - Section names are derived from the account parameter.
    - The script matches the Security Configuration Name to the Access Group Name to determine the correct group.
    - Each step includes validation to ensure proper API responses.
===================================================================================
"""

import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import argparse
import os
import json

# Function to set up the session using the .edgerc file for authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)


def get_security_config(config_name, edgerc_file, section_name):
    """
    Retrieve the Security Configuration ID and Name for the given security configuration.
    """
    edgerc_file = os.path.expanduser(edgerc_file)
    session, base_url = setup_session(edgerc_file, section_name)
    configs_url = urljoin(base_url, "appsec/v1/configs")
    response = session.get(configs_url, headers={"Accept": "application/json"})
    response.raise_for_status()

    configs = response.json().get("configurations", [])
    print("\nRetrieved Security Configurations (JSON Format):")
    print(json.dumps(configs, indent=4))

    for config in configs:
        print(f"Config ID: {config.get('id')}, Name: {config.get('name')}")
        if config.get("name") == config_name:
            return config.get("id"), config.get("name")

    raise ValueError(f"Security configuration '{config_name}' not found.")


def get_group_details_by_name(group_name, edgerc_file, section_name):
    """
    Retrieve the Group ID by matching the Group Name with the Security Configuration Name.
    """
    edgerc_file = os.path.expanduser(edgerc_file)
    session, base_url = setup_session(edgerc_file, section_name)
    groups_url = urljoin(base_url, "papi/v1/groups")
    resp_groups = session.get(groups_url, headers={"Accept": "application/json"})
    resp_groups.raise_for_status()

    groups_data = resp_groups.json()
    for group in groups_data.get("groups", {}).get("items", []):
        if group.get("groupName") == group_name:
            return group.get("groupName"), group.get("groupId")

    raise ValueError(f"Access group with name '{group_name}' not found.")


def get_group_members(group_id, edgerc_file, section_name):
    """
    Retrieve a list of group member email addresses for the given Group ID.
    """
    edgerc_file = os.path.expanduser(edgerc_file)
    session, base_url = setup_session(edgerc_file, section_name)
    members_url = urljoin(base_url, f"identity-management/v2/user-admin/groups/{group_id}/members")
    response = session.get(members_url, headers={"Accept": "application/json"})
    response.raise_for_status()

    members_data = response.json()
    return [member.get("email") for member in members_data.get("members", [])]


def main():
    parser = argparse.ArgumentParser(description="Check SC Access Group Membership")
    parser.add_argument("--config_name", required=True, help="Name of the Security Configuration.")
    parser.add_argument("--account", default="Global", choices=["Global", "AMER", "LATM", "EMEA", "APAC", "DEV"],
                        help="Account name to determine section names. Default is 'Global'.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--email", help="Email address to check in the group members list.")
    args = parser.parse_args()

    try:
        # Expand user path for edgerc file
        args.edgerc_file = os.path.expanduser(args.edgerc_file)

        # Determine section names based on account
        security_section = f"{args.account}_SEC"
        group_section = f"{args.account}_GRP"

        # API lookup for Security Configuration Details
        config_id, config_name = get_security_config(args.config_name, args.edgerc_file, security_section)

        # Match Security Configuration Name to Access Group Name
        group_name, group_id_str = get_group_details_by_name(config_name, args.edgerc_file, group_section)

        # Retrieve group members
        group_members = get_group_members(group_id_str, args.edgerc_file, group_section)

        print(f"\nSecurity Configuration: {config_name}")
        print(f"Group Name: {group_name}")
        print(f"Group ID: {group_id_str}")
        print("\nGroup Members Email Addresses:")
        for email in group_members:
            print(f"- {email}")

        if args.email:
            email_exists = args.email in group_members
            print(f"\nEmail '{args.email}' exists in group: {email_exists}")

    except Exception as e:
        print(f"Error: {str(e)}")


if __name__ == "__main__":
    main()
