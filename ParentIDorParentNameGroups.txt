import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')
        
        # Debugging: Print base_url and credentials to verify they are correct
        print(f"Base URL: {base_url}")
        print(f"Client Token: {client_token}")
        print(f"Client Secret: {client_secret}")
        print(f"Access Token: {access_token}")
        
        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )
        
        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Recursive function to find the group by name or ID anywhere in the hierarchy
def find_group_by_name_or_id(groups, parent_group_name=None, parent_group_id=None):
    for group in groups:
        if (parent_group_name and group.get("groupName") == parent_group_name) or (parent_group_id and group.get("groupId") == parent_group_id):
            return group
        if group.get("subGroups"):
            found_group = find_group_by_name_or_id(group.get("subGroups"), parent_group_name, parent_group_id)
            if found_group:
                return found_group
    return None

# Function to check if a group exists directly under the found parent group
def check_group_exists_under_parent(parent_group, group_name):
    for subgroup in parent_group.get("subGroups", []):
        print(f"Subgroup under parent: {subgroup.get('groupName')} (ID: {subgroup.get('groupId')})")
        if subgroup.get("groupName") == group_name:
            print(f"Duplicate found: {subgroup.get('groupName')} (ID: {subgroup.get('groupId')}) matches {group_name}")
            return True, subgroup.get('groupId')
    return False, None

# Function to check if a group already exists under the specified parent group
def check_group_exists(session, base_url, group_name, parent_group_name=None, parent_group_id=None):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        print(f"Checking group existence at URL: {url}")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()
            print("Complete JSON response returned from API:")
            print(json.dumps(groups, indent=4))  # Print the full JSON response for debugging

            parent_group = find_group_by_name_or_id(groups, parent_group_name, parent_group_id)
            if parent_group:
                print(f"Found parent group: {parent_group.get('groupName')} (ID: {parent_group.get('groupId')})")
                group_exists, existing_group_id = check_group_exists_under_parent(parent_group, group_name)
                return group_exists, existing_group_id, parent_group.get('groupId')
            else:
                print(f"Parent group '{parent_group_name}' or ID {parent_group_id} not found in the hierarchy.")
                return None, None, None
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
            return None, None, None
    except Exception as e:
        print(f"Error during group existence check: {e}")
        return None, None, None

# Function to create a new group and output the groupId of the created group
def create_group(session, base_url, group_name, parent_group_id):
    try:
        url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{parent_group_id}")
        print(f"Creating group at URL: {url}")
        headers = {
            "accept": "application/json",
            "content-type": "application/json"
        }
        payload = {
            "groupName": group_name
        }
        
        response = session.post(url, json=payload, headers=headers)
        
        if response.status_code == 201:
            created_group = response.json()
            print(f"Group '{group_name}' created successfully with groupId: {created_group.get('groupId')}")
        elif response.status_code == 409:
            print(f"Group '{group_name}' already exists.")
        else:
            print(f"Failed to create group: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"Error during group creation: {e}")

# Main logic
def main():
    parser = argparse.ArgumentParser(description="Create an Akamai Access Group if it doesn't already exist.")
    parser.add_argument("group_name", help="The name of the group to create.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    # Debugging: Print the parameter values being used
    print(f"Group Name: {args.group_name}")
    print(f"Parent Group Name: {args.parent_group_name}")
    print(f"Parent Group ID: {args.parent_group_id}")
    print(f"EdgeRC File: {args.edgerc_file}")
    print(f"Section Name: {args.section_name}")

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)
    
    group_exists, existing_group_id, resolved_parent_group_id = check_group_exists(
        session, base_url, args.group_name, args.parent_group_name, args.parent_group_id
    )
    
    if group_exists is None:
        print("Error checking group existence. Exiting without creating the group.")
    elif not group_exists:
        create_group(session, base_url, args.group_name, resolved_parent_group_id)
    else:
        print(f"Group '{args.group_name}' already exists under parent group ID '{resolved_parent_group_id}' with groupId '{existing_group_id}'. No action needed.")

if __name__ == "__main__":
    main()
