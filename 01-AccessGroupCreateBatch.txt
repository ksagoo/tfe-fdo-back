openssl s_client -showcerts -connect example.com:443 </dev/null 2>/dev/null | openssl x509 -outform PEM > server-cert.pem
-------------------------------------------------------------------------------------------------
For Debian/Ubuntu-Based Images
-------------------------------
The update-ca-certificates command is part of the ca-certificates package.

Check if update-ca-certificates is Installed: Run the following command in the container:

bash
Copy code
which update-ca-certificates
If it outputs a path (e.g., /usr/sbin/update-ca-certificates), the tool is installed.

Install if Missing: If it’s not installed, install the ca-certificates package:

bash
Copy code
apt-get update && apt-get install -y ca-certificates

For Alpine-Based Images
-------------------------
In Alpine Linux, the equivalent command is update-ca-certificates, provided by the ca-certificates package.

Check if Installed:

bash
Copy code
which update-ca-certificates
Install if Missing: Install the ca-certificates package:

bash
Copy code
apk add --no-cache ca-certificates
Ensure the Package is Configured: If update-ca-certificates doesn’t work immediately, run:

bash
Copy code
mkdir -p /usr/local/share/ca-certificates

For CentOS/RHEL-Based Images
------------------------------
CentOS/RHEL uses update-ca-trust instead of update-ca-certificates.

Check if Installed:

bash
Copy code
which update-ca-trust
Install if Missing: Install the ca-certificates package:

bash
Copy code
yum install -y ca-certificates
Enable CA Certificate Management: Run:

bash
Copy code
update-ca-trust enable
Add the Certificate: Copy the .pem file to /etc/pki/ca-trust/source/anchors/ and then run:

bash
Copy code
update-ca-trust



Verify Installation
After ensuring update-ca-certificates is installed, you can verify it’s working:

Add your .crt file to the correct location:

bash
Copy code
cp server-cert.crt /usr/local/share/ca-certificates/
Update the CA certificates store:

bash
Copy code
update-ca-certificates
Check if the certificate was added:

bash
Copy code
openssl verify -CAfile /etc/ssl/certs/ca-certificates.crt /usr/local/share/ca-certificates/server-cert.crt


-------------------------------------------------------------------------------------------------

#!/bin/bash

# Define the Python script path
PYTHON_SCRIPT="akamai_access_group.py"

# Define the common parameters
ENV="PROD"
EDGERC_FILE="~/.edgerc"
SECTION_NAME="default"
CREATE="Y"

# Define hierarchies as an array
# Each entry contains LOB, Service Name, Regions, and Parent Group Name (optional)
HIERARCHIES=(
  "LOB1 ServiceName1 APAC ParentGroupA"
  "LOB2 ServiceName2 EMEA ParentGroupB"
  "LOB3 ServiceName3 AMER ParentGroupC"
  "LOB4 ServiceName4 LATAM ParentGroupD"
)

# Iterate through each hierarchy
for HIERARCHY in "${HIERARCHIES[@]}"; do
    # Parse the hierarchy details
    IFS=' ' read -r LOB SERVICE_NAME REGION PARENT_GROUP_NAME <<< "$HIERARCHY"

    # Call the Python script with the parameters
    echo "Creating access group for LOB: $LOB, Service Name: $SERVICE_NAME, Region: $REGION, Parent Group: $PARENT_GROUP_NAME"

    python3 "$PYTHON_SCRIPT" \
        "$LOB" \
        "$SERVICE_NAME" \
        --regions "$REGION" \
        --parent_group_name "$PARENT_GROUP_NAME" \
        --env "$ENV" \
        --edgerc_file "$EDGERC_FILE" \
        --section_name "$SECTION_NAME" \
        --create "$CREATE"
done

echo "Access group creation process completed."

-------------------------------------------------------


#!/bin/bash

# Define the Python script path
PYTHON_SCRIPT="akamai_access_group.py"

# Define the common parameters
ENV="PROD"
EDGERC_FILE="~/.edgerc"
SECTION_NAME="default"
CREATE="Y"

# Define hierarchies as an array
# Each entry contains LOB, Service Name, Regions, and Parent Group Name (optional)
HIERARCHIES=(
  "LOB1 ServiceName1 APAC ParentGroupA"
  "LOB2 ServiceName2 EMEA ParentGroupB"
  "LOB3 ServiceName3 AMER ParentGroupC"
  "LOB4 ServiceName4 LATAM ParentGroupD"
)

# Iterate through each hierarchy
for HIERARCHY in "${HIERARCHIES[@]}"; do
    # Parse the hierarchy details
    IFS=' ' read -r LOB SERVICE_NAME REGION PARENT_GROUP_NAME <<< "$HIERARCHY"

    # Construct the command to be executed
    CMD="python3 \"$PYTHON_SCRIPT\" \"$LOB\" \"$SERVICE_NAME\" --regions \"$REGION\" --parent_group_name \"$PARENT_GROUP_NAME\" --env \"$ENV\" --edgerc_file \"$EDGERC_FILE\" --section_name \"$SECTION_NAME\" --create \"$CREATE\""

    # Print the command
    echo "Executing: $CMD"

    # Execute the command
    eval $CMD
done

echo "Access group creation process completed."

