import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Function to check if a group name exceeds the 50 character limit
def check_group_name_length(lob, region, country_code, service_name, group_prefix):
    if country_code == 'N/A':
        group_name = f"{group_prefix}-{lob}-{region}-{service_name}"
    else:
        group_name = f"{group_prefix}-{lob}-{region}-{country_code}-{service_name}"

    if len(group_name) > 50:
        print(f"Error: Service access group name '{group_name}' exceeds 50 characters.")
        print("New group will not be created. Please reduce the service name length and resubmit.")
        exit(1)

# Function to ensure subgroups are created based on the specified level
def ensure_subgroups(session, base_url, group_prefix, top_level_group_id, lob, regions, country_servicename, level):
    all_subgroups_exist = True
    for region in regions:
        if region == 'Global':
            region_group_name = f"{group_prefix}-{lob}-Global"
        else:
            region_group_name = f"{group_prefix}-{lob}-{region.upper()}"

        region_group_exists, region_group_id, parent_group, region_group = check_group_exists(session, base_url, region_group_name, None, top_level_group_id)

        if not region_group_exists:
            all_subgroups_exist = False
            if level >= 2:
                region_group_id = create_group(session, base_url, region_group_name, top_level_group_id)
                if region_group_id:
                    print(f"Region group '{region_group_name}' created with groupId: {region_group_id}")

        if region_group_id and level >= 3:
            service_group_name = f"{region_group_name}-{country_servicename}"
            service_group_exists, service_group_id, _, service_group = check_group_exists(session, base_url, service_group_name, None, region_group_id)
            if not service_group_exists:
                all_subgroups_exist = False
                if level >= 3:
                    service_group_id = create_group(session, base_url, service_group_name, region_group_id)
                    if service_group_id:
                        print(f"Service/Country group '{service_group_name}' created with groupId: {service_group_id}")

            if service_group_id and service_group and level == 4:
                subgroups_to_create = [f"{service_group_name}-NonProd", f"{service_group_name}-Prod"]
                existing_subgroups = {subgroup['groupName']: subgroup['groupId'] for subgroup in service_group.get("subGroups", [])}

                for subgroup_name in subgroups_to_create:
                    if subgroup_name not in existing_subgroups:
                        all_subgroups_exist = False
                        created_subgroup_id = create_group(session, base_url, subgroup_name, service_group_id)
                        if created_subgroup_id:
                            print(f"Subgroup '{subgroup_name}' created successfully with groupId: {created_subgroup_id}")

    if all_subgroups_exist:
        print("All required subgroups already exist, no new subgroups needed.")

# Main function to handle argument parsing and script execution
def main():
    parser = argparse.ArgumentParser(description="Create an Akamai Access Group if it doesn't already exist.")
    parser.add_argument("lob", help="Line of Business, e.g., TEST01.")
    parser.add_argument("service_name", help="Service Name, e.g., AkamaiDevOps.")
    parser.add_argument("--group_prefix", default="HSBC-DDoS-KSD", help="The prefix for the group name. Default is 'HSBC-DDoS-KSD'.")
    parser.add_argument("--regions", nargs='+', choices=["APAC", "EMEA", "AMER", "Global"], default=["APAC", "EMEA", "AMER", "Global"], help="Regions for which subgroups will be created (APAC, EMEA, AMER, Global).")
    parser.add_argument("--country_code", help="ISO 3166 Country Code (2 uppercase characters). If 'N/A', country code will be ignored.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")
    parser.add_argument("--levels", type=int, choices=[1, 2, 3, 4], default=4, help="Levels to create (1, 2, 3, or 4). Default is 4.")
    parser.add_argument("--create", choices=["Y", "N"], default="Y", help="Set to 'N' to only output the groups that will be created without creating them.")

    args = parser.parse_args()

    lob = args.lob.strip().upper()
    service_name = args.service_name.strip()
    group_prefix = args.group_prefix.strip()
    regions = [region.strip().capitalize() if region.lower() == 'global' else region.strip().upper() for region in args.regions]
    parent_group_name = args.parent_group_name.strip() if args.parent_group_name else None

    # Check the length of the group name at the start
    for region in regions:
        check_group_name_length(lob, region, args.country_code, service_name, group_prefix)

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)

    if args.create == 'N':
        print(f"Groups to be created (but will not be created because create is set to 'N'):")
    
    top_level_group_name = f"{group_prefix}-{lob}"
    print(f"Constructed Top-Level Group Name: {top_level_group_name}")
    
    # Proceed with creating groups based on the levels if `create` is set to "Y"
    if args.create == 'Y':
        if args.levels >= 1:
            print(f"Proceeding to create group: {top_level_group_name}")

if __name__ == "__main__":
    main()
