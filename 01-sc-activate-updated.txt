import json
import os
import argparse
import requests
import time
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/".rstrip('/') + '/'
        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section_name)
        print("Session setup successful.")
        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Function to retrieve configuration ID and active version by name
def get_config_id_by_name(session, base_url, config_name, network):
    url = urljoin(base_url, "appsec/v1/configs")
    headers = {"accept": "application/json"}
    response = session.get(url, headers=headers)
    
    if response.status_code == 200:
        configs = response.json().get("configurations", [])
        for config in configs:
            if config["name"] == config_name:
                config_id = config["id"]
                print(f"Found configuration '{config_name}' with ID: {config_id}")
                print("Fetching config versions...")
                
                url_versions = urljoin(base_url, f"appsec/v1/configs/{config_id}/versions")
                version_response = session.get(url_versions, headers=headers)
                
                # Check for 404 status when a version cannot be found
                if version_response.status_code == 404:
                    print(f"Provided Configuration Version: {config_version} for Security Configuration: {config_name} cannot be found. Please recheck and try again.")
                    exit(1)
                
                if version_response.status_code == 200:
                    config_data = version_response.json()
                    production_active_version = config_data.get("productionActiveVersion")
                    staging_active_version = config_data.get("stagingActiveVersion")
                    
                    if network.lower() == "production":
                        active_version = production_active_version
                    else:
                        active_version = staging_active_version

                    print(f"Using active version {active_version} for network {network}")
                    return config_id, active_version
                else:
                    print(f"Failed to fetch config versions. Status Code: {version_response.status_code}")
                    print(version_response.text)
                    exit(1)
        
        # If no match is found for config_name, print error message and exit
        print(f"Provided Security Configuration Name: {config_name} does not exist. Please check the name and retry.")
        exit(1)
    else:
        print(f"Failed to fetch configurations. Status Code: {response.status_code}")
        exit(1)

# Function to activate the security configuration
def activate_security_configuration(session, base_url, config_id, config_version, network, note, emails):
    activation_url = urljoin(base_url, "appsec/v1/activations")
    payload = {
        "action": "ACTIVATE",
        "activationConfigs": [{"configId": config_id, "configVersion": config_version}],
        "network": network.upper(),
        "note": note,
        "notificationEmails": emails
    }

    headers = {"accept": "application/json", "content-type": "application/json"}
    response = session.post(activation_url, json=payload, headers=headers)
    
    if response.status_code == 200:
        print("Security configuration activation initiated successfully.")
        print(json.dumps(response.json(), indent=4))
        return response.json().get('activationId')
    else:
        print(f"Failed to activate configuration. Status Code: {response.status_code}")
        print(response.text)
        return None

# Updated function to compare two versions and save the output to a JSON file
def compare_versions(session, base_url, config_id, from_version, to_version):
    compare_url = urljoin(base_url, f"appsec/v1/configs/{config_id}/versions/diff")
    payload = {
        "outcomes": ["MODIFIED"],
        "to": to_version,
        "from": from_version
    }

    headers = {"accept": "application/json", "content-type": "application/json"}
    response = session.post(compare_url, json=payload, headers=headers)
    
    if response.status_code == 200:
        comparison_data = response.json()
        print("Comparison between versions:")
        print(json.dumps(comparison_data, indent=4))
        
        # Save comparison data to a JSON file
        filename = f"VersionComparisonFrom{from_version}To{to_version}.json"
        with open(filename, "w") as file:
            json.dump(comparison_data, file, indent=4)
        print(f"Comparison JSON output saved to {filename}")
    else:
        print(f"Failed to compare versions. Status Code: {response.status_code}")
        print(response.text)

# Main function to handle arguments and perform activation or comparison
if __name__ == "__main__":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="Activate Akamai security configuration, compare versions, and check activation status")
    
    parser.add_argument("--config_id", type=int, help="The ID of the security configuration")
    parser.add_argument("--config_name", help="The name of the security configuration")
    parser.add_argument("--config_version", type=str, help="The version of the security configuration to activate in the format 'v1', 'v2', etc.")
    
    # Network and activation options
    parser.add_argument("--network", choices=["staging", "production"], default="staging", help="The network to activate ('staging' or 'production'). Default is 'staging'.")
    parser.add_argument("--note", default="New Version to Activate", help="Optional note to include with the activation")
    parser.add_argument("--emails", nargs="+", default=["aactivation@test.com"], help="Notification emails for activation status")
    
    # Authentication options
    parser.add_argument("--edgerc", default=os.path.expanduser("~/.edgerc"), help="Path to the .edgerc file for Akamai API authentication. Default is '~/.edgerc'.")
    parser.add_argument("--section", default="default", help="Section of the .edgerc file to use (default: 'default').")
    
    # Additional functionality
    parser.add_argument("--activation_id", type=int, help="The activation ID to check the status")
    parser.add_argument("--compare", choices=["Y", "N"], default="Y", help="Compare the versions ('Y' to compare, default is 'Y').")
    parser.add_argument("--create", choices=["Y", "N"], default="N", help="Apply changes if 'Y', else only outputs comparison. Default is 'N'.")

    # Parse the arguments
    args = parser.parse_args()

    # Set up session with EdgeRc credentials
    session, base_url = setup_session(args.edgerc, args.section)

    if args.activation_id:
        monitor_activation_status(session, base_url, args.activation_id)
    else:
        # If activation_id is not provided, config_version is required
        if not args.config_version:
            parser.error("--config_version is required when activation_id is not provided")

        # Strip 'v' from the config_version input
        config_version = int(args.config_version.lstrip('v'))

        # If config_name is provided, retrieve config_id and active version
        if args.config_name and not args.config_id:
            args.config_id, active_version = get_config_id_by_name(session, base_url, args.config_name, args.network)
            print(f"Using config ID: {args.config_id}, Active version for {args.network}: {active_version}")
        elif args.config_id:
            active_version = list_config_versions(session, base_url, args.config_id, args.network)

        # Check if the selected version is already active in the chosen network
        if config_version == active_version:
            print(f"The selected version {config_version} is already active in the '{args.network}' network. No further action required.")
            exit(0)

        # Compare versions if --compare is set to Y
        if args.compare == "Y" and active_version:
            compare_versions(session, base_url, args.config_id, active_version, config_version)
            if args.create == "N":
                print(f"Comparison Complete. Approval Required for Network: {args.network} to activate version {config_version} from current active version {active_version}.")
                exit(0)

        # Check if the version is active in staging before production activation
        if args.network == "production":
            # Fetch the active version in staging for this config
            _, staging_active_version = get_config_id_by_name(session, base_url, args.config_name or args.config_id, "staging")
            if config_version != staging_active_version:
                print(f"Error: Version {config_version} must be active in staging before it can be activated in production.")
                exit(1)
            else:
                print(f"Version {config_version} is active in staging. Check passed for production activation.")

        # Message before activation when --create is set to Y
        if args.create == "Y":
            print(f"Version {config_version} in process of being Activated for Network '{args.network}' from existing current Active Version {active_version}.")
            activation_id = activate_security_configuration(session, base_url, args.config_id, config_version, args.network, args.note, args.emails)
            if activation_id:
                print(f"Activation initiated. Activation ID: {activation_id}")
                monitor_activation_status(session, base_url, activation_id)
