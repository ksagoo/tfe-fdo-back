"""
===================================================================================
                         Akamai Security Policy Cleanup Script
===================================================================================
Script Name:
    Akamai Security Policy Cleanup Script
Description:
    This script deletes temporary match targets and security policies from an Akamai AppSec
    configuration using the EdgeGrid API. It reads configuration details from a Terraform-based
    SC-*.tf file and:
      - Authenticates using a .edgerc file and section
      - Retrieves the specified security configuration and version
      - Deletes any match targets that use predefined dummy hostnames
      - Deletes the policy named "Security Policy Template" if found

Parameters:
    --edgerc (optional)          : Path to the .edgerc file for authentication (default: ~/.edgerc)
    --section (optional)         : Section name in the .edgerc file (default: default)
    --dry-run (optional)         : If specified, only print what would be deleted without actually deleting it

Usage:
    python script.py --edgerc ~/.edgerc --section ELEVATED --dry-run
===================================================================================
"""

#!/usr/bin/env python3

import argparse
import json
import hcl
import glob
import sys
import requests
from akamai.edgegrid import EdgeGridAuth
from akamai.edgegrid.edgeRc import EdgeRc


def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/".rstrip('/') + '/'
        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section_name)
        print("Session setup successful.")
        return session, base_url
    except Exception as e:
        print(f"Failed to set up session: {e}")
        sys.exit(1)


def getTFConfigValues():
    SC_file = glob.glob("SC-*.tf")
    if not SC_file:
        print("No SC-*.tf file found.")
        sys.exit(1)

    with open(SC_file[0], "r") as fp:
        SC_data = hcl.load(fp)
    return SC_data["module"]["akamai-application-security"]


def getConfig(session, base_url, configuration_name):
    path = f"{base_url}appsec/v1/configs"
    result = session.get(path)

    if result.status_code != 200:
        print(result.status_code, result.reason, result.content)
        sys.exit(1)

    configurations = result.json()["configurations"]
    for config in configurations:
        if config["name"] == configuration_name:
            return config["id"], config["latestVersion"]
    return False, False


def getSecConfig(session, base_url, configID, version):
    url = f"{base_url}appsec/v1/export/configs/{configID}/versions/{version}"
    result = session.get(url)

    if result.status_code == 200:
        return result.json()
    else:
        print(result.status_code, result.reason, result.content)
        sys.exit(1)


def delMatchTarget(session, base_url, configID, version, targetId):
    url = f"{base_url}appsec/v1/configs/{configID}/versions/{version}/match-targets/{targetId}"
    result = session.delete(url)

    if result.status_code == 204:
        return True
    else:
        print(result.status_code, result.reason, result.content)
        sys.exit(1)


def delPolicy(session, base_url, configID, version, policyID):
    url = f"{base_url}appsec/v1/configs/{configID}/versions/{version}/security-policies/{policyID}"
    result = session.delete(url)

    if result.status_code == 204:
        return True
    else:
        print(result.status_code, result.reason, result.content)
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(description="Delete temporary match targets and policies from Akamai config")
    parser.add_argument("--edgerc", default="~/.edgerc", help="Path to .edgerc file")
    parser.add_argument("--section", default="default", help="Section name in .edgerc file")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be deleted without making changes")
    args = parser.parse_args()

    config = getTFConfigValues()
    session, base_url = setup_session(args.edgerc, config.get("edgerc_config_section", args.section))
    sec_config_id, ver = getConfig(session, base_url, config["configuration_name"])

    if sec_config_id:
        config_json = getSecConfig(session, base_url, sec_config_id, ver)

        for websiteTarget in config_json["matchTargets"]["websiteTargets"]:
            if any(dummy in websiteTarget.get("hostnames", []) for dummy in [
                "dummy.hsbsctesting.com", "dummy-apac.hostname", "dummy-apac-cn.hostname",
                "dummy-emea.hostname", "dummy-latam.hostname", "dummy-amer.hostname"]):
                print("[MATCH TARGET] Found:", websiteTarget["hostnames"])
                if args.dry_run:
                    print("[DRY-RUN] Would delete match target:", websiteTarget["id"])
                else:
                    print("Deleting Match-target", sec_config_id, ver, websiteTarget["id"], websiteTarget["hostnames"])
                    delMatchTarget(session, base_url, sec_config_id, ver, websiteTarget["id"])

        for secPolicy in config_json["securityPolicies"]:
            if secPolicy["name"] == "Security Policy Template":
                if args.dry_run:
                    print("[DRY-RUN] Would delete policy:", secPolicy["name"], secPolicy["id"])
                else:
                    print("Deleting Policy", sec_config_id, ver, secPolicy["name"], secPolicy["id"])
                    delPolicy(session, base_url, sec_config_id, ver, secPolicy["id"])


if __name__ == "__main__":
    main()
