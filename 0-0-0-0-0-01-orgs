[12:58, 09/06/2025] Kuldeep: if "match_targets" in config:
    default_policies = metadata.get("default_policies", {})
    policy_data = default_policies.get("prod" if str2bool(args.isProd) else "nonprod", {})
    policy_id = policy_data.get("policyId")

    # Attach policy ID to each target
    for target in config["match_targets"]:
        target["policy_id"] = policy_id

    # Render the full list at once
    rendered = render_template(env, "match_targets.j2", {"targets": config["match_targets"]})
    try:
        target_list = json.loads(rendered)
        if isinstance(target_list, list):
            save_rendered_output(args.output_dir, "match_targets.json", json.dumps(target_list, indent=2))
        else:
            print("[ERROR] Rendered match_targets is not a list.")
    except Exception as e:
        print(f"[ERROR] Failed to render match_targets list: {e}")
[12:58, 09/06/2025] Kuldeep: [
{% for target in targets %}
  {
    "securityPolicyId": "{{ target.policy_id }}",
    "type": [{% for t in target.match_types %}"{{ t }}"{% if not loop.last %}, {% endif %}{% endfor %}],
    "matchType": "hostname",
    "sequence": 0,
    "useHeaders": [],
    "isNegativeFileExtensionMatch": {{ target.is_negative_file_extension_match | default(false) | lower }},
    "isSharedMAFMatch": false,
    "fileExtensions": [{% for ext in target.file_extensions %}"{{ ext }}"{% if not loop.last %}, {% endif %}{% endfor %}],
    "hostnames": [{% for h in target.hostnames %}"{{ h }}"{% if not loop.last %}, {% endif %}{% endfor %}],
    "pathMatchType": "PREFIXED",
    "matches": [
      {
        "matchOperator": "IS_ONE_OF",
        "values": [{% for p in target.paths %}"{{ p }}"{% if not loop.last %}, {% endif %}{% endfor %}]
      }
    ]
  }{% if not loop.last %}, {% endif %}
{% endfor %}
]
