def update_rate_policies(session, base_url, config_id, version, access_group, search_client_lists_by_name, search_client_lists_by_id):
    """
    Updates rate policies cloned from template config to:
    - Rename 'name' field (replacing 'Security Policy Template' with 'SC-<access_group>')
    - Update client list references in additionalMatchOptions (type == NetworkListCondition)
    """
    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/rate-policies"
    result = {"processed": 0, "successful": 0, "failed": 0, "details": []}

    try:
        response = session.get(url)
        response.raise_for_status()
        rate_policies = response.json().get("ratePolicies", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch rate policies: {e}")
        return result

    result["processed"] = len(rate_policies)

    for policy in rate_policies:
        policy_id = policy.get("id")
        policy_name = policy.get("name", "")

        if "Security Policy Template" not in policy_name:
            continue

        # Rename policy name
        updated_name = policy_name.replace("Security Policy Template", f"SC-{access_group}")
        policy["name"] = updated_name

        # Prepare updated match options
        updated_options = []
        updated = False
        skip = False

        for match in policy.get("additionalMatchOptions", []):
            if match.get("type") == "NetworkListCondition":
                original_values = match.get("values", [])
                new_values = []

                for list_id in original_values:
                    # Use search by ID to get the original list name
                    matches = search_client_lists_by_id(session, base_url, list_id)
                    if not matches:
                        result["failed"] += 1
                        result["details"].append({
                            "id": policy_id,
                            "name": policy_name,
                            "status": "skipped",
                            "reason": f"No match found for list ID: {list_id}"
                        })
                        skip = True
                        break

                    _, original_name = matches[0]
                    suffix = original_name.replace("Security Policy Template", "").strip()
                    expected_new_name = f"SC-{access_group} {suffix}".strip()

                    # Use search by name to find the SC-<access_group> list
                    new_matches = search_client_lists_by_name(session, base_url, expected_new_name)
                    if not new_matches:
                        result["failed"] += 1
                        result["details"].append({
                            "id": policy_id,
                            "name": policy_name,
                            "status": "skipped",
                            "reason": f"No matching client list found for: {expected_new_name}"
                        })
                        skip = True
                        break

                    new_list_id, _ = new_matches[0]
                    new_values.append(new_list_id)

                if skip:
                    break

                match["values"] = new_values
                updated = True

            updated_options.append(match)

        if skip:
            continue

        policy["additionalMatchOptions"] = updated_options

        put_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/rate-policies/{policy_id}"
        try:
            put_response = session.put(put_url, json=policy)
            put_response.raise_for_status()
            result["successful"] += 1
            result["details"].append({"id": policy_id, "name": updated_name, "status": "success"})
        except Exception as e:
            result["failed"] += 1
            result["details"].append({"id": policy_id, "name": updated_name, "status": "failed", "error": str(e)})

    return result
