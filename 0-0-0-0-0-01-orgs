def clone_and_rename_client_lists(session, base_url, config_id, version, access_group, section=None):
    print(f"[INFO] Cloning and renaming client lists from Security Policy Template")
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "results": []
    }

    # Fetch all client lists
    url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
    try:
        response = session.get(url)
        response.raise_for_status()
        client_lists = response.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    # Build lookup of all existing list names and their DELETE availability
    existing_names = {}
    for cl in client_lists:
        name = cl.get("name", "")
        delete_available = cl.get("availableActions", {}).get("DELETE", {}).get("available", False)
        existing_names[name] = delete_available

    for cl in client_lists:
        try:
            name = cl.get("name", "")
            if not name.startswith("Security Policy Template"):
                continue

            list_id = cl.get("listId")
            list_type = cl.get("listType")
            list_format = cl.get("type")

            suffix = name.replace("Security Policy Template", "").strip()
            new_name = f"SC-{access_group}-{suffix}"

            # Skip cloning if list exists and is not deletable
            if new_name in existing_names and not existing_names[new_name]:
                print(f"[INFO] Skipping existing non-deletable list: {new_name}")
                continue

            print(f"[DRYRUN] Would clone '{name}' to '{new_name}'")

            # Uncomment this block to go live
            # payload = {
            #     "name": new_name,
            #     "type": list_format,
            #     "listType": list_type,
            #     "description": f"Cloned from template list {name}",
            #     "tags": [],
            #     "cloneFromList": {
            #         "listId": list_id
            #     }
            # }
            # clone_url = f"{base_url}/client-list/v1/lists"
            # if section:
            #     clone_url += f"?section={section}"
            # clone_resp = session.post(clone_url, json=payload)
            # clone_resp.raise_for_status()
            # print(f"[SUCCESS] Cloned '{name}' -> '{new_name}'")

            summary["processed"] += 1
            summary["successful"] += 1
            summary["results"].append({
                "status": "dryrun-success",
                "source": name,
                "target": new_name,
                "listId": list_id
            })

        except Exception as e:
            print(f"[ERROR] Failed to process list '{name}': {e}")
            summary["processed"] += 1
            summary["failed"] += 1
            summary["results"].append({
                "status": "failed",
                "source": name,
                "error": str(e)
            })

    return summary
