def reassign_ip_geo_asn_lists(session, base_url, config_id, version, policy_id, template_to_clone_id_map):
    print("[INFO] RUNNING: reassign_ip_geo_asn_lists")

    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/ip-geo-firewall"
    response = session.get(url)
    response.raise_for_status()
    data = response.json()

    summary = {
        "processed": 1,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    updated = False

    controls = {
        "geoControls": ["blockedIPNetworkLists"],
        "ipControls": ["allowedIPNetworkLists", "blockedIPNetworkLists"],
        "blockExceptions": ["networkList"],
        "asnControls": ["networkList"]
    }

    for section_key, list_keys in controls.items():
        section = data.get(section_key, {})
        for key in list_keys:
            list_block = section.get(key)

            # Case 1: list of dicts (geoControls)
            if isinstance(list_block, list) and all(isinstance(entry, dict) and "networkList" in entry for entry in list_block):
                updated_entries = []
                replaced_any = False
                for entry in list_block:
                    orig_ids = entry.get("networkList", [])
                    new_ids = []
                    for orig_id in orig_ids:
                        new_id = template_to_clone_id_map.get(orig_id, orig_id)
                        if new_id != orig_id:
                            print(f"[INFO] Replaced {section_key}.{key} ID {orig_id} → {new_id}")
                            replaced_any = True
                        new_ids.append(new_id)
                    updated_entries.append({"networkList": new_ids})
                if replaced_any:
                    section[key] = updated_entries
                    data[section_key] = section
                    updated = True

            # Case 2: dict with 'networkList' (ipControls, blockExceptions)
            elif isinstance(list_block, dict) and "networkList" in list_block:
                orig_ids = list_block.get("networkList", [])
                new_ids = []
                replaced_any = False
                for orig_id in orig_ids:
                    new_id = template_to_clone_id_map.get(orig_id, orig_id)
                    if new_id != orig_id:
                        print(f"[INFO] Replaced {section_key}.{key} ID {orig_id} → {new_id}")
                        replaced_any = True
                    new_ids.append(new_id)
                if replaced_any:
                    list_block["networkList"] = new_ids
                    section[key] = list_block
                    data[section_key] = section
                    updated = True

            # Case 3: flat list (asnControls)
            elif isinstance(list_block, list):
                new_ids = []
                replaced_any = False
                for orig_id in list_block:
                    new_id = template_to_clone_id_map.get(orig_id, orig_id)
                    if new_id != orig_id:
                        print(f"[INFO] Replaced {section_key}.{key} ID {orig_id} → {new_id}")
                        replaced_any = True
                    new_ids.append(new_id)
                if replaced_any:
                    section[key] = new_ids
                    data[section_key] = section
                    updated = True

            else:
                print(f"[DEBUG] Skipping {section_key}.{key} (not list or expected dict structure)")

    if updated:
        put_resp = session.put(url, json=data)
        put_resp.raise_for_status()
        summary["successful"] = 1
        summary["details"].append({
            "id": policy_id,
            "status": "success"
        })
    else:
        summary["details"].append({
            "id": policy_id,
            "status": "skipped",
            "reason": "no matching template list IDs found or no changes required"
        })

    return summary
