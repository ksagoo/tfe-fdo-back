[13:54, 17/06/2025] Kuldeep: def onboard_prod_policy(session, base_url, config_id, prod_policy_id, nonprod_policy_id, section):
    print(f"[INFO] Starting PROD onboarding for policy: {prod_policy_id}")

    # Step 1: Clone policy from NonProd
    success = clone_policy_from_nonprod(
        session=session,
        base_url=base_url,
        config_id=config_id,
        source_policy_id=nonprod_policy_id,
        target_policy_id=prod_policy_id,
        section=section
    )
    if not success:
        print(f"[ERROR] Failed to clone NonProd policy '{nonprod_policy_id}' to Prod policy '{prod_policy_id}'. Aborting.")
        return

    # Step 2: Clone and reassign match targets for PROD policy
    success = clone_match_targets_from_nonprod_to_prod(
        session=session,
        base_url=base_url,
        config_id=config_id,
        prod_policy_id=prod_policy_id,
        nonprod_policy_id=nonprod_policy_id,
        section=section
    )
    if not success:
        print(f"[WARN] Match target reassignment for Prod failed. Please verify manually.")

    print(f"[INFO] PROD onboarding complete for policy: {prod_policy_id}")
[13:55, 17/06/2025] Kuldeep: def clone_match_targets_for_prod(session, base_url, config_id, version, section, nonprod_policy_id, prod_policy_id):
    print("[INFO] Cloning match targets from NonProd policy to Prod policy...")
    try:
        # Get match targets for NonProd policy
        get_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{nonprod_policy_id}/match-targets"
        if section:
            get_url += f"?section={section}"
        get_resp = session.get(get_url)
        get_resp.raise_for_status()
        match_targets = get_resp.json().get("matchTargets", [])

        if not match_targets:
            print("[WARN] No match targets found on NonProd policy.")
            return {"status": "warning", "message": "No match targets to clone."}

        clone_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{prod_policy_id}/match-targets"
        if section:
            clone_url += f"?section={section}"

        success, failure = 0, 0
        for target in match_targets:
            for readonly_field in ["configId", "configVersion", "targetId", "securityPolicy": "policyId"]:
                target.pop(readonly_field, None)
            
            post_resp = session.post(clone_url, json=target)
            if post_resp.ok:
                print(f"[SUCCESS] Cloned match target for '{target.get('defaultAction', 'unknown')}'")
                success += 1
            else:
                print(f"[ERROR] Failed to clone match target: {post_resp.status_code} {post_resp.text}")
                failure += 1

        return {
            "status": "complete",
            "cloned": success,
            "failed": failure
        }

    except Exception as e:
        print(f"[ERROR] Exception cloning match targets: {e}")
        return {"status": "error", "message": str(e)}
