#!/usr/bin/env python3

"""
===================================================================================
                     Akamai Application Security Configuration Create and Import Script
===================================================================================
Script Name:
    akamai-create-and-import-sc.py
Description:
    This script clones an existing Akamai AppSec configuration using the EdgeGrid API.
    It reads configuration details from a Terraform-based SC-*.tf file (and optionally a PL-*.tf file), and:
      - Authenticates using a .edgerc file and section
      - Retrieves and exports the existing configuration
      - Creates a new security configuration using the specified name
      - Clones all relevant components into the new configuration:
          • Match Targets
          • Security Policies
          • Client Lists
          • Rate Policies
          • Bot Categories
          • Custom Rules
          • Reputation Profile Actions
          • WAF Group Tunings
          • WAF Rule Overrides
          • Slow POST Protection
          • Custom Rate Limits (via rate_limits.json file)
      - Supports dry-run mode to preview all changes without applying them

Parameters:
    --edgerc (required)           : Path to the .edgerc file for authentication
    --section (required)          : Section name in the .edgerc file
    --new_config_name (required) : Name of the new configuration to create
    --sc_file (required)          : Path to SC-<name>.tf file defining configuration block
    --pl_file (optional)          : Path to PL-<name>.tf file with policy IDs (optional)
    --rate_limits_file (optional): Path to a rate_limits.json file with custom rate limit rules
    --dry_run (optional)          : If specified, only print what would be cloned without applying it

Usage:
    python akamai-create-and-import-sc.py --edgerc ~/.edgerc --section ELEVATED \
        --new_config_name "ClonedAppSec" --sc_file SC-MyAppSec.tf --pl_file PL-MyAppSec.tf --dry_run
===================================================================================
"""

import argparse
import json
import configparser
import re
import os
import requests
from akamai.edgegrid import EdgeGridAuth

def load_edgerc(edgerc_path, section):
    """Load Akamai EdgeGrid credentials from .edgerc file."""
    try:
        config = configparser.ConfigParser()
        config.read(edgerc_path)
        if section not in config:
            raise ValueError(f"Section '{section}' not found in {edgerc_path}")
        sect = config[section]
        host = sect.get('host')
        client_token = sect.get('client_token')
        client_secret = sect.get('client_secret')
        access_token = sect.get('access_token')
        if not host or not client_token or not client_secret or not access_token:
            raise ValueError(f"Missing required credentials in section '{section}'")
        return host, client_token, client_secret, access_token
    except Exception as e:
        raise RuntimeError(f"Failed to load .edgerc credentials: {e}")

def parse_tf_files(sc_file_path, pl_file_path=None):
    """Parse the Terraform SC and PL files to extract config and policy metadata."""
    try:
        with open(sc_file_path, 'r') as f:
            sc_text = f.read()

        contract_id = re.search(r'contract_id\s*=\s*"([^"]+)"', sc_text)
        group_id = re.search(r'group_id\s*=\s*"([^"]+)"', sc_text)
        config_id = re.search(r'config_id\s*=\s*"([^"]+)"', sc_text)
        version = re.search(r'latest_version\s*=\s*"([^"]+)"', sc_text)

        if not (contract_id and group_id and config_id):
            raise ValueError("SC file must include contract_id, group_id, and config_id")

        contract_id = contract_id.group(1)
        group_id = group_id.group(1)
        config_id = int(config_id.group(1))
        src_version = int(version.group(1)) if version else None

        policies = []
        if pl_file_path:
            with open(pl_file_path, 'r') as f:
                pl_text = f.read()
            ids = re.findall(r'security_policy_id\s*=\s*"([^"]+)"', pl_text)
            names = re.findall(r'security_policy_name\s*=\s*"([^"]+)"', pl_text)
            prefixes = re.findall(r'security_policy_prefix\s*=\s*"([^"]+)"', pl_text)
            for pid, name, prefix in zip(ids, names, prefixes):
                policies.append({"id": pid, "name": name, "prefix": prefix})
        return contract_id, group_id, config_id, src_version, policies
    except Exception as e:
        raise RuntimeError(f"Error parsing Terraform files: {e}")

def clone_security_policies(session, host, src_config_id, src_version, dest_config_id, dest_version, policies, dry_run, summary):
    """Clone security policies from source config to new config."""
    policy_map = {}
    try:
        for pol in policies:
            payload = {
                "securityPolicyName": pol["name"],
                "securityPolicyPrefix": pol["prefix"],
                "defaultSettings": True
            }
            if dry_run:
                print(f"Dry-run: Would create security policy '{pol['name']}' with payload:")
                print(json.dumps(payload, indent=2))
                policy_map[pol["id"]] = f"{pol['prefix']}_NEW"
            else:
                url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies"
                resp = session.post(url, json=payload)
                if resp.status_code not in (200, 201):
                    print(f"Error creating policy {pol['name']}: {resp.status_code} - {resp.text}")
                    continue
                new_policy_id = resp.json().get("securityPolicyId")
                policy_map[pol["id"]] = new_policy_id
                summary["security_policies"] += 1
                print(f"Created new security policy '{pol['name']}' (ID: {new_policy_id})")
    except Exception as e:
        print(f"[ERROR] Exception in clone_security_policies: {e}")
    return policy_map

def clone_client_lists(session, host, src_config_id, src_version, contract_id, group_id, dry_run, summary):
    """Clone client (network) lists referenced in the source configuration."""
    client_list_map = {}
    try:
        # Fetch all network lists available in the destination
        lists_url = f"https://{host}/client-list/v1/lists?contractId={contract_id}&groupId={group_id}"
        resp = session.get(lists_url)
        resp.raise_for_status()
        all_lists = resp.json().get("lists", [])

        # Identify referenced list IDs from custom rules
        referenced_list_ids = set()
        cr_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/custom-rules"
        cr_resp = session.get(cr_url)
        if cr_resp.status_code == 200:
            for rule in cr_resp.json().get("customRules", []):
                matches = re.findall(r'"(listId|networkListId)"\s*:\s*"([^"]+)"', json.dumps(rule))
                for _, list_id in matches:
                    referenced_list_ids.add(list_id)

        # Also check for network lists in rate policies
        rp_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/rate-policies"
        rp_resp = session.get(rp_url)
        if rp_resp.status_code == 200:
            for rp in rp_resp.json().get("ratePolicies", []):
                matches = re.findall(r'"(listId|networkListId)"\s*:\s*"([^"]+)"', json.dumps(rp))
                for _, list_id in matches:
                    referenced_list_ids.add(list_id)

        for old_id in referenced_list_ids:
            orig = next(
                (l for l in all_lists if str(l.get("listId")) == old_id or str(l.get("uniqueId")) == old_id),
                None
            )

            if not orig:
                print(f"Warning: Referenced network list {old_id} not found.")
                continue

            # Check if a list with the same name and type already exists
            existing = next(
                (l for l in all_lists if l.get("name") == orig.get("name") and l.get("type") == orig.get("type")),
                None
            )
            if existing:
                print(f"Info: Network list '{orig.get('name')}' already exists. Skipping clone.")
                client_list_map[old_id] = existing.get("uniqueId") or existing.get("listId")
                continue

            # Prepare list creation payload
            payload = {
                "name": orig.get("name"),
                "type": orig.get("type"),
                "contractId": contract_id,
                "groupId": group_id,
                "description": orig.get("description", ""),
                "tags": orig.get("tags", []),
                "items": []
            }

            items = orig.get("items")
            if items is None:
                items_url = f"https://{host}/client-list/v1/lists/{old_id}/items"
                items_resp = session.get(items_url)
                if items_resp.status_code == 200:
                    items = items_resp.json().get("items", [])

            for item in items or []:
                entry = {"value": item.get("value")}
                if item.get("description"):
                    entry["description"] = item["description"]
                if item.get("expirationDate"):
                    entry["expirationDate"] = item["expirationDate"]
                if item.get("tags"):
                    entry["tags"] = item["tags"]
                payload["items"].append(entry)

            if dry_run:
                print(f"Dry-run: Would create network list '{payload['name']}' with:")
                print(json.dumps(payload, indent=2))
                client_list_map[old_id] = f"NEW_LIST_{old_id}"
                summary["client_lists"] += 1
            else:
                create_url = f"https://{host}/client-list/v1/lists"
                post_resp = session.post(create_url, json=payload)
                if post_resp.status_code in (200, 201):
                    new_id = post_resp.json().get("uniqueId") or post_resp.json().get("listId")
                    client_list_map[old_id] = new_id
                    summary["client_lists"] += 1
                    print(f"Cloned client list '{payload['name']}' (ID: {new_id})")
                else:
                    print(f"Error cloning list {old_id}: {post_resp.status_code} - {post_resp.text}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_client_lists: {e}")
    return client_list_map

def clone_custom_rules(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, client_list_map, dry_run, summary):
    """Clone custom rules from source to destination config."""
    rule_map = {}
    try:
        url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/custom-rules"
        resp = session.get(url)
        if resp.status_code != 200:
            print(f"Error fetching custom rules: {resp.status_code} - {resp.text}")
            return rule_map
        custom_rules = resp.json().get("customRules", [])

        actions_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/custom-rules/actions"
        actions_resp = session.get(actions_url)
        custom_rule_actions = actions_resp.json().get("customRuleActions", []) if actions_resp.status_code == 200 else []

        for rule in custom_rules:
            rule_id = rule.get("id") or rule.get("customRuleId")
            if not rule_id:
                continue

            new_rule = {
                "name": rule.get("name"),
                "description": rule.get("description"),
                "condition": rule.get("condition"),
                "endpoint": rule.get("endpoint"),
                "version": rule.get("version"),
            }

            def replace_ids(obj):
                if isinstance(obj, dict):
                    for k, v in obj.items():
                        if isinstance(v, (dict, list)):
                            replace_ids(v)
                        elif k.lower() in ("listid", "networklistid") and str(v) in client_list_map:
                            obj[k] = client_list_map[str(v)]
                elif isinstance(obj, list):
                    for item in obj:
                        replace_ids(item)

            replace_ids(new_rule)

            if dry_run:
                print(f"Dry-run: Would create custom rule '{new_rule['name']}' with:")
                print(json.dumps(new_rule, indent=2))
                new_rule_id = f"NEW_RULE_{rule_id}"
            else:
                cr_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/custom-rules"
                r = session.post(cr_url, json=new_rule)
                if r.status_code not in (200, 201):
                    print(f"Error creating custom rule '{new_rule['name']}': {r.status_code} - {r.text}")
                    continue
                new_rule_id = r.json().get("id") or r.json().get("customRuleId")
                summary["custom_rules"] += 1
                print(f"Created custom rule '{new_rule['name']}' (ID: {new_rule_id})")

            rule_map[rule_id] = new_rule_id

            for action in [a for a in custom_rule_actions if a.get("customRuleId") == rule_id]:
                orig_pol_id = action.get("securityPolicyId")
                action_mode = action.get("action")
                if not action_mode or orig_pol_id not in policy_map:
                    continue
                new_pol_id = policy_map[orig_pol_id]

                if dry_run:
                    print(f"Dry-run: Would assign rule '{new_rule['name']}' to policy {new_pol_id} with action '{action_mode}'")
                else:
                    assign_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_pol_id}/custom-rules/{new_rule_id}"
                    payload = {"action": action_mode}
                    ar = session.put(assign_url, json=payload)
                    if ar.status_code not in (200, 204):
                        print(f"Warning: Failed to assign rule {new_rule_id} to policy {new_pol_id}: {ar.status_code} - {ar.text}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_custom_rules: {e}")
    return rule_map

def clone_reputation_profiles(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, dry_run, summary):
    """Clone reputation profile actions from source to destination configuration."""
    try:
        for old_policy_id, new_policy_id in policy_map.items():
            url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/security-policies/{old_policy_id}/reputation-profiles"
            resp = session.get(url)
            if resp.status_code != 200:
                print(f"Error fetching reputation profiles for policy {old_policy_id}: {resp.status_code} - {resp.text}")
                continue
            profiles = resp.json().get("reputationProfiles", [])
            for profile in profiles:
                if dry_run:
                    print(f"Dry-run: Would assign reputation profile {profile['id']} to policy {new_policy_id}")
                else:
                    assign_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_policy_id}/reputation-profiles/{profile['id']}"
                    payload = {"action": profile.get("action")}
                    r = session.put(assign_url, json=payload)
                    if r.status_code not in (200, 204):
                        print(f"Error assigning reputation profile {profile['id']} to policy {new_policy_id}: {r.status_code} - {r.text}")
                    else:
                        summary["reputation_profiles"] += 1
                        print(f"Assigned reputation profile {profile['id']} to policy {new_policy_id}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_reputation_profiles: {e}")

def clone_bot_categories(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, dry_run, summary):
    """Clone bot category actions from source to destination configuration."""
    try:
        for old_policy_id, new_policy_id in policy_map.items():
            url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/security-policies/{old_policy_id}/bot-manager-settings"
            resp = session.get(url)
            if resp.status_code != 200:
                print(f"Error fetching bot settings for policy {old_policy_id}: {resp.status_code} - {resp.text}")
                continue
            settings = resp.json()
            if dry_run:
                print(f"Dry-run: Would update bot settings for policy {new_policy_id} with:")
                print(json.dumps(settings, indent=2))
            else:
                update_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_policy_id}/bot-manager-settings"
                r = session.put(update_url, json=settings)
                if r.status_code not in (200, 204):
                    print(f"Error updating bot settings for policy {new_policy_id}: {r.status_code} - {r.text}")
                else:
                    summary["bot_categories"] += 1
                    print(f"Updated bot settings for policy {new_policy_id}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_bot_categories: {e}")

def clone_waf_group_actions(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, dry_run, summary):
    """Clone WAF group actions from source to destination configuration."""
    try:
        for old_policy_id, new_policy_id in policy_map.items():
            url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/security-policies/{old_policy_id}/attack-groups"
            resp = session.get(url)
            if resp.status_code != 200:
                print(f"Error fetching attack groups for policy {old_policy_id}: {resp.status_code} - {resp.text}")
                continue
            groups = resp.json().get("attackGroups", [])
            for group in groups:
                if dry_run:
                    print(f"Dry-run: Would assign action '{group['action']}' to attack group {group['group']}")
                else:
                    assign_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_policy_id}/attack-groups/{group['group']}"
                    payload = {"action": group.get("action")}
                    r = session.put(assign_url, json=payload)
                    if r.status_code not in (200, 204):
                        print(f"Error assigning action to attack group {group['group']} in policy {new_policy_id}: {r.status_code} - {r.text}")
                    else:
                        summary["waf_group_actions"] += 1
                        print(f"Assigned action '{group['action']}' to attack group {group['group']} in policy {new_policy_id}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_waf_group_actions: {e}")

def clone_waf_rule_overrides(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, dry_run, summary):
    """Clone WAF rule overrides from source to destination configuration."""
    try:
        for old_policy_id, new_policy_id in policy_map.items():
            url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/security-policies/{old_policy_id}/rules"
            resp = session.get(url)
            if resp.status_code != 200:
                print(f"Error fetching rules for policy {old_policy_id}: {resp.status_code} - {resp.text}")
                continue
            rules = resp.json().get("rules", [])
            for rule in rules:
                if dry_run:
                    print(f"Dry-run: Would set action '{rule['action']}' for rule {rule['ruleId']}")
                else:
                    assign_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_policy_id}/rules/{rule['ruleId']}"
                    payload = {"action": rule.get("action")}
                    r = session.put(assign_url, json=payload)
                    if r.status_code not in (200, 204):
                        print(f"Error setting action for rule {rule['ruleId']} in policy {new_policy_id}: {r.status_code} - {r.text}")
                    else:
                        summary["waf_rule_overrides"] += 1
                        print(f"Set action '{rule['action']}' for rule {rule['ruleId']} in policy {new_policy_id}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_waf_rule_overrides: {e}")

def clone_slow_post_protection(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, dry_run, summary):
    """Clone slow POST protection settings from source to destination configuration."""
    try:
        for old_policy_id, new_policy_id in policy_map.items():
            url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/security-policies/{old_policy_id}/slow-post"
            resp = session.get(url)
            if resp.status_code != 200:
                print(f"Error fetching slow POST settings for policy {old_policy_id}: {resp.status_code} - {resp.text}")
                continue
            settings = resp.json()
            if dry_run:
                print(f"Dry-run: Would update slow POST settings for policy {new_policy_id} with:")
                print(json.dumps(settings, indent=2))
            else:
                update_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_policy_id}/slow-post"
                r = session.put(update_url, json=settings)
                if r.status_code not in (200, 204):
                    print(f"Error updating slow POST settings for policy {new_policy_id}: {r.status_code} - {r.text}")
                else:
                    summary["slow_post_protection"] += 1
                    print(f"Updated slow POST settings for policy {new_policy_id}")
    except Exception as e:
        print(f"[ERROR] Exception in clone_slow_post_protection: {e}")

def clone_rate_policies(session, host, src_config_id, src_version, dest_config_id, dest_version, rate_file_data, dry_run, summary):
    """Clone rate limit policies from source to new config. Returns mapping of original to new rate policy IDs."""
    rate_policy_map = {}

    try:
        if rate_file_data is not None:
            rate_policies = rate_file_data.get("ratePolicies")
            if rate_policies is None and isinstance(rate_file_data, list):
                rate_policies = rate_file_data
            if rate_policies is None:
                rate_policies = rate_file_data
        else:
            rp_list_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/rate-policies"
            rp_resp = session.get(rp_list_url)
            rate_policies = rp_resp.json().get("ratePolicies", []) if rp_resp.status_code == 200 else []

        for rp in rate_policies:
            orig_rate_id = rp.get("id") or rp.get("ratePolicyId")
            new_rp_payload = rp.copy()

            for key in ["id", "ratePolicyId", "configId", "version"]:
                new_rp_payload.pop(key, None)

            if dry_run:
                print(f"Dry-run: Would create rate policy '{rp.get('name')}' with payload:")
                print(json.dumps(new_rp_payload, indent=2))
                rate_policy_map[orig_rate_id] = f"NEW_RATE_{orig_rate_id}"
            else:
                create_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/rate-policies"
                r = session.post(create_url, json=new_rp_payload)
                if r.status_code not in (200, 201):
                    print(f"Error creating rate policy '{rp.get('name')}': {r.status_code} - {r.text}")
                    continue
                new_rp = r.json()
                new_rate_id = new_rp.get("id") or new_rp.get("ratePolicyId")
                rate_policy_map[orig_rate_id] = new_rate_id
                summary["rate_policies"] += 1
                print(f"Created rate policy '{rp.get('name')}' (new ID: {new_rate_id})")
    except Exception as e:
        print(f"[ERROR] Failed to clone rate policies: {e}")

    return rate_policy_map

def apply_custom_rate_limits(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, rate_policy_map, dry_run):
    """Assign cloned rate policies to the destination configuration."""
    try:
        for orig_pol_id, new_pol_id in policy_map.items():
            if not new_pol_id:
                print(f"Warning: Skipping unknown policy ID: {orig_pol_id}")
                continue
            for orig_rate_id, new_rate_id in rate_policy_map.items():
                action_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/security-policies/{orig_pol_id}/rate-policies/{orig_rate_id}"
                resp = session.get(action_url)
                if resp.status_code != 200:
                    continue

                action_data = resp.json()
                ipv4_action = action_data.get("ipv4Action")
                ipv6_action = action_data.get("ipv6Action")

                if (not ipv4_action or ipv4_action.lower() == "none") and (not ipv6_action or ipv6_action.lower() == "none"):
                    continue

                if dry_run:
                    print(f"Dry-run: Would set rate policy {new_rate_id} action on policy {new_pol_id}: "
                          f"ipv4='{ipv4_action}', ipv6='{ipv6_action}'")
                else:
                    put_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/security-policies/{new_pol_id}/rate-policies/{new_rate_id}"
                    payload = {}
                    if ipv4_action:
                        payload["ipv4Action"] = ipv4_action
                    if ipv6_action:
                        payload["ipv6Action"] = ipv6_action
                    if not payload:
                        continue
                    pr = session.put(put_url, json=payload)
                    if pr.status_code not in (200, 204):
                        print(f"Warning: Failed to set rate policy {new_rate_id} actions on policy {new_pol_id}: "
                              f"{pr.status_code} - {pr.text}")
    except Exception as e:
        print(f"[ERROR] Failed to apply custom rate limits: {e}")

def clone_match_targets(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, dry_run, summary):
    """Clone match targets from source config to new config, skipping duplicates."""
    try:
        existing_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/match-targets"
        existing_resp = session.get(existing_url)
        existing_mt_payloads = existing_resp.json().get("matchTargets", []) if existing_resp.status_code == 200 else []
        existing_fingerprints = [json.dumps(mt, sort_keys=True) for mt in existing_mt_payloads]

        src_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions/{src_version}/match-targets"
        resp = session.get(src_url)
        resp.raise_for_status()
        match_targets = resp.json().get("matchTargets", [])

        for mt in match_targets:
            new_mt = mt.copy()
            for field in ["matchTargetId", "configId", "configurationId", "version"]:
                new_mt.pop(field, None)

            orig_pol_id = mt.get("securityPolicyId")
            if orig_pol_id not in policy_map:
                print(f"Warning: Original policy {orig_pol_id} not found in policy map. Skipping match target.")
                continue

            new_mt["securityPolicyId"] = policy_map[orig_pol_id]

            fingerprint = json.dumps(new_mt, sort_keys=True)
            if fingerprint in existing_fingerprints:
                print(f"Info: Match target for policy {new_mt['securityPolicyId']} already exists. Skipping duplicate.")
                continue

            if dry_run:
                print(f"Dry-run: Would create match target for policy {new_mt['securityPolicyId']} with:")
                print(json.dumps(new_mt, indent=2))
            else:
                tgt_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}/match-targets"
                r = session.post(tgt_url, json=new_mt)
                if r.status_code not in (200, 201):
                    print(f"Error cloning match target: {r.status_code} - {r.text}")
                else:
                    summary["match_targets"] += 1
                    print(f"Cloned match target for policy {new_mt['securityPolicyId']} into config {dest_config_id}")
    except Exception as e:
        print(f"[ERROR] Failed to clone match targets: {e}")

def main():
    parser = argparse.ArgumentParser(description="Clone an Akamai AppSec security configuration to a new configuration.")
    parser.add_argument('--edgerc', required=True, help='Path to the .edgerc credentials file')
    parser.add_argument('--section', required=True, help='Section in the .edgerc file to use')
    parser.add_argument('--new_config_name', required=True, help='Name for the new security configuration')
    parser.add_argument('--sc_file', required=True, help='Path to Terraform file for source Security Configuration (SC-*.tf)')
    parser.add_argument('--pl_file', required=False, help='Path to Terraform file for source Security Policies (PL-*.tf)')
    parser.add_argument('--rate_limits_file', required=False, help='Path to JSON file for source Rate Policy definitions (if available)')
    parser.add_argument('--dry_run', action='store_true', help='Do not make any changes; only print intended actions')
    args = parser.parse_args()

    summary = {
        "security_policies": 0,
        "client_lists": 0,
        "custom_rules": 0,
        "reputation_profiles": 0,
        "bot_categories": 0,
        "waf_rule_overrides": 0,
        "slow_post_protection": 0,
        "rate_policies": 0,
        "match_targets": 0,
        "waf_group_actions": 0
    }

    try:
        if not os.path.isfile(args.sc_file):
            raise FileNotFoundError(f"SC file not found or unreadable: {args.sc_file}")
        if args.pl_file and not os.path.isfile(args.pl_file):
            raise FileNotFoundError(f"PL file specified but not found or unreadable: {args.pl_file}")
        if args.rate_limits_file and not os.path.isfile(args.rate_limits_file):
            raise FileNotFoundError(f"Rate limits file specified but not found or unreadable: {args.rate_limits_file}")
    except Exception as e:
        print(f"[ERROR] File validation failed: {e}")
        return

    try:
        host, client_token, client_secret, access_token = load_edgerc(args.edgerc, args.section)
    except Exception as e:
        print(f"[ERROR] Failed to load credentials: {e}")
        return

    session = requests.Session()
    session.auth = EdgeGridAuth(client_token=client_token, client_secret=client_secret, access_token=access_token)
    session.headers.update({'Accept': 'application/json', 'Content-Type': 'application/json'})

    try:
        contract_id, group_id, src_config_id, src_version, policies = parse_tf_files(args.sc_file, args.pl_file)
    except Exception as e:
        print(f"[ERROR] Failed to parse Terraform files: {e}")
        return

    if src_version is None:
        try:
            ver_url = f"https://{host}/appsec/v1/configs/{src_config_id}/versions"
            ver_resp = session.get(ver_url)
            if ver_resp.status_code == 200:
                versions = ver_resp.json().get("versions", [])
                src_version = max(v.get("version", 0) for v in versions) if versions else 1
            else:
                src_version = 1
        except Exception as e:
            print(f"[ERROR] Failed to resolve source version: {e}")
            return

    try:
        if args.dry_run:
            print(f"Dry-run: Would create new security configuration '{args.new_config_name}' in contract {contract_id}, group {group_id}")
            dest_config_id = "NEW_CONFIG_ID"
        else:
            create_url = f"https://{host}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}"
            payload = {"configName": args.new_config_name}
            resp = session.post(create_url, json=payload)
            if resp.status_code not in (200, 201):
                raise RuntimeError(f"Failed to create new configuration: {resp.status_code} - {resp.text}")
            resp_json = resp.json()
            dest_config_id = resp_json.get("configId")
            if not dest_config_id:
                raise RuntimeError("Configuration creation succeeded but no configId returned.")
            print(f"Created new configuration '{args.new_config_name}' with ID: {dest_config_id}")
    except Exception as e:
        print(f"[ERROR] Failed to create new configuration: {e}")
        return

    dest_version = 1

    try:
        ver_status_url = f"https://{host}/appsec/v1/configs/{dest_config_id}/versions/{dest_version}"
        ver_resp = session.get(ver_status_url)
        if ver_resp.status_code != 200:
            raise RuntimeError(f"Failed to fetch destination version status: {ver_resp.status_code} - {ver_resp.text}")
        version_data = ver_resp.json()
        if version_data.get("status") != "editable":
            raise RuntimeError(f"Destination config version {dest_version} is not editable. Aborting.")
    except Exception as e:
        print(f"[ERROR] Destination version check failed: {e}")
        return

    # Cloning components with exception handling
    try:
        policy_map = clone_security_policies(session, host, src_config_id, src_version, dest_config_id, dest_version, policies, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone security policies: {e}")
        policy_map = {}

    try:
        client_list_map = clone_client_lists(session, host, src_config_id, src_version, contract_id, group_id, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone client lists: {e}")
        client_list_map = {}

    try:
        rule_map = clone_custom_rules(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, client_list_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone custom rules: {e}")
        rule_map = {}

    try:
        clone_reputation_profiles(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone reputation profiles: {e}")

    try:
        clone_bot_categories(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone bot categories: {e}")

    try:
        clone_waf_group_actions(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone WAF group actions: {e}")

    try:
        clone_waf_rule_overrides(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone WAF rule overrides: {e}")

    try:
        clone_slow_post_protection(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone slow POST protection: {e}")

    rate_file_data = None
    if args.rate_limits_file:
        try:
            with open(args.rate_limits_file, 'r') as rf:
                rate_file_data = json.load(rf)
        except Exception as e:
            print(f"Warning: Could not parse rate limits file: {e}")

    try:
        rate_policy_map = clone_rate_policies(session, host, src_config_id, src_version, dest_config_id, dest_version, rate_file_data, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone rate policies: {e}")
        rate_policy_map = {}

    try:
        apply_custom_rate_limits(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, rate_policy_map, args.dry_run)
    except Exception as e:
        print(f"[ERROR] Failed to apply custom rate limits: {e}")

    try:
        clone_match_targets(session, host, src_config_id, src_version, dest_config_id, dest_version, policy_map, args.dry_run, summary)
    except Exception as e:
        print(f"[ERROR] Failed to clone match targets: {e}")

    print("\n======================= CLONE SUMMARY =======================")
    for k, v in summary.items():
        print(f"{k.replace('_', ' ').capitalize():<30}: {v}")
    print("=============================================================")

    if args.dry_run:
        print("\nDry-run complete. No changes were made.")
    else:
        print("\nCloning complete. Please review and activate the new configuration if appropriate.")

if __name__ == "__main__":
    main()
