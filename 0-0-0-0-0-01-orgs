def clone_and_rename_client_lists(session, base_url, config_id, version, access_group, section):
    print("\n[INFO] Cloning and renaming client lists from Security Policy Template...\n")

    summary = {
        "created": [],
        "skipped": [],
        "errors": []
    }

    # Fetch all client lists (including deprecated)
    url = f"{base_url}/client-list/v1/lists?includeDeleted=true&includeDeprecated=true"
    response = session.get(url)
    if response.status_code != 200:
        print(f"[ERROR] Failed to fetch client lists: {response.status_code}")
        return summary

    client_lists = response.json().get("content", [])
    existing_name_to_delete_flag = {
        cl["name"]: cl.get("availableActions", {}).get("DELETE", {}).get("available", False)
        for cl in client_lists
    }
    existing_names = set(cl["name"] for cl in client_lists)

    for cl in client_lists:
        try:
            cl_name = cl["name"]
            cl_id = cl.get("uniqueId")
            staging_status = cl.get("stagingActivationStatus", "")

            # Skip if 'Security Policy Template' not in name
            if "Security Policy Template" not in cl_name:
                continue

            # Only clone ACTIVE lists
            if staging_status != "ACTIVE":
                print(f"[WARN] Skipping list '{cl_name}' — not ACTIVE in staging")
                continue

            # Build target SC name
            suffix = cl_name.replace("Security Policy Template", "").strip()
            new_name = f"SC-{access_group}-{suffix}"

            # Check if equivalent SC list already exists
            if new_name in existing_names:
                if not existing_name_to_delete_flag.get(new_name, False):
                    print(f"[INFO] Skipping clone: list '{new_name}' already exists and is active")
                    summary["skipped"].append(new_name)
                    continue
                else:
                    print(f"[INFO] Re-cloning '{new_name}' — existing version is flagged for deletion")

            # Build clone payload
            payload = {
                "name": new_name,
                "type": cl["type"],
                "description": f"Cloned from template list '{cl_name}'",
                "tags": cl.get("tags", []),
                "notes": cl.get("notes", ""),
                "list": cl.get("list", []),
                "matchOperator": cl.get("matchOperator", "ANY")
            }

            clone_url = f"{base_url}/client-list/v1/list/{cl_id}/list"
            if section:
                clone_url += f"?section={section}"

            clone_resp = session.post(clone_url, json=payload)
            if clone_resp.status_code == 201:
                print(f"[INFO] Successfully cloned list '{new_name}'")
                summary["created"].append(new_name)
            else:
                print(f"[ERROR] Failed to clone '{new_name}': {clone_resp.status_code} — {clone_resp.text}")
                summary["errors"].append(new_name)

        except Exception as e:
            print(f"[ERROR] Exception while processing list '{cl.get('name', 'unknown')}': {e}")
            summary["errors"].append(cl.get("name", "unknown"))

    print("\n==== Client List Cloning Summary ====")
    print(f"Created: {len(summary['created'])}, Skipped: {len(summary['skipped'])}, Errors: {len(summary['errors'])}")
    return summary
