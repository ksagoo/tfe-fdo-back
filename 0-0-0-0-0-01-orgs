#!/usr/bin/env python3
# ============================================================
# Akamai AppSec Onboarding Script from Template Configuration
# ============================================================

# Script Name:
#   akamai_onboard_from_template.py

# Description:
#   This script simplifies onboarding of new Akamai AppSec security configurations
#   by cloning a default template configuration and its associated policy.
#   It supports the following features:
#
#     • Accepts FQDN(s), with the first as primary and rest as SANs
#     • Accepts --isProd to determine environment
#     • Looks up internal template config/policy per account
#     • Supports --dry-run to preview creation actions
#     • Aborts if the target config/policy already exists
#
# Parameters:
#   --section (required)     Edgerc section name (used for authentication context)
#   --access_group (required) Name of the new access group (used in config/policy name)
#   --fqdn (required, multiple) One or more FQDNs. First is primary, others are SANs.
#   --isProd (optional)      Flag to indicate if config is production. Defaults to false.
#   --dry-run (optional)     Preview what will be created without performing any API calls.
#
# Example:
#   python akamai_onboard_from_template.py \
#       --section dev \
#       --access_group WPB-APAC-IN-CyberWASPTesting \
#       --fqdn esppos-dev-01.hsbc.com.hk esppos-dev-02.hsbc.com.hk \
#       --isProd \
#       --dry-run

import sys
import json
import argparse
from akamai.edgegrid import EdgeGridAuth
import requests
from urllib.parse import urljoin

# --- Internal template map (per account) ---
TEMPLATE_LOOKUP = {
    "dev": {
        "configId": 107918,
        "policyId": "TEMP_285595"
    },
    # Add other accounts as needed
}

# --- Setup EdgeGrid session ---
def setup_session(section: str):
    import configparser
    import os

    edgerc_path = os.path.expanduser("~/.edgerc")
    config = configparser.ConfigParser()
    config.read(edgerc_path)

    if section not in config:
        raise ValueError(f"[ERROR] Section '{section}' not found in {edgerc_path}")

    session = requests.Session()
    session.auth = EdgeGridAuth(
        client_token=config[section]['client_token'],
        client_secret=config[section]['client_secret'],
        access_token=config[section]['access_token']
    )
    base_url = config[section]['host']
    return session, f"https://{base_url}"

# --- Check if config exists ---
def check_config_exists(session, base_url, name):
    url = urljoin(base_url, "/appsec/v1/configs")
    response = session.get(url)
    response.raise_for_status()
    for item in response.json():
        if item.get("name") == name:
            return item.get("id")
    return None

# --- Check if policy exists for config ---
def check_policy_exists(session, base_url, config_id, policy_name):
    url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions/1/security-policies")
    response = session.get(url)
    response.raise_for_status()
    for policy in response.json().get("policies", []):
        if policy.get("policyName") == policy_name:
            return policy.get("policyId")
    return None

# --- Create new config by cloning from template ---
def create_config(session, base_url, group_id, hostnames, template_config_id):
    url = urljoin(base_url, "/appsec/v1/configs")
    payload = {
        "createFrom": {
            "configId": template_config_id,
            "version": 1
        },
        "hostnames": hostnames,
        "groupId": int(group_id)
    }
    response = session.post(url, json=payload)
    response.raise_for_status()
    return response.json()

# --- Create new policy by cloning from template ---
def create_policy(session, base_url, config_id, policy_name, prefix, template_policy_id):
    url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions/1/security-policies")
    payload = {
        "defaultSettings": "true",
        "policyName": policy_name,
        "policyPrefix": prefix,
        "source": "onboarding",
        "createFromSecurityPolicy": template_policy_id
    }
    response = session.post(url, json=payload)
    response.raise_for_status()
    return response.json()

# --- Main ---
def main():
    parser = argparse.ArgumentParser(description="Clone AppSec config & policy from template")
    parser.add_argument("--section", required=True)
    parser.add_argument("--access_group", required=True)
    parser.add_argument("--fqdn", required=True, nargs="+")
    parser.add_argument("--isProd", action="store_true", default=False)
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args()

    policy_suffix = "Prod" if args.isProd else "NonProd"
    policy_prefix = "Prod" if args.isProd else "NonP"

    config_name = f"SC-{args.access_group}"
    policy_name = f"PL-{args.access_group}-{policy_suffix}"

    primary_hostname = args.fqdn[0]
    all_hostnames = args.fqdn

    if args.section not in TEMPLATE_LOOKUP:
        print(f"[ERROR] No template config/policy found for section: {args.section}")
        sys.exit(1)

    template_info = TEMPLATE_LOOKUP[args.section]

    session, base_url = setup_session(args.section)

    existing_config_id = check_config_exists(session, base_url, config_name)
    if existing_config_id:
        existing_policy_id = check_policy_exists(session, base_url, existing_config_id, policy_name)
        if existing_policy_id:
            print(f"[ERROR] Config '{config_name}' and policy '{policy_name}' already exist.")
            sys.exit(1)
        else:
            print(f"[ERROR] Config '{config_name}' exists but not policy '{policy_name}'. Aborting to avoid conflict.")
            sys.exit(1)

    print("==== DRY RUN MODE ====" if args.dry_run else "==== EXECUTING CREATION ====")
    print(f"[INFO] Config to be created: {config_name}")
    print(f"[INFO] Policy to be created: {policy_name}")
    print(f"[INFO] Hostnames: {all_hostnames}")
    print(f"[INFO] Using template configId={template_info['configId']}, policyId={template_info['policyId']}")

    if args.dry_run:
        print("[DRY RUN] No API calls made.")
        return

    created_config = create_config(session, base_url, group_id=template_info.get("groupId", 0), hostnames=all_hostnames, template_config_id=template_info["configId"])
    new_config_id = created_config["id"]
    print(f"[SUCCESS] Created config ID: {new_config_id}")

    created_policy = create_policy(session, base_url, new_config_id, policy_name, policy_prefix, template_info["policyId"])
    print(f"[SUCCESS] Created policy ID: {created_policy.get('policyId')}")

if _name_ == "_main_":
    main()
