def build_cloned_list_id_map(session, base_url, access_group_prefix):
    url = f"{base_url}/client-list/v1/lists"
    response = session.get(url)
    response.raise_for_status()

    lists = response.json().get("listItems", [])
    id_map = {}

    # Convert into name → ID dict
    name_to_id = {lst["name"]: lst["uniqueId"] for lst in lists if "name" in lst and "uniqueId" in lst}

    # Known mappings
    required_mappings = {
        "Security Policy Template IP Block List": f"SC-{access_group_prefix} IP Block List",
        "Security Policy Template Geo Block List": f"SC-{access_group_prefix} Geo Block List",
        "Security Policy Template IP Block List Exceptions": f"SC-{access_group_prefix} IP Block List Exceptions"
    }

    print("\n[INFO] Attempting to map known templates to expected clones...")

    for template_name, clone_name in required_mappings.items():
        template_id = name_to_id.get(template_name)
        clone_id = name_to_id.get(clone_name)

        if template_id and clone_id:
            id_map[template_id] = clone_id
            print(f"[MATCHED] {template_name} → {clone_name}")
        else:
            print(f"[WARN] Could not find both IDs for: {template_name} → {clone_name}")

    return id_map
