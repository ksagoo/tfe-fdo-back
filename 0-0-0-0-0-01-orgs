def reassign_client_lists(session, base_url, config_id, version, sc_name, new_policy_id):
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    # Step 1: Fetch all client lists globally
    get_url = f"{base_url}/client-list/v1/lists"
    print(f"[DEBUG] Fetching all client lists from: {get_url}")
    try:
        response = session.get(get_url)
        response.raise_for_status()
        client_lists = response.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    # Step 2: Filter only lists that belong to this config (by name prefix)
    filtered_lists = []
    for cl in client_lists:
        if cl.get("name", "").startswith(sc_name + " ") and "ASN Block List" not in cl.get("name", ""):
            filtered_lists.append(cl)

    print(f"[DEBUG] Found {len(filtered_lists)} client lists with prefix '{sc_name}'")

    if not filtered_lists:
        print("[INFO] No matching client lists to reassign.")
        return summary

    # Step 3: Build payload
    reassignment_payload = {
        "clientLists": [
            {
                "id": cl["listId"],
                "action": cl.get("action", "alert")
            }
            for cl in filtered_lists
        ]
    }

    summary["processed"] = len(reassignment_payload["clientLists"])

    put_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{new_policy_id}/client-lists"
    print(f"[DEBUG] Reassigning client lists to policy via: {put_url}")
    print(f"[DEBUG] Payload:\n{json.dumps(reassignment_payload, indent=2)}")

    # Step 4: Send PUT request
    try:
        response = session.put(put_url, json=reassignment_payload)
        response.raise_for_status()
        summary["successful"] = summary["processed"]
        for cl in reassignment_payload["clientLists"]:
            summary["details"].append({
                "id": cl["id"],
                "status": "success"
            })
        print(f"[INFO] Successfully reassigned {summary['successful']} client lists.")
    except Exception as e:
        summary["failed"] = summary["processed"]
        summary["details"].append({
            "status": "failed",
            "error": str(e)
        })
        print(f"[ERROR] Failed to reassign client lists: {e}")

    return summary
