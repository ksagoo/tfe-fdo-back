if not re.search(r"\bSecurity\s*Policy\s*Template\b", name, re.IGNORECASE):


def clone_and_rename_client_lists(session, base_url, config_id, version, access_group, section, dry_run=True):
    print(f"[INFO] {'[DRY RUN] ' if dry_run else ''}Cloning client lists from Security Policy Template...")

    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "skipped_existing": [],
        "results": []
    }

    def normalize(name):
        return name.strip().lower()

    try:
        url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
        if section:
            url += f"&section={section}"

        resp = session.get(url)
        resp.raise_for_status()
        client_lists = resp.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    for cl in client_lists:
        original_name = cl.get("name", "")
        
        # Match any list with "Security Policy Template" in name
        if "Security Policy Template" not in original_name:
            continue

        # Extract the suffix from name before "Security Policy Template"
        suffix = original_name.split("Security Policy Template")[0].strip()
        new_name = f"SC-{access_group}-{suffix}"
        norm_new_name = normalize(new_name)

        # Check for existing lists with same target name
        matching = [x for x in client_lists if normalize(x.get("name", "")) == norm_new_name]

        still_in_use = False
        for match in matching:
            deprecated = match.get("deprecated", False)
            if deprecated is False:
                still_in_use = True
                break

        if still_in_use:
            # Target list already exists and is active
            summary["skipped_existing"].append(new_name)
            continue

        # Build payload to clone
        payload = {
            "name": new_name,
            "type": cl.get("type"),
            "listType": cl.get("listType"),
            "description": f"Cloned from template list '{original_name}'",
            "tags": [],
            "cloneFromList": {
                "listId": cl.get("listId")
            }
        }

        if dry_run:
            print(f"[DRY RUN] Would clone: '{original_name}' to '{new_name}'")
            summary["successful"] += 1
            summary["results"].append({
                "status": "dry-run",
                "source": original_name,
                "target": new_name
            })
        else:
            clone_url = f"{base_url}/client-list/v1/lists"
            if section:
                clone_url += f"?section={section}"

            try:
                response = session.post(clone_url, json=payload)
                response.raise_for_status()
                created_id = response.json().get("listId")
                print(f"[SUCCESS] Cloned '{original_name}' -> '{new_name}' (listId: {created_id})")
                summary["successful"] += 1
                summary["results"].append({
                    "status": "success",
                    "source": original_name,
                    "target": new_name,
                    "listId": created_id
                })
            except Exception as e:
                print(f"[ERROR] Failed to clone '{original_name}' to '{new_name}': {e}")
                summary["failed"] += 1
                summary["results"].append({
                    "status": "failed",
                    "source": original_name,
                    "target": new_name,
                    "error": str(e)
                })

        summary["processed"] += 1

    return summary
