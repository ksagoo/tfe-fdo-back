def simulate_clone_client_lists(session, base_url, config_id, version, access_group, section=None):
    print("[INFO] Simulating client list cloning from Security Policy Template")
    summary = {
        "processed": 0,
        "to_clone": [],
        "skipped_active": [],
        "skipped_existing": []
    }

    # Fetch all client lists
    url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
    try:
        response = session.get(url)
        response.raise_for_status()
        all_lists = response.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    for template_list in all_lists:
        name = template_list.get("name", "")
        list_id = template_list.get("listId")
        if "Security Policy Template" not in name:
            continue

        suffix = name.replace("Security Policy Template", "").strip()
        target_name = f"SC-{access_group}-{suffix}"

        # Check if any list with the target name is not deletable
        matching_targets = [
            cl for cl in all_lists if cl.get("name") == target_name
        ]

        if any(not cl.get("availableActions", {}).get("DELETE", {}).get("available", False) for cl in matching_targets):
            print(f"[SKIP] Target list '{target_name}' already exists and is in use (not deletable). Skipping.")
            summary["skipped_existing"].append(target_name)
            continue

        print(f"[INFO] Would clone '{name}' => '{target_name}' using listId: {list_id}")
        summary["processed"] += 1
        summary["to_clone"].append(target_name)

    print("\n[DEBUG] Clone Summary:")
    print(json.dumps(summary, indent=2))
    return summary
