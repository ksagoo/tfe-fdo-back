def create_default_security_policies(session, base_url, config_id, version, default_policies):
    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies"

    for env in ["prod", "nonprod"]:
        policy_data = default_policies.get(env)
        if not policy_data:
            print(f"[WARNING] Missing default policy config for {env}, skipping.")
            continue

        name = policy_data["name"]
        prefix = policy_data["prefix"]

        payload = {
            "policyName": name,
            "policyPrefix": prefix,
            "policyDescription": f"Default policy created for {name}"
        }

        try:
            resp = session.post(url, json=payload)
            if resp.status_code in [200, 201]:
                print(f"[INFO] Created default policy: {name}")
            else:
                print(f"[ERROR] Failed to create policy {name}: ({resp.status_code}) {resp.text}")
        except Exception as e:
            print(f"[ERROR] Exception while creating policy {name}: {e}")


# After config creation:
if config_id is not None:
    default_policies = metadata.get("default_policies", {})
    create_default_security_policies(session, base_url, config_id, version, default_policies)
