def run_all_reassignments(session, base_url, config_id, version, old_policy_id, new_policy_id, access_group_prefix):
    all_results = {}

    # 1. Build client list map from templates to cloned IDs
    try:
        cloned_list_map = build_cloned_list_map(session, base_url, access_group_prefix)
    except Exception as e:
        print(f"[ERROR] Failed to build cloned client list map: {str(e)}")
        cloned_list_map = {}

    # 2. Run all reassignment modules
    all_results["clone_client_lists"] = clone_and_rename_client_lists(session, base_url, access_group_prefix)
    all_results["match_targets"] = reassign_match_targets(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["custom_rules"] = reassign_custom_rules(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["rate_limits"] = reassign_rate_limit_rules(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["reputation_profiles"] = reassign_reputation_profiles(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["slow_post_protection"] = reassign_slow_post_protection(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["akamai_bot_category_actions"] = reassign_akamai_bot_category_actions(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["waf_group_actions"] = reassign_waf_group_actions(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["waf_rule_exceptions"] = reassign_waf_rule_exceptions(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["waf_overrides"] = reassign_waf_overrides(session, base_url, config_id, version, old_policy_id, new_policy_id)
    all_results["ip_geo_asn_lists"] = reassign_ip_geo_asn_lists(session, base_url, config_id, version, new_policy_id, cloned_list_map)

    # 3. Print final summary
    print("\n=== Onboarding Reassignment Summary ===")
    for module, result in all_results.items():
        print(f"\nModule: {module}")
        print(f"Processed: {result['processed']}, Successful: {result['successful']}, Failed: {result['failed']}")
        if result.get("details"):
            for d in result["details"]:
                print(f"  - {d}")

    return all_results
