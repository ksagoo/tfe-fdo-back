def clone_and_rename_client_lists(session, base_url, config_id, version, access_group):
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    # Fetch all client lists
    url = f"{base_url}/client-list/v1/lists?includeItems=true&includeDeprecated=true"
    print(f"[DEBUG] Fetching all client lists from: {url}")
    response = session.get(url)
    if not response.ok:
        print(f"[ERROR] Failed to fetch client lists: {response.status_code} - {response.text}")
        return summary

    all_lists = response.json().get("content", [])
    print(f"[DEBUG] Retrieved {len(all_lists)} total client lists")

    # Filter lists based on Security Policy Template
    template_lists = [
        cl for cl in all_lists
        if "Security Policy Template" in cl.get("name", "")
    ]
    print(f"[DEBUG] Found {len(template_lists)} lists with 'Security Policy Template' in name")

    # Check current list names to avoid duplicates
    existing_names = set(cl.get("name") for cl in all_lists)

    for cl in template_lists:
        original_name = cl.get("name", "")
        list_id = cl.get("listId")

        if not list_id or not original_name:
            print(f"[WARN] Skipping malformed client list: {cl}")
            continue

        # Generate new name by replacing prefix
        new_name = original_name.replace("Security Policy Template", access_group)
        if new_name in existing_names:
            print(f"[DEBUG] Skipping already cloned list: {new_name}")
            continue

        payload = {
            "name": new_name,
            "type": cl["type"],
            "description": cl.get("description", ""),
            "list": cl.get("list", []),
            "tags": cl.get("tags", [])
        }

        clone_url = f"{base_url}/client-list/v1/lists"
        print(f"[DEBUG] Cloning list '{original_name}' => '{new_name}'")
        try:
            clone_response = session.post(clone_url, json=payload)
            clone_response.raise_for_status()
            summary["processed"] += 1
            summary["successful"] += 1
            summary["details"].append({"id": list_id, "name": new_name, "status": "success"})
            print(f"[INFO] Successfully cloned list '{original_name}' => '{new_name}'")
        except Exception as e:
            summary["processed"] += 1
            summary["failed"] += 1
            summary["details"].append({
                "id": list_id,
                "name": original_name,
                "status": "failed",
                "error": str(e)
            })
            print(f"[ERROR] Failed to clone list '{original_name}': {e}")

    return summary
