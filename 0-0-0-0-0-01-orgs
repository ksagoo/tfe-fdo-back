def main():
    args = parse_args()
    
    session, base_url = setup_session(args.edgerc_file, args.section)

    # Get region and its associated data using account section name
    region, region_data = get_region_from_group(args.section)
    if not region_data:
        print(f"[ERROR] Could not determine region for section: {args.section}")
        sys.exit(1)

    # Construct names and suffixes
    config_name = f"SC-{args.access_group}"
    policy_suffix = "Prod" if args.isProd else "NonProd"
    policy_name = f"PL-{args.access_group}-{policy_suffix}"
    policy_prefix = "Prod" if args.isProd else "NonP"

    # Check if config already exists
    existing_config_id = config_exists(session, base_url, config_name)
    if existing_config_id:
        # If config exists, check if policy exists
        existing_policy_id = policy_exists(session, base_url, existing_config_id, policy_name)
        if existing_policy_id:
            print(f"[ERROR] Config '{config_name}' and Policy '{policy_name}' already exist. Aborting.")
            sys.exit(1)
        else:
            print(f"[WARNING] Config '{config_name}' exists but Policy '{policy_name}' does not. Aborting to avoid partial onboarding.")
            sys.exit(1)

    # Prepare FQDN list
    fqdn_list = args.fqdn
    if not fqdn_list:
        print("[ERROR] No FQDNs provided for onboarding.")
        sys.exit(1)

    if args.dry_run:
        dry_run_preview(
            config_name=config_name,
            policy_name=policy_name,
            fqdn=fqdn_list,
            region=region,
            group_id=region_data["group_id"],
            contract_id=region_data["contract_id"],
            template_cfg_id=region_data["template_config_id"],
            template_pol_id=region_data["template_policy_id"]
        )
        sys.exit(0)

    # Proceed with onboarding
    print(f"\n[INFO] Proceeding with onboarding...")

    config_id = create_security_config(
        session,
        base_url,
        config_name,
        region_data["group_id"],
        region_data["template_config_id"],
        fqdn_list
    )

    policy_id = create_default_policy(
        session,
        base_url,
        config_id,
        policy_name,
        policy_prefix,
        region_data["template_policy_id"]
    )

    print(f"\nOnboarding complete.")
    print(f"Security Config ID: {config_id}")
    print(f"Security Policy ID: {policy_id}")
