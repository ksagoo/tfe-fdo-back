def clone_match_targets_for_prod(session, base_url, config_id, version, section, nonprod_policy_id, prod_policy_id, access_group, fqdn_list):
    print("[INFO] Cloning match targets from NonProd to Prod policy")

    get_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/match-targets"
    if section:
        get_url += f"?section={section}"

    try:
        get_resp = session.get(get_url)
        get_resp.raise_for_status()
        match_targets = get_resp.json().get("matchTargets", {}).get("websiteTargets", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch match targets from NonProd policy: {e}")
        return []

    cloned_targets = []

    for target in match_targets:
        if not isinstance(target, dict):
            print(f"[WARN] Skipping invalid match target (expected dict): {target}")
            continue

        try:
            clone_target = {
                "defaultAction": target.get("defaultAction"),
                "isNegativeFileExtensionMatch": target.get("isNegativeFileExtensionMatch"),
                "isNegativePathMatch": target.get("isNegativePathMatch"),
                "sequence": 2,  # Always set sequence to 2 for Prod
                "type": target.get("type"),
                "useFastMatch": target.get("useFastMatch"),
                "filePaths": target.get("filePaths", []),
                "hostnames": fqdn_list,
                "securityPolicy": {
                    "policyId": prod_policy_id
                },
                "bypassNetworkLists": build_bypass_list_from_client_lists(
                    session, base_url, access_group, section, is_prod=True
                )
            }

            post_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/match-targets"
            if section:
                post_url += f"?section={section}"

            post_resp = session.post(post_url, json=clone_target)
            post_resp.raise_for_status()
            print(f"[SUCCESS] Cloned match target to Prod policy for hostnames: {fqdn_list}")
            cloned_targets.append(clone_target)

        except Exception as e:
            print(f"[ERROR] Failed to clone match target for hostnames {fqdn_list}: {e}")

    return cloned_targets
