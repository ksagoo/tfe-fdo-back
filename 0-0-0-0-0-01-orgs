[18:23, 08/06/2025] Kuldeep: def get_policy_id(session, base_url, config_id, env, default_policies):
    """
    Retrieve policy ID for the given environment using existing config_id.

    Args:
        session (requests.Session): Authenticated Akamai session.
        base_url (str): Akamai API base URL.
        config_id (str): Existing security configuration ID.
        env (str): 'prod' or 'nonprod'.
        default_policies (dict): Contains 'prod' and 'nonprod' policy details with names or prefixes.

    Returns:
        str or None: The policy ID if found, else None.
    """
    try:
        url = f"{base_url}/appsec/v1/configs/{config_id}/security-policies"
        response = session.get(url)
        response.raise_for_status()

        policies = response.json().get("securityPolicies", [])
        target_policy_name = default_policies.get(env, {}).get("name")

        for policy in policies:
            if policy.get("policyName") == target_policy_name:
                return policy.get("policyId")

        print(f"[WARN] Policy name '{target_policy_name}' not found for env '{env}' in config '{config_id}'")
        return None

    except Exception as e:
        print(f"[ERROR] Failed to get policy ID: {e}")
        return None
[18:23, 08/06/2025] Kuldeep: # If config_id already exists
if config_id and not policy_id:
    policy_id = get_policy_id(session, base_url, config_id, "prod", metadata["default_policies"])
    if policy_id:
        metadata["default_policies"]["prod"]["id"] = policy_id
        update_config_metadata(metadata_path, metadata)
