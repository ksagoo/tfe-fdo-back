clone_and_rename_client_lists(session, base_url, config_id, version, access_group)

def run_all(...):
    ...

    # [1] Clone config and policy
    config_id, version, temp_policy_id, new_policy_id = clone_config_and_policy(...)

    # [2] Clone and rename client lists for SC-<access_group>
    clone_and_rename_client_lists(session, base_url, config_id, version, access_group)

    # [3] Reassign protections
    reassign_match_targets(...)
    reassign_client_lists(...)

def search_client_lists_by_name(session, base_url, keyword):
    url = f"{base_url}/client-list/v1/lists?includeItems=true&includeDeprecated=true"
    response = session.get(url)
    if not response.ok:
        raise Exception(f"[ERROR] {response.status_code}: {response.text}")
    
    client_lists = response.json().get("content", [])
    keyword_lower = keyword.lower()
    matches = []

    for cl in client_lists:
        list_id = cl.get("listId", "no id")
        name = cl.get("name", "") or cl.get("groupName", "")
        name_lower = name.lower()
        if keyword_lower in name_lower:
            matches.append((list_id, name))

    if not matches:
        print(f"[WARN] No client list matches for '{keyword}'")

    return matches


def build_bypass_list_from_client_lists(session, base_url, access_group, account, is_prod):
    print(f"[INFO] Building bypass list for access_group={access_group}, account={account}, is_prod={is_prod}")
    bypass_list = []
    matches = search_client_lists_by_name(session, base_url, "")  # all lists

    def find_match(keyword):
        for list_id, name in matches:
            if keyword.lower() in name.lower():
                return {"id": list_id, "name": name, "listType": "CL", "type": "IP"}
        return None

    # Always add config-specific list
    keyword = f"SC-{access_group}"
    match = find_match(keyword)
    if match:
        bypass_list.append(match)
    else:
        print(f"[WARN] Client list not found: {keyword}")

    # Conditional logic
    if is_prod:
        keyword = f"VUL-SCAN-{account if account != 'DEV' else 'APAC'}"
    else:
        keyword = "VUL-SCAN-PRE-PROD"

    match = find_match(keyword)
    if match:
        bypass_list.append(match)
    else:
        print(f"[WARN] Client list not found: {keyword}")

    # Always remove "Security Policy Template"
    return [entry for entry in bypass_list if "Security Policy Template" not in entry["name"]]


def clone_and_rename_client_lists(session, base_url, config_id, version, access_group):
    print(f"[INFO] Cloning and renaming client lists from 'Security Policy Template' to 'SC-{access_group}'")
    
    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/client-lists"
    response = session.get(url)
    if not response.ok:
        raise Exception(f"[ERROR] Failed to fetch client lists: {response.status_code}: {response.text}")
    
    original_lists = response.json().get("clientLists", [])
    renamed_count = 0

    for cl in original_lists:
        name = cl.get("name", "")
        if "Security Policy Template" not in name:
            continue
        
        # Replace only the prefix
        new_name = name.replace("Security Policy Template", f"SC-{access_group}")
        payload = {
            "name": new_name,
            "description": cl.get("description", ""),
            "type": cl.get("type", "IP"),
            "list": cl.get("list", []),
            "matchType": cl.get("matchType", "IP"),
        }

        clone_url = f"{base_url}/client-list/v1/lists"
        clone_response = session.post(clone_url, json=payload)
        if clone_response.ok:
            print(f"[SUCCESS] Cloned list '{name}' as '{new_name}'")
            renamed_count += 1
        else:
            print(f"[ERROR] Failed to clone list '{name}': {clone_response.status_code}: {clone_response.text}")

    print(f"[INFO] Completed cloning {renamed_count} lists.")
