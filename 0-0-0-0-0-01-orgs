def simulate_clone_client_lists(session, base_url, config_id, version, access_group, section=None):
    print("[INFO] Simulating client list cloning from Security Policy Template lists")

    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "skipped_existing": [],
        "skipped_active": [],
        "to_clone": []
    }

    # Fetch all client lists once
    url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
    try:
        response = session.get(url)
        response.raise_for_status()
        all_lists = response.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    for cl in all_lists:
        name = cl.get("name", "")
        staging_status = cl.get("stagingActivationStatus", "")
        if not name.startswith("Security Policy Template"):
            continue

        suffix = name.replace("Security Policy Template", "").strip()
        target_name = f"SC-{access_group}-{suffix}"

        # Step 1: check if any undeletable list exists for the target
        undeletable = next(
            (entry for entry in all_lists
             if entry.get("name") == target_name and
                not entry.get("availableActions", {}).get("DELETE", {}).get("available", True)),
            None
        )
        if undeletable:
            print(f"[INFO] Target list '{target_name}' exists and is not deletable (listId: {undeletable['listId']}). Skipping.")
            summary["skipped_existing"].append(target_name)
            continue

        if staging_status == "ACTIVE":
            print(f"[WARN] Template list '{name}' is still ACTIVE in staging, skipping.")
            summary["skipped_active"].append(name)
            continue

        print(f"[INFO] Would clone: Security Policy Template '{name}' -> '{target_name}'")
        summary["to_clone"].append(target_name)
        summary["processed"] += 1

    print("\n[DEBUG] Clone Summary:")
    print(f"Processed: {summary['processed']}")
    print(f"Skipped active: {summary['skipped_active']}")
    print(f"Skipped existing (undeletable): {summary['skipped_existing']}")
    print(f"To clone => {summary['to_clone']}")

    return summary
