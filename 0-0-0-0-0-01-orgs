def clone_and_rename_client_lists(session, base_url, config_id, version, access_group):
    """
    Clones all client lists containing 'Security Policy Template' in the name
    and renames them with 'SC-<access_group>' replacing the prefix.
    """
    url = f"{base_url}/client-list/v1/lists?includeItems=true&includeDeprecated=true"
    response = session.get(url)
    if not response.ok:
        raise Exception(f"[ERROR] Failed to fetch client lists: {response.status_code} - {response.text}")

    all_lists = response.json().get("content", [])
    template_lists = [cl for cl in all_lists if "Security Policy Template" in cl.get("name", "")]
    existing_lists = {cl["name"]: cl["listId"] for cl in all_lists}  # map for quick lookups

    print(f"[INFO] Found {len(template_lists)} template lists to clone.")

    results = {
        "processed": len(template_lists),
        "successful": 0,
        "failed": 0,
        "details": []
    }

    for cl in template_lists:
        original_name = cl["name"]
        suffix = original_name.replace("Security Policy Template", "").strip()
        new_name = f"SC-{access_group} {suffix}".strip()

        if new_name in existing_lists:
            print(f"[INFO] Skipping already existing list: {new_name} (listId={existing_lists[new_name]})")
            continue

        payload = {
            "name": new_name,
            "type": cl["type"],
            "description": f"Cloned from '{original_name}' for onboarding automation.",
            "list": cl.get("list", [])
        }

        clone_url = f"{base_url}/client-list/v1/lists"
        try:
            clone_response = session.post(clone_url, json=payload)
            if clone_response.ok:
                data = clone_response.json()
                print(f"[SUCCESS] Cloned '{original_name}' -> '{new_name}' (listId={data['listId']})")
                results["successful"] += 1
                results["details"].append({
                    "id": data["listId"],
                    "name": new_name,
                    "status": "success"
                })

                # Attempt activation in staging
                if data.get("stagingStatus") != "ACTIVE":
                    act_url = f"{base_url}/client-list/v1/lists/{data['listId']}/activate"
                    act_payload = { "network": "staging" }
                    act_response = session.post(act_url, json=act_payload)
                    if act_response.ok:
                        print(f"[INFO] Activated list '{new_name}' in staging.")
                    else:
                        print(f"[WARN] Failed to activate '{new_name}' in staging: {act_response.status_code} - {act_response.text}")
            else:
                raise Exception(clone_response.text)

        except Exception as e:
            print(f"[ERROR] Failed to clone list '{original_name}': {str(e)}")
            results["failed"] += 1
            results["details"].append({
                "name": original_name,
                "new_name": new_name,
                "status": "failed",
                "error": str(e)
            })

    return results
