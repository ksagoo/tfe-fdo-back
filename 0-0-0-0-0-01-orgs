def clone_and_rename_client_lists(session, base_url, config_id, version, section, access_group):
    print(f"[INFO] Cloning and renaming client lists from Security Policy Template")
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "results": []
    }

    # Fetch all existing client lists
    url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
    try:
        response = session.get(url)
        response.raise_for_status()
        client_lists = response.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    for cl in client_lists:
        try:
            name = cl.get("name", "")
            list_id = cl.get("listId")
            list_type = cl.get("type")
            list_subtype = cl.get("listType")
            available_actions = cl.get("availableActions", {})
            delete_available = available_actions.get("DELETE", {}).get("available", False)

            # Skip if not a template list
            if "Security Policy Template" not in name:
                continue

            # Skip if already cloned for this access group
            if f"SC-{access_group}" in name:
                continue

            # If delete is NOT available, we assume list is still in use and should be skipped
            if not delete_available:
                print(f"[WARN] Skipping list '{name}' - DELETE not available (possibly still in use)")
                continue

            # Build new name
            suffix = name.replace("Security Policy Template ", "").strip()
            new_name = f"SC-{access_group}-{suffix}"

            # Build clone payload
            payload = {
                "name": new_name,
                "type": list_type,
                "listType": list_subtype,
                "description": f"Cloned from template list '{name}'",
                "tags": [],
                "cloneFromList": {
                    "listId": list_id
                }
            }

            clone_url = f"{base_url}/client-list/v1/lists"
            if section:
                clone_url += f"?section={section}"

            print(f"[DEBUG] Cloning '{name}' -> '{new_name}'")
            print(f"[DEBUG] Payload: {json.dumps(payload, indent=2)}")

            clone_resp = session.post(clone_url, json=payload)
            clone_resp.raise_for_status()

            print(f"[SUCCESS] Successfully cloned list '{name}' -> '{new_name}'")

            summary["processed"] += 1
            summary["successful"] += 1
            summary["results"].append({
                "status": "success",
                "source": name,
                "target": new_name,
                "listId": clone_resp.json().get("listId")
            })

        except Exception as e:
            print(f"[ERROR] Failed to clone list '{name}': {e}")
            summary["processed"] += 1
            summary["failed"] += 1
            summary["results"].append({
                "status": "failed",
                "source": name,
                "error": str(e)
            })

    return summary
