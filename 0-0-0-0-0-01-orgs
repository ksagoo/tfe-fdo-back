[03:34, 13/06/2025] Kuldeep: def reassign_ip_geo_asn_lists(session, base_url, config_id, version, policy_id, cloned_list_id_map):
    """
    cloned_list_id_map = {
        "template_list_id_1": "cloned_list_id_1",
        "template_list_id_2": "cloned_list_id_2",
        ...
    }
    """

    print("[INFO] RUNNING: reassign_ip_geo_asn_lists")

    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/ip-geo-firewall"
    summary = {
        "processed": 1,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    try:
        response = session.get(url)
        response.raise_for_status()
        data = response.json()
        updated = False

        def update_list(control_key):
            current_lists = data.get(control_key, {}).get("blockedClientList", [])
            new_lists = []
            for entry in current_lists:
                list_id = entry.get("id")
                if list_id in cloned_list_id_map:
                    new_lists.append({"id": cloned_list_id_map[list_id]})
                    print(f"[INFO] Replaced {control_key} list {list_id} with {cloned_list_id_map[list_id]}")
                    nonlocal updated
                    updated = True
                else:
                    new_lists.append(entry)
            if control_key in data and new_lists:
                data[control_key]["blockedClientList"] = new_lists

        update_list("ipControls")
        update_list("geoControls")
        update_list("asnControls")

        if updated:
            put_resp = session.put(url, json=data)
            put_resp.raise_for_status()
            summary["successful"] = 1
            summary["details"].append({"status": "success", "action": "updated IP/GEO/ASN lists"})
        else:
            summary["details"].append({"status": "skipped", "reason": "no matching template list IDs found"})

    except Exception as e:
        summary["failed"] = 1
        summary["details"].append({"status": "failed", "error": str(e)})

    return summary
[03:34, 13/06/2025] Kuldeep: def build_cloned_list_id_map(session, base_url, access_group_prefix):
    url = f"{base_url}/appsec/v1/client-list"
    response = session.get(url)
    response.raise_for_status()

    lists = response.json().get("clientLists", [])
    template_to_clone = {}

    for client_list in lists:
        name = client_list.get("name")
        list_id = client_list.get("id")

        # Find template name
        if name.startswith("Security Policy Template") and list_id:
            suffix = name.replace("Security Policy Template ", "").strip()
            expected_clone_name = f"SC-{access_group_prefix} {suffix}"
            # Look for clone with this suffix
            for candidate in lists:
                if candidate.get("name") == expected_clone_name:
                    template_to_clone[list_id] = candidate.get("id")

    return template_to_clone
