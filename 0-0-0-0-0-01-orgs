"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/custom-rules"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/rate-policies"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/ip-geo-firewall"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/reputation-profiles"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/custom-rules"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/api-endpoints"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/slow-post"
"/appsec/v1/configs/configId/versions/versionNumber/security-policies/policyId/rules"
"/appsec/v1/configs/configId/versions/versionNumber/match-targets"


def export_all_modules(session, base_url, config_id, version, policy_id):
    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets",
        "match_targets.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/custom-rules",
        "custom_rules.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rate-policies",
        "rate_policies.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/ip-geo-firewall",
        "ip_geo_firewall.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/reputation-profiles",
        "reputation_profiles.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/api-endpoints",
        "api_endpoints.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/slow-post",
        "slow_post_protection.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rules",
        "waf_rules.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/urlProtectionActions",
        "url_protection_actions.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/api-request-constraints",
        "api_request_constraints.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/malwarePolicyActions",
        "malware_policy_actions.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/protections",
        "protections.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/recommendations",
        "recommendations.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/attack-groups",
        "attack_groups.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/mode",
        "mode.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/behavioral-ddo",
        "behavioral_ddos.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/bypass-network-lists",
        "bypass_network_lists.json")

    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/cpc",
        "cpc.json")

    # ✅ NEW: Custom Bots
    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/custom-bots",
        "custom_bots.json")

    # ✅ NEW: Bot Manager Settings
    export_module(session, base_url,
        f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/advanced-settings/bot-manager",
        "bot_manager.json")



def export_all_modules(session, base_url, config_id, version, policy_id):
    paths = [
        # Match Targets (global level)
        (f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets", "match_targets.json"),

        # Policy-level modules
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/custom-rules", "custom_rules.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rate-policies", "rate_policies.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/ip-geo-firewall", "ip_geo_firewall.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/reputation-profiles", "reputation_profiles.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/api-endpoints", "api_endpoints.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/slow-post", "slow_post_protection.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rules", "waf_rules.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/urlProtectionActions", "url_protection_actions.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/api-request-constraints", "api_request_constraints.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/malwarePolicyActions", "malware_policy_actions.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/protections", "protections.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/recommendations", "recommendations.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/attack-groups", "attack_groups.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/mode", "mode.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/behavioral-ddo", "behavioral_ddos.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/bypass-network-lists", "bypass_network_lists.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/cpc", "cpc.json"),
    ]

    for url_path, filename in paths:
        export_module(session, base_url, url_path, filename)

def export_all_modules(session, base_url, config_id, version, policy_id):
    paths = [
        # Policy-specific modules
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/custom-rules", "custom_rules.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rate-policies", "rate_limit_policies.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/ip-geo-firewall", "ip_geo_firewall.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/reputation-profiles", "reputation_profiles.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/api-endpoints", "api_endpoints.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/slow-post", "slow_post_protection.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rules", "waf_rules.json"),

        
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/reputation-profiles")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rate-policies")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/urlProtectionActions")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/api-request-constraints")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/malwarePolicyActions")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/protections")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/recommendations")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/attack-groups")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/mode")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/behavioral-ddo")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/bypass-network-lists")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/cpc")
 (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/behavioral-ddo")


        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rate-policies")


        # Global config-level (non-policy) module
        (f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets", "match_targets.json"),
    ]

    for url_path, filename in paths:
        export_module(session, base_url, url_path, filename)


def export_module(session, base_url, url_path, filename):
    full_url = urljoin(base_url, url_path)
    print(f"[INFO] Fetching {filename} from {full_url}")
    try:
        response = session.get(full_url)
        response.raise_for_status()
        data = response.json()
        out_path = os.path.join(OUTPUT_DIR, filename)
        with open(out_path, "w") as f:
            json.dump(data, f, indent=2)
        print(f"[SUCCESS] Saved {filename}")
    except requests.HTTPError as e:
        if e.response.status_code == 404:
            print(f"[WARN] Skipping {filename}: {e}")
        else:
            print(f"[ERROR] Failed to fetch {filename}: {e}")
    except Exception as e:
        print(f"[ERROR] Unexpected error in {filename}: {e}")

def export_all_modules(session, base_url, config_id, version, policy_id):
    paths = [
        (f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets", "match_targets.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/client-list-overrides", "client_list_overrides.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/custom-rules", "custom_rules.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/reputation-profiles", "reputation_profiles.json"),
        (f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/slow-post", "slow_post_protection.json"),
        (f"/appsec/v1/configs/{…








try:
    export_module(session, base_url, config_id, version, policy_id, "client-list-overrides.json", f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/client-list-overrides")
except requests.HTTPError as e:
    print(f"[WARN] Skipping client-list-overrides: {e}")
appsec/v1/configs
appsec/v1/configs/configId/versions/versionNumber/security-policies

python export_appsec.py --config-name "My-Security-Config" --policy-prefix "NonP" 

import os
import sys
import yaml
import json
import argparse
import requests
from jinja2 import Environment, FileSystemLoader
from akamai.edgegrid import EdgeGridAuth, EdgeRc

# Setup API session
def setup_session(edgerc_path, section):
    from configparser import ConfigParser
    config = ConfigParser()
    config.read(edgerc_path)

    session = requests.Session()
    session.auth = EdgeGridAuth(
        client_token=config[section]["client_token"],
        client_secret=config[section]["client_secret"],
        access_token=config[section]["access_token"]
    )
    session.headers.update({'Content-Type': 'application/json'})
    base_url = f"https://{config[section]['host']}/"
    return session, base_url

# Get configuration ID from name
def get_config_id(session, base_url, config_name):
    url = urljoin(base_url, "/appsec/v1/configs")
    response = session.get(url)
    response.raise_for_status()
    configs = response.json().get("configurations", [])
    for config in configs:
        if config["name"] == config_name:
            return config["id"]
    raise Exception(f"Config '{config_name}' not found.")

# Get latest version
def get_latest_version(session, base_url, config_id):
    url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions")
    response = session.get(url)
    response.raise_for_status()
    return response.json()["versions"][-1]["version"]

def get_policy_id_by_prefix(session, base_url, config_id, version, prefix):
    url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies")
    response = session.get(url)
    response.raise_for_status()
    policies = response.json()["securityPolicies"]
    for policy in policies:
        if policy["policyName"].startswith(prefix):
            return policy["policyId"]
    raise Exception(f"No policy found with prefix '{prefix}'.")

def export_module(session, base_url, url_path, filename):
    print(f"Fetching {filename}...")
    response = session.get(urljoin(base_url, url_path))
    response.raise_for_status()
    data = response.json()
    with open(os.path.join(OUTPUT_DIR, filename), "w") as f:
        json.dump(data, f, indent=2)
    print(f"Saved {filename}")

def export_all_modules(session, base_url, config_id, version, policy_id):
    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets",
                  "match_targets.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/client-list-overrides",
                  "client_list_overrides.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/custom-rules",
                  "custom_rules.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/reputation-profiles",
                  "reputation_profiles.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/slow-post",
                  "slow_post_protection.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/rate-policies",
                  "rate_limit_policies.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/waf-rules",
                  "waf_rules.json")

    export_module(session, base_url,
                  f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}/advanced-settings/bot-manager",
                  "bot_manager.json")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Export Akamai AppSec configuration by config name and policy prefix.")
    parser.add_argument("--section", default='DEV', required=True, help="Section name from .edgerc")
    parser.add_argument("--config-name", required=True, help="Name of the security configuration to export")
    parser.add_argument("--prefix", default='TEMP', required=True, help="Policy name prefix to match (e.g., NonP or Prod)")
    parser.add_argument("--version", type=int, default=1, help="(Optional) Specific version number to export. Defaults to latest.")
    parser.add_argument("--output-dir", default="export", help="Directory to save exported JSON files")

    args = parser.parse_args()
    
    OUTPUT_DIR = args.output_dir
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    session, base_url = setup_session(args.section)

    try:
        config_id = get_config_id(session, base_url, args.config_name)
        print(f"Found config ID: {config_id}")
    except Exception as e:
        print(f"Failed to get config ID: {e}")
        sys.exit(1)

    try:
        if args.version:
            version = args.version
            print(f"Using provided version: {version}")
        else:
            version = get_latest_version(session, base_url, config_id)
            print(f"Auto-detected latest version: {version}")
    except Exception as e:
        print(f"Failed to determine config version: {e}")
        sys.exit(1)

    try:
        policy_id = get_policy_id_by_prefix(session, base_url, config_id, version, args.prefix)
        print(f"Found policy ID: {policy_id}")
    except Exception as e:
        print(f"Failed to get policy ID: {e}")
        sys.exit(1)

    try:
        export_all_modules(session, base_url, config_id, version, policy_id)
        print("Export completed successfully.")
    except Exception as e:
        print(f"Export failed: {e}")
        sys.exit(1)
