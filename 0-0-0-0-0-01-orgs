def clone_and_rename_client_lists(session, base_url, config_id, version, access_group, section=None):
    print(f"[INFO] Cloning and renaming client lists from Security Policy Template (DEBUG MODE, NO POST)")
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "results": []
    }

    # Step 1: Fetch all client lists
    url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
    try:
        response = session.get(url)
        response.raise_for_status()
        client_lists = response.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    # Step 2: Map of existing SC-<access_group> list names -> DELETE availability
    existing_target_lists = {}
    for cl in client_lists:
        name = cl.get("name", "")
        is_deletable = cl.get("availableActions", {}).get("DELETE", {}).get("available", False)
        if name.startswith(f"SC-{access_group}"):
            existing_target_lists[name] = is_deletable

    # Step 3: Identify which template lists to clone
    for cl in client_lists:
        try:
            name = cl.get("name", "")
            list_id = cl.get("listId")
            list_type = cl.get("listType")
            cl_type = cl.get("type")

            if not name.startswith("Security Policy Template"):
                continue

            suffix = name.replace("Security Policy Template", "").strip()
            new_name = f"SC-{access_group}-{suffix}"

            if new_name in existing_target_lists and not existing_target_lists[new_name]:
                print(f"[DEBUG] Skipping '{new_name}' - already exists and not deletable")
                continue

            print(f"[DRYRUN] Would clone '{name}' -> '{new_name}'")

            summary["processed"] += 1
            summary["successful"] += 1
            summary["results"].append({
                "status": "dryrun",
                "source": name,
                "target": new_name,
                "listId": list_id
            })

        except Exception as e:
            print(f"[ERROR] Failed to evaluate list '{name}': {e}")
            summary["processed"] += 1
            summary["failed"] += 1
            summary["results"].append({
                "status": "failed",
                "source": name,
                "error": str(e)
            })

    return summary
