def reassign_client_lists(session, base_url, config_id, version, old_policy_id, new_policy_id):
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{old_policy_id}/client-lists"
    print(f"[DEBUG] Fetching client lists from TEMP policy: {url}")

    try:
        response = session.get(url)
        response.raise_for_status()
        client_lists = response.json().get("clientLists", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    if not client_lists:
        print("[INFO] No client lists to reassign.")
        return summary

    for cl in client_lists:
        client_list_id = cl.get("id")
        if not client_list_id:
            continue

        summary["processed"] += 1

        update_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{new_policy_id}/client-lists"
        payload = {
            "clientLists": [
                {
                    "id": client_list_id,
                    "action": cl.get("action", "alert")
                }
            ]
        }

        print(f"[DEBUG] Reassigning client list {client_list_id} to new policy at {update_url}")
        print(f"[DEBUG] Payload: {json.dumps(payload, indent=2)}")

        try:
            update_response = session.post(update_url, json=payload)
            update_response.raise_for_status()
            print(f"[INFO] Reassigned client list {client_list_id} to new policy.")
            summary["successful"] += 1
            summary["details"].append({"id": client_list_id, "status": "success"})
        except Exception as e:
            print(f"[ERROR] Failed to reassign client list {client_list_id}: {e}")
            summary["failed"] += 1
            summary["details"].append({"id": client_list_id, "status": "failed", "error": str(e)})

    return summary
