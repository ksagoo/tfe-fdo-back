def clone_and_rename_client_lists(session, base_url, config_id, version, access_group, section):
    target_prefix = f"SC-{access_group}"
    expected_bypass_name = f"{target_prefix} Security Bypass List"
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    print(f"[DEBUG] Looking for existing: {expected_bypass_name}")
    client_list_url = f"{base_url}/client-list/v3/lists?includeItems=true&includeDeprecated=true"
    response = session.get(client_list_url)
    response.raise_for_status()
    all_lists = response.json()

    already_exists = any(cl["name"] == expected_bypass_name for cl in all_lists)

    if already_exists:
        print(f"[INFO] List '{expected_bypass_name}' already exists. Skipping clone.")
        return summary

    print(f"[INFO] '{expected_bypass_name}' not found. Cloning Security Policy Template lists...")

    # Filter only the template lists to clone
    template_lists = [cl for cl in all_lists if "Security Policy Template" in cl.get("name", "")]

    for cl in template_lists:
        original_name = cl.get("name", "")
        suffix = original_name.replace("Security Policy Template", "").strip()
        new_name = f"{target_prefix} {suffix}".strip()

        payload = {
            "name": new_name,
            "type": cl["type"],
            "listType": cl["listType"],
            "contractId": cl["contractId"],
            "groupId": cl["groupId"],
            "description": f"Cloned from {original_name}",
            "items": cl.get("items", [])
        }

        summary["processed"] += 1
        try:
            clone_url = f"{base_url}/client-list/v3/lists"
            res = session.post(clone_url, json=payload)
            res.raise_for_status()
            new_id = res.json().get("id")
            print(f"[SUCCESS] Cloned '{original_name}' -> '{new_name}' (ID: {new_id})")
            summary["successful"] += 1
            summary["details"].append({
                "id": new_id,
                "name": new_name,
                "status": "success"
            })
        except Exception as e:
            print(f"[ERROR] Failed to clone '{original_name}' as '{new_name}' -> {e}")
            summary["failed"] += 1
            summary["details"].append({
                "id": None,
                "name": new_name,
                "status": "failed",
                "error": str(e)
            })

    return summary
