config_id = None
version = None

try:
    config_id, version = get_config_id(session, base_url, config_name)
    print(f"[INFO] Found existing config: {config_name} (ID: {config_id})")
    print(f"[INFO] Using existing policy IDs from metadata: {prod_policy_id}, {nonprod_policy_id}")
except ValueError:
    print(f"[INFO] Configuration '{config_name}' not found. Attempting to create it...")

    try:
        config_id, version = create_appsec_config(
            session, base_url, config_name,
            contract_id, group_id, hostnames, description
        )

        if config_id is not None:
            created_policies = create_default_security_policies(
                session, base_url, config_id, version, default_policies
            )

            # Update policy IDs & names from created result
            prod_policy = created_policies.get("prod", {})
            nonprod_policy = created_policies.get("nonprod", {})

            prod_policy_name = prod_policy.get("name")
            prod_policy_id = prod_policy.get("policyId")
            nonprod_policy_name = nonprod_policy.get("name")
            nonprod_policy_id = nonprod_policy.get("policyId")

        else:
            print("[WARNING] Config creation returned no ID. Skipping policy creation.")
    except Exception as e:
        print(f"[ERROR] Could not create configuration: {e}")
        sys.exit(1)

if config_id is not None:
    print(f"[SUCCESS] Config ID: {config_id}, Version: {version}")

    update_config_metadata(
        output_path=args.output_dir,
        config_name=config_name,
        contract_id=contract_id,
        group_id=group_id,
        access_group=args.access_group,
        hostnames=hostnames,
        description=description,
        default_policies={
            "prod": {
                "name": prod_policy_name,
                "prefix": "Prod",
                "policyId": prod_policy_id
            },
            "nonprod": {
                "name": nonprod_policy_name,
                "prefix": "NonP",
                "policyId": nonprod_policy_id
            }
        }
    )
else:
    print(f"[FATAL] Cannot continue without a valid configuration ID.")
    sys.exit(1)
