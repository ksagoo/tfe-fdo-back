def simulate_clone_client_lists(session, base_url, config_id, version, access_group, section):
    print(f"[INFO] Simulating cloning of client lists from Security Policy Template...")
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "skipped_active": [],
        "skipped_existing": [],
        "to_clone": []
    }

    try:
        url = f"{base_url}/client-list/v1/lists?includeDeprecated=true&includeNetworkLists=true"
        resp = session.get(url)
        resp.raise_for_status()
        client_lists = resp.json().get("content", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client lists: {e}")
        return summary

    # Build lookup of all existing client lists
    existing_lists_by_name = {}
    for cl in client_lists:
        name = cl.get("name", "")
        existing_lists_by_name.setdefault(name, []).append(cl)

    # Process only Security Policy Template lists
    for cl in client_lists:
        name = cl.get("name", "")
        if not name.startswith("Security Policy Template"):
            continue

        suffix = name.replace("Security Policy Template", "").strip()
        new_name = f"SC-{access_group}-{suffix}"

        # Look up existing lists matching target name
        matching_targets = existing_lists_by_name.get(new_name, [])
        still_in_use = any(not t.get("availableActions", {}).get("DELETE", {}).get("available", False)
                           for t in matching_targets)

        if still_in_use:
            print(f"[DEBUG] Target list '{new_name}' already exists and is in use, skipping.")
            summary["skipped_existing"].append(new_name)
            continue

        print(f"[INFO] Would clone: '{name}' => '{new_name}'")
        summary["to_clone"].append({
            "source": name,
            "target": new_name,
            "cloneFromList": cl.get("listId")
        })
        summary["processed"] += 1

    print("\n[DEBUG] Clone Summary:")
    print(json.dumps(summary, indent=2))
    return summary
