def build_cloned_list_id_map(session, base_url, access_group_prefix):
    url = f"{base_url}/client-list/v1/lists"
    response = session.get(url)
    response.raise_for_status()

    lists = response.json().get("listItems", [])
    id_map = {}

    name_to_id = {lst["name"]: lst["uniqueId"] for lst in lists if "name" in lst and "uniqueId" in lst}

    print("\n[DEBUG] All client list names found:")
    for name in name_to_id:
        print(f" - {name}")

    for template_name, template_id in name_to_id.items():
        if template_name.startswith("Security Policy Template"):
            suffix = template_name.replace("Security Policy Template", "").strip()
            expected_clone = f"SC-{access_group_prefix} {suffix}"

            print(f"[DEBUG] Template: '{template_name}'")
            print(f"[DEBUG] Expecting clone name: '{expected_clone}'")

            matched = False
            for clone_name, clone_id in name_to_id.items():
                print(f"  ⮑ Checking against clone: '{clone_name}'")
                if clone_name.strip().lower() == expected_clone.strip().lower():
                    id_map[template_id] = clone_id
                    print(f"[MATCHED] '{template_name}' → '{clone_name}'")
                    matched = True
                    break
            if not matched:
                print(f"[MISS] No match for template '{template_name}'")

    if not id_map:
        print("[WARN] No matches found from templates to cloned client list names.")
    return id_map
