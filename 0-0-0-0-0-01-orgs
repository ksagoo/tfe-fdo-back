payload = {
    "action": "ACTIVATE",
    "activationConfigs": [{
        "configId": config_id,
        "configVersion": config_version
    }],
    "network": network.upper(),
    "note": note,
    "notificationEmails": emails
}

if hostname_coverage:
    payload["hostnameCoverage"] = hostname_coverage
[23:26, 08/06/2025] Kuldeep: def resolve_hostname_coverage(session, base_url, hostname, policy_id, previous_config_id):
    return [{
        "hostname": hostname,
        "policyId": policy_id,
        "previousConfigId": previous_config_id
    }]

hostname = "psos-dev-01.hsbc.com.hk"
previous_config_id = 112470
hostname_coverage = resolve_hostname_coverage(session, base_url, hostname, policy_id, previous_config_id)

activate_security_configuration(
    session, base_url,
    config_id=config_id,
    config_version=config_version,
    network="STAGING",
    note="Activating with hostname move",
    emails=["you@example.com"],
    hostname_coverage=hostname_coverage
)



def activate_security_configuration(session, base_url, config_id, config_version, network, note, emails, hostname_coverage=None):
    from urllib.parse import urljoin

    activation_url = urljoin(base_url, "/appsec/v1/activations")

    payload = {
        "action": "ACTIVATE",
        "activationConfigs": [{
            "configId": config_id,
            "configVersion": config_version
        }],
        "network": network.upper(),
        "note": note,
        "notificationEmails": emails
    }

    if hostname_coverage:
        payload["hostnameCoverage"] = hostname_coverage

    headers = {
        "accept": "application/json",
        "content-type": "application/json"
    }

    response = session.post(activation_url, json=payload, headers=headers)

    if response.status_code == 200:
        print(" Message: Security configuration activation initiated successfully.")
        return response.json().get("activationId")
    else:
        print(f" Error: Failed to activate configuration. Status Code: {response.status_code}")
        print(response.text)
        return None
\n
def resolve_hostname_coverage(session, base_url, hostname, policy_id, previous_config_id):
    return [{
        "hostname": hostname,
        "policyId": policy_id,
        "previousConfigId": previous_config_id
    }]
