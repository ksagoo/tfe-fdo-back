#!/usr/bin/env python3
"""
akamai_appsec_onboarding.py

Author: Kuldeep Sagoo
Description:
    This script streamlines onboarding of new Akamai AppSec configurations
    by cloning a predefined security configuration template and renaming
    the default policy based on the access group and environment.

Usage:
    python akamai_appsec_onboarding.py --section dev --access_group HSBC-UK --fqdn www.hsbc.co.uk --fqdn www.hsbc.com --isProd --dry-run

Dependencies:
    - Akamai EdgeGrid authentication (.edgerc required)
    - Requests library

"""

import json
import sys
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth
from urllib.parse import urljoin

# ------------------------------
# Internal Settings Map by Account Section
# ------------------------------
REGION_SETTINGS = {
    "Global":  {"parent_group_name": "HSBC-DDos-KSD-D-2YN4YRH", "contract_id": "P-2YN4YRH", "group_id": "154041", "config_id": "template_config_id_global", "policy_id": "template_policy_id_global"},
    "APAC":    {"parent_group_name": "HSBC - APAC-V-5A82LRN",   "contract_id": "V-5A82LRN", "group_id": "272084", "config_id": "template_config_id_apac", "policy_id": "template_policy_id_apac"},
    "EMEA":    {"parent_group_name": "HSBC - EMEA-V-5A82MHB",   "contract_id": "V-5A82MHB", "group_id": "272093", "config_id": "template_config_id_emea", "policy_id": "template_policy_id_emea"},
    "LATAM":   {"parent_group_name": "HSBC-AMER -LATAM(V-5A854K9)",  "contract_id": "V-5A854K9", "group_id": "272094", "config_id": "template_config_id_latam", "policy_id": "template_policy_id_latam"},
    "AMER":    {"parent_group_name": "HSBC-AMER -LATAM(V-5A854K9)",  "contract_id": "V-5A854K9", "group_id": "272094", "config_id": "template_config_id_amer", "policy_id": "template_policy_id_amer"},
    "DEV":     {"parent_group_name": "HSBC - DEV (V-5A82MTA)",    "contract_id": "V-5A82MTA", "group_id": "272095", "config_id": "template_config_id_dev", "policy_id": "template_policy_id_dev"}
}

# ------------------------------
# Setup Session from .edgerc
# ------------------------------
def setup_session(section):
    import os
    from akamai.edgegrid import EdgeGridAuth
    from configparser import ConfigParser

    edgerc_path = os.path.expanduser("~/.edgerc")
    config = ConfigParser()
    config.read(edgerc_path)

    if section not in config:
        raise Exception(f"[ERROR] Section '{section}' not found in .edgerc")

    s = requests.Session()
    s.auth = EdgeGridAuth(
        client_token=config[section]['client_token'],
        client_secret=config[section]['client_secret'],
        access_token=config[section]['access_token']
    )
    s.headers.update({"Content-Type": "application/json"})
    s.host = config[section]['host']
    return s

# ------------------------------
# CLI Argument Parsing
# ------------------------------
def parse_arguments():
    parser = argparse.ArgumentParser(description="Onboard new AppSec config from template")
    parser.add_argument("--section", required=True, help="Account section name from .edgerc")
    parser.add_argument("--access_group", required=True, help="Access group name (e.g., HSBC-UK)")
    parser.add_argument("--fqdn", action="append", required=True, help="FQDNs to onboard (use multiple --fqdn)")
    parser.add_argument("--isProd", action="store_true", help="Flag to indicate Production environment")
    parser.add_argument("--dry-run", action="store_true", help="Only show what would be created")
    parser.add_argument("--template_version", type=int, default=1, help="Version of the template config to clone (default=1)")
    return parser.parse_args()

# ------------------------------
# Utility: Check if config exists
# ------------------------------
def config_exists(session, base_url, config_name):
    url = urljoin(base_url, "/appsec/v1/configs")
    resp = session.get(url)
    if resp.status_code != 200:
        raise Exception(f"Failed to list configs: {resp.status_code} {resp.text}")
    configs = resp.json().get("configurations", [])
    return any(c["name"] == config_name for c in configs)

# ------------------------------
# Clone Config from Template
# ------------------------------
def clone_config(session, base_url, template_config_id, version, hostnames, group_id):
    url = urljoin(base_url, "/appsec/v1/configs")
    payload = {
        "createFrom": {
            "configId": template_config_id,
            "version": version
        },
        "hostnames": hostnames,
        "groupId": int(group_id)
    }
    resp = session.post(url, json=payload)
    if resp.status_code != 201:
        raise Exception(f"Failed to clone config: {resp.status_code} {resp.text}")
    return resp.json().get("configId")

# ------------------------------
# Get Default Policy ID
# ------------------------------
def get_default_policy_id(session, base_url, config_id, version):
    url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies")
    resp = session.get(url)
    if resp.status_code != 200:
        raise Exception(f"Failed to list policies: {resp.status_code} {resp.text}")
    policies = resp.json().get("policies", [])
    if not policies:
        raise Exception("No default policy found in newly created config")
    return policies[0].get("policyId")

# ------------------------------
# Rename Policy
# ------------------------------
def rename_policy(session, base_url, config_id, version, policy_id, new_name, new_prefix):
    url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{policy_id}")
    payload = {
        "policyName": new_name,
        "policyPrefix": new_prefix,
        "defaultSettings": True,
        "createFromSecurityPolicy": None
    }
    resp = session.put(url, json=payload)
    if resp.status_code != 200:
        raise Exception(f"Failed to rename policy: {resp.status_code} {resp.text}")
    return True

# ------------------------------
# Main Logic
# ------------------------------
def main():
    args = parse_arguments()
    session = setup_session(args.section)
    base_url = f"https://{session.host}"

    try:
        settings = REGION_SETTINGS.get(args.section)
        if not settings:
            raise ValueError(f"No REGION_SETTINGS found for section '{args.section}'")

        config_name = f"Security Config - {args.access_group}"
        policy_name = f"PL-{args.access_group}-{'Prod' if args.isProd else 'NonProd'}"
        policy_prefix = "Prod" if args.isProd else "NonP"
        hostnames = args.fqdn
        group_id = settings["group_id"]
        contract_id = settings["contract_id"]
        template_config_id = settings["config_id"]
        template_policy_id = settings["policy_id"]

        if args.dry_run:
            print("========== Dry Run ==========")
            print(f"Account Section:     {args.section}")
            print(f"Access Group:        {args.access_group}")
            print(f"Hostnames:           {hostnames}")
            print(f"Group ID:            {group_id}")
            print(f"Contract ID:         {contract_id}")
            print(f"Config Name:         {config_name}")
            print(f"Template Config ID:  {template_config_id}")
            print(f"Policy Name:         {policy_name}")
            print(f"Policy Prefix:       {policy_prefix}")
            exists = config_exists(session, base_url, config_name)
            if exists:
                print(f"[ABORT] Config '{config_name}' already exists.")
            else:
                print(f"[OK] Config '{config_name}' does not exist. It will be created.")
            return

        print(f"[INFO] Cloning security config from ID {template_config_id}...")
        config_id = clone_config(
            session,
            base_url,
            template_config_id,
            args.template_version,
            hostnames,
            group_id
        )
        print(f"[SUCCESS] Created config with ID: {config_id}")

        version = 1
        print("[INFO] Renaming default policy...")
        default_policy_id = get_default_policy_id(session, base_url, config_id, version)
        rename_policy(session, base_url, config_id, version, default_policy_id, policy_name, policy_prefix)
        print(f"[SUCCESS] Policy renamed to: {policy_name} with prefix: {policy_prefix}")

    except Exception as e:
        print(f"[ERROR] {str(e)}")
        sys.exit(1)

# ------------------------------
# Entrypoint
# ------------------------------
if _name_ == "_main_":
    main()
