def reassign_client_lists(session, base_url, config_id, version, temp_policy_id, new_policy_id):
    summary = {
        "processed": 0,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    get_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{temp_policy_id}/client-list-activations"
    print(f"[DEBUG] Fetching client list activations from TEMP policy: {get_url}")

    try:
        response = session.get(get_url)
        response.raise_for_status()
        client_lists = response.json().get("clientLists", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch client list activations: {e}")
        return summary

    if not client_lists:
        print("[INFO] No client list activations to reassign.")
        return summary

    for cl in client_lists:
        object_id = cl.get("id")
        if not object_id:
            continue

        summary["processed"] += 1
        update_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{new_policy_id}/client-list-activations/{object_id}"
        payload = {
            "policyId": new_policy_id,
            "action": cl.get("action", "alert")
        }

        print(f"[DEBUG] Reassigning client list {object_id} to new policy at {update_url}")
        print(f"[DEBUG] Payload: {json.dumps(payload, indent=2)}")

        try:
            update_response = session.put(update_url, json=payload)
            update_response.raise_for_status()
            summary["successful"] += 1
            summary["details"].append({
                "id": object_id,
                "status": "success"
            })
        except Exception as e:
            summary["failed"] += 1
            summary["details"].append({
                "id": object_id,
                "status": "failed",
                "error": str(e)
            })
            print(f"[ERROR] Failed to reassign client list {object_id}: {e}")

    return summary
