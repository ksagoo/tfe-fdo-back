"""
===================================================================================
                                Akamai Access Country/Service Name Script
===================================================================================
Script Name:
    Akamai Access Country/Service Name Script

Description:
    This script lists all country/service name groups under each regional group 
    for a specified top-level group in the Akamai platform. It uses --env to set 
    the default parent_group_id based on whether it's running in DEV or PROD environment, 
    or it can resolve a parent group dynamically using the provided --parent_group_name. 
    The script only processes top-level groups that contain the specified --group_prefix.

Parameters:
    --env               : The environment (DEV or PROD). Default is DEV.
    --parent_group_name : The name of the parent group. Provide either this or --parent_group_id.
    --parent_group_id   : The numeric ID of the parent group. Provide either this or --parent_group_name.
    --group_prefix      : The prefix for filtering top-level groups. Default is 'HSBC-DDoS-KSD'.
    --output_format     : The format for output, either 'list' (default) or 'json'.
    --output_type       : Output to 'stdout' (default) or 'file'.
    --operation         : The operation mode, either 'list' (default) or 'check'.
    --lob               : The Line of Business (LOB) name, required for 'check' operation.
    --regions           : The regions to check, required for 'check' operation. Default is all 5 regions.
    --country_servicename: The country/service name, required for 'check' operation.
    --levels            : Levels to create (1, 2, or 3), used in 'list' operation. Default is 3.
    --mode              : Mode of listing, either 'frontdoor' (default) or 'akamai'. Used with 'list' operation.
    --edgerc_file       : Path to the .edgerc file. Default is '~/.edgerc'.
    --section_name      : Section name in the .edgerc file. Default is 'default'.

Usage:
    - To list country/service name groups in the DEV environment with the default parent group ID:
        python script.py --env=DEV

    - To check for a specific LOB, region, and country/service name:
        python script.py --operation=check --lob="TEST06" --country_servicename="AkamaiDevOps"

    - To list country/service name groups in Akamai format:
        python script.py --operation=list --mode=akamai --output_format=json
===================================================================================
"""

import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to set up the session using the .edgerc file for authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Helper function to perform case-insensitive matching
def check_case_insensitive_match(value_to_check, values_list):
    return next((item for item in values_list if item.lower().strip() == value_to_check.lower().strip()), None)

# Function to find the parent group by name or ID
def find_group_by_name_or_id(groups, parent_group_name=None, parent_group_id=None):
    for group in groups:
        if (parent_group_name and check_case_insensitive_match(parent_group_name, [group.get("groupName")])) or (parent_group_id and group.get("groupId") == parent_group_id):
            return group
    return None

# Function to check if a subgroup exists
def check_group_exists(session, base_url, group_prefix, lob, region, country_servicename, parent_group_name=None, parent_group_id=None):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()

            parent_group = find_group_by_name_or_id(groups, parent_group_name, parent_group_id)

            if parent_group:
                for top_level_group in parent_group.get("subGroups", []):
                    top_level_group_name = check_case_insensitive_match(lob, [top_level_group.get("groupName").replace(group_prefix + "-", "")])
                    if top_level_group_name:
                        for region_group in top_level_group.get("subGroups", []):
                            region_name = region_group.get("groupName").replace(group_prefix + "-" + top_level_group_name + "-", "")
                            if check_case_insensitive_match(region, [region_name]):
                                for service_group in region_group.get("subGroups", []):
                                    service_name = service_group.get("groupName").replace(region_group.get("groupName") + "-", "")
                                    if check_case_insensitive_match(country_servicename, [service_name]):
                                        return True, f"{service_group.get('groupName')} (ID: {service_group.get('groupId')})"
                return False, None
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
            return None, None
    except Exception as e:
        print(f"Error fetching group information: {e}")
        return None, None

# Function to list country/service groups under regional groups, filtered by group_prefix
def list_country_service_groups(session, base_url, group_prefix, parent_group_name=None, parent_group_id=None, levels=3, mode="frontdoor"):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()

            parent_group = find_group_by_name_or_id(groups, parent_group_name, parent_group_id)

            if parent_group:
                print(f"Parent Group: {parent_group.get('groupName')}")
                print(f"Group Prefix: {group_prefix}\n")

                country_service_output = {}
                found_groups = False
                for top_level_group in parent_group.get("subGroups", []):
                    # Case-insensitive group_prefix check
                    if check_case_insensitive_match(group_prefix, [top_level_group["groupName"][:len(group_prefix)]]):
                        found_groups = True
                        lob_name = top_level_group.get("groupName").replace(group_prefix + "-", "")
                        country_service_output[lob_name] = {}

                        if levels >= 2:
                            for region_group in top_level_group.get("subGroups", []):
                                region_name = region_group.get("groupName").replace(group_prefix + "-" + lob_name + "-", "")
                                country_service_output[lob_name][region_name] = []

                                if levels == 3:
                                    for service_group in region_group.get("subGroups", []):
                                        country_service_name = service_group.get("groupName").replace(region_group.get("groupName") + "-", "")
                                        if mode == "akamai":
                                            country_service_output[lob_name][region_name].append(f"{group_prefix}-{lob_name}-{region_name}-{country_service_name}")
                                        else:
                                            country_service_output[lob_name][region_name].append(country_service_name)

                if not found_groups:
                    print(f"No match found for group prefix '{group_prefix}' under the parent group '{parent_group.get('groupName')}'.")
                return country_service_output
            else:
                print(f"No match found for parent group '{parent_group_name}' with ID '{parent_group_id}'.")
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"Error fetching group information: {e}")

# Main function that handles argument parsing and logic flow
def main():
    parser = argparse.ArgumentParser(description="List or check country/service name groups under regional groups.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--group_prefix", default="HSBC-DDoS-KSD", help="The prefix for filtering top-level groups. Default is 'HSBC-DDoS-KSD'.")
    parser.add_argument("--output_format", choices=["list", "json"], default="list", help="The format for output, either 'list' (default) or 'json'.")
    parser.add_argument("--output_type", choices=["stdout", "file"], default="stdout", help="Output to 'stdout' (default) or 'file'.")
    parser.add_argument("--operation", choices=["list", "check"], default="list", help="The operation mode, either 'list' or 'check'.")
    parser.add_argument("--lob", help="The Line of Business (LOB) name, required for 'check' operation.")
    parser.add_argument("--regions", nargs='+', choices=["APAC", "EMEA", "AMER", "Global", "LATAM"], default=["APAC", "EMEA", "AMER", "Global", "LATAM"], help="The regions to check.")
    parser.add_argument("--country_servicename", help="The country/service name, required for 'check' operation.")
    parser.add_argument("--levels", type=int, choices=[1, 2, 3], default=3, help="Levels to list (1, 2, or 3). Default is 3.")
    parser.add_argument("--mode", choices=["frontdoor", "akamai"], default="frontdoor", help="The mode for listing (frontdoor or akamai). Default is frontdoor.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)

    # Set the default parent_group_id based on the environment
    if args.env == "DEV":
        default_parent_group_id = 185773
    else:  # PROD
        default_parent_group_id = 1234567

    # Determine the parent group ID to use
    if args.parent_group_id:
        resolved_parent_group_id = args.parent_group_id
    elif args.parent_group_name:
        resolved_parent_group_id = None
    else:
        resolved_parent_group_id = default_parent_group_id

    if args.operation == "list":
        country_service_output = list_country_service_groups(session, base_url, args.group_prefix, args.parent_group_name, resolved_parent_group_id, args.levels, args.mode)

        if country_service_output:
            if args.output_format == "list":
                output = ""
                for lob, regions in country_service_output.items():
                    if args.mode == "akamai":
                        lob_output = f"{args.group_prefix}-{lob}"
                    else:
                        lob_output = lob
                    output += f"{lob_output}\n"
                    if args.levels >= 2:
                        for region, services in regions.items():
                            if args.mode == "akamai":
                                region_output = f"{args.group_prefix}-{lob}-{region}"
                            else:
                                region_output = region
                            output += f"  - {region_output}\n"
                            if args.levels == 3:
                                for service in services:
                                    output += f"    - {service}\n"
                if args.output_type == "stdout":
                    print(output)
                else:
                    file_name = "country_service_list.txt"
                    with open(file_name, "w") as f:
                        f.write(output)
                    print(f"File created: {file_name}")
            elif args.output_format == "json":
                if args.mode == "akamai":
        # In 'akamai' mode, modify the output for JSON formatting
        output_json = {}
        for lob, regions in country_service_output.items():
            lob_output = f"{args.group_prefix}-{lob}"
            output_json[lob_output] = {}
            for region, services in regions.items():
                region_output = f"{args.group_prefix}-{lob}-{region}"
                output_json[lob_output][region_output] = []
                for service in services:
                    service_output = f"{region_output}-{service}"  # Corrected to prevent duplication of group_prefix
                    output_json[lob_output][region_output].append(service_output)
    else:
        output_json = country_service_output

    if args.output_type == "stdout":
        print(json.dumps(output_json, indent=4))
    else:
        file_name = "country_service_list.json"
        with open(file_name, "w") as f:
            json.dump(output_json, f, indent=4)
        print(f"File created: {file_name}")

    elif args.operation == "check":
        if not args.lob or not args.country_servicename:
            print("Error: --lob and --country_servicename are required for 'check' operation.")
            return

        # Trim entered values for lob and country_servicename
        lob_trimmed = args.lob.strip()
        country_servicename_trimmed = args.country_servicename.strip()

        for region in args.regions:
            exists, group_info = check_group_exists(session, base_url, args.group_prefix, lob_trimmed, region, country_servicename_trimmed, args.parent_group_name, resolved_parent_group_id)
            if exists:
                print(f"True: Subgroup already exists - {group_info}")
            else:
                print(f"False: Subgroup {args.group_prefix}-{lob_trimmed}-{region}-{country_servicename_trimmed} does not exist.")

if __name__ == "__main__":
    main()
