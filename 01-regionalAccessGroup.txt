#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
===================================================================================
                                Akamai Access Group Management Script
===================================================================================
Script Name:
    Akamai Access Group Management Script

Description:
    This script manages the creation of Akamai access groups. It checks if a group 
    exists under a specified parent group and creates it if it does not exist.

Parameters:
    group_name (required)      : The name of the group to create.
    --parent_group_name        : The name of the parent group. Provide either this or --parent_group_id.
    --parent_group_id          : The numeric ID of the parent group. Provide either this or --parent_group_name.
    --env                      : The environment (DEV or PROD). Default is DEV.
    --regions                  : The regions for group creation (APAC, EMEA, AMER, Global, LATAM).
    --edgerc_file              : Path to the .edgerc file. Default is '~/.edgerc'.
    --section_name             : Section name in the .edgerc file. Default is 'default'.

Usage:
    - To create a group in the DEV environment with a default parent group ID:
        python script.py "NewGroupName" --env=DEV

    - To create a group in the PROD environment using a specific region:
        python script.py "NewGroupName" --env=PROD --regions APAC

    - To create a group using a parent group name in the PROD environment:
        python script.py "NewGroupName" --env=PROD --regions EMEA

===================================================================================
"""

import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Region settings for PROD
REGION_SETTINGS = {
    "Global": {"parent_group_name": "HSBC-DDos-KSD-P-2YNY4RH"},
    "APAC": {"parent_group_name": "HSBC - APAC-V-5A82LRN"},
    "EMEA": {"parent_group_name": "HSBC - EMEA-V-5A82MHB"},
    "LATAM": {"parent_group_name": "HSBC-AMER -LATAM(V-5A854K9)"},
    "AMER": {"parent_group_name": "HSBC-AMER -LATAM(V-5A854K9)"},
}

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Recursive function to find the group by name or ID anywhere in the hierarchy
def find_group_by_name_or_id(groups, parent_group_name=None, parent_group_id=None):
    for group in groups:
        if (parent_group_name and group.get("groupName") == parent_group_name) or (parent_group_id and group.get("groupId") == parent_group_id):
            return group
        if group.get("subGroups"):
            found_group = find_group_by_name_or_id(group.get("subGroups"), parent_group_name, parent_group_id)
            if found_group:
                return found_group
    return None

# Function to check if a group exists directly under the found parent group
def check_group_exists_under_parent(parent_group, group_name):
    for subgroup in parent_group.get("subGroups", []):
        if subgroup.get("groupName") == group_name:
            return True, subgroup.get('groupId')
    return False, None

# Function to create a new group and output the groupId of the created group
def create_group(session, base_url, group_name, parent_group_id):
    try:
        url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{parent_group_id}")
        headers = {
            "accept": "application/json",
            "content-type": "application/json"
        }
        payload = {
            "groupName": group_name
        }

        response = session.post(url, json=payload, headers=headers)

        if response.status_code == 201:
            created_group = response.json()
            print(f"Group '{group_name}' created successfully with groupId: {created_group.get('groupId')}")
        elif response.status_code == 409:
            print(f"Group '{group_name}' already exists.")
        else:
            print(f"Failed to create group: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"Error during group creation: {e}")

# Main logic
def main():
    parser = argparse.ArgumentParser(description="Create an Akamai Access Group if it doesn't already exist.")
    parser.add_argument("group_name", help="The name of the group to create.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--regions", choices=list(REGION_SETTINGS.keys()), help="The region for group creation.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    # Trim input values
    group_name = args.group_name.strip()
    parent_group_name = args.parent_group_name.strip() if args.parent_group_name else None

    # Determine parent group name and section for PROD
    if args.env == "PROD" and args.regions:
        region_config = REGION_SETTINGS.get(args.regions)
        if not region_config:
            print(f"Error: Region '{args.regions}' is not valid.")
            exit(1)
        parent_group_name = parent_group_name or region_config["parent_group_name"]
        args.section_name = args.regions  # Override section name to match region

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)

    # Check if the group already exists
    group_exists, existing_group_id, resolved_parent_group_id = check_group_exists_under_parent(
        session, base_url, group_name, parent_group_name
    )

    if group_exists:
        print(f"Group '{group_name}' already exists under parent group '{parent_group_name}'. No action needed.")
    else:
        print(f"Creating group '{group_name}' under parent group '{parent_group_name}'.")
        create_group(session, base_url, group_name, resolved_parent_group_id)

if __name__ == "__main__":
    main()
