def wait_for_activation(session, base_url, list_id, timeout=600, interval=20):
    url = f"{base_url}/client-list/v1/lists/{list_id}/environments/STAGING/status"
    headers = {"accept": "application/json"}

    start = time.time()
    while time.time() - start < timeout:
        response = session.get(url, headers=headers)
        if response.status_code == 200:
            status = response.json().get("activationStatus", "")
            print(f"[WAIT] List {list_id} activation status: {status}")
            if status == "ACTIVE":
                print(f"[SUCCESS] List {list_id} is now ACTIVE.")
                return True
        else:
            print(f"[ERROR] Failed to get status for list {list_id}: {response.text}")
        
        time.sleep(interval)

    print(f"[TIMEOUT] Activation did not complete within {timeout} seconds for list {list_id}.")
    return False

def activate_client_list(session, base_url, list_id, network="STAGING", comments=None, email=None):
    url = f"{base_url}/client-list/v1/lists/{list_id}/environments/{network}/activate"
    payload = {
        "action": "ACTIVATE",
        "network": network
    }
    if comments:
        payload["comments"] = comments
    if email:
        payload["notificationRecipients"] = [email]

    try:
        resp = session.post(url, json=payload)
        resp.raise_for_status()
        print(f"[INFO] Activation requested for list {list_id} in {network}")
        return True
    except Exception as e:
        print(f"[ERROR] Activation failed for list {list_id}: {e}")
        return False
