import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to set up the session with EdgeRc for Akamai API authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')
        
        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )
        
        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Function to check if a group exists under the specified parent group
def get_top_level_groups(session, base_url, group_prefix, parent_group_name=None, parent_group_id=None):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()
            top_level_groups = []
            for group in groups:
                if group.get('parentGroupId') == parent_group_id and group.get('groupName', '').startswith(group_prefix):
                    top_level_groups.append(group.get('groupName'))

            return top_level_groups
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
            return []
    except Exception as e:
        print(f"Error during group retrieval: {e}")
        return []

# Function to extract LOB from group name
def extract_lob(group_name, group_prefix):
    return group_name.replace(f"{group_prefix}-", "")

# Main logic
def main():
    parser = argparse.ArgumentParser(description="List top-level groups under a parent group filtered by group prefix.")
    parser.add_argument("--group_prefix", default="HSBC-DDoS-KSD", help="The prefix for the group name. Default is 'HSBC-DDoS-KSD'.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")
    
    args = parser.parse_args()

    # Set the default parent group ID based on the environment
    if args.env == "DEV":
        default_parent_group_id = 185773
    else:
        default_parent_group_id = 1234567

    # Resolve parent group ID
    if args.parent_group_id:
        resolved_parent_group_id = args.parent_group_id
    else:
        resolved_parent_group_id = default_parent_group_id
    
    # Set up session with Akamai API
    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)
    
    # Get the list of top-level groups
    top_level_groups = get_top_level_groups(session, base_url, args.group_prefix, args.parent_group_name, resolved_parent_group_id)

    # Extract LOB portions from group names
    lob_list = [extract_lob(group_name, args.group_prefix) for group_name in top_level_groups]
    
    # Output the result
    print("Top-level LOB portions:")
    for lob in lob_list:
        print(lob)

if __name__ == "__main__":
    main()
