def ensure_subgroups(session, base_url, group_prefix, top_level_group_id, lob, regions, country_servicename, level):
    for region in regions:
        region_group_name = f"{group_prefix}-{lob}-{region.upper()}"
        region_group_exists, region_group_id, parent_group, region_group = check_group_exists(session, base_url, region_group_name, None, top_level_group_id)
        
        if region_group_exists:
            print(f"Region group '{region_group_name}' already exists with groupId: {region_group_id}")
        elif not region_group_exists and level >= 2:
            region_group_id = create_group(session, base_url, region_group_name, top_level_group_id)
            if region_group_id:
                print(f"Region group '{region_group_name}' created with groupId: {region_group_id}")

        if region_group_id and level >= 3:
            service_group_name = f"{region_group_name}-{country_servicename}"
            service_group_exists, service_group_id, _, service_group = check_group_exists(session, base_url, service_group_name, None, region_group_id)
            if service_group_exists:
                print(f"Service/Country group '{service_group_name}' already exists with groupId: {service_group_id}")
            elif not service_group_exists:
                service_group_id = create_group(session, base_url, service_group_name, region_group_id)
                if service_group_id:
                    print(f"Service/Country group '{service_group_name}' created with groupId: {service_group_id}")

            if service_group_id and level == 4:
                subgroups_to_create = [f"{service_group_name}-NonProd", f"{service_group_name}-Prod"]
                existing_subgroups = {subgroup['groupName']: subgroup['groupId'] for subgroup in service_group.get("subGroups", [])}

                for subgroup_name in subgroups_to_create:
                    if subgroup_name in existing_subgroups:
                        print(f"Subgroup '{subgroup_name}' already exists with groupId: {existing_subgroups[subgroup_name]}")
                    else:
                        created_subgroup_id = create_group(session, base_url, subgroup_name, service_group_id)
                        if created_subgroup_id:
                            print(f"Subgroup '{subgroup_name}' created successfully with groupId: {created_subgroup_id}")
