#!/usr/bin/env python3
import sys, random, io

def _capture_stdout(fn):
    buf = io.StringIO()
    old = sys.stdout
    try:
        sys.stdout = buf
        fn()
    finally:
        sys.stdout = old
    return buf.getvalue()

def _print_header(title):
    print("\n" + "=" * 70)
    print(title)
    print("=" * 70)

def _safe_exec(code_str):
    ns = {}
    exec(code_str, ns, ns)
    fn = ns.get("main", lambda: None)
    if not callable(fn):
        fn = lambda: None
    return fn

EXERCISES = {
    1: {
        "title": "Exercise 1",
        "buggy": "def main():\n    print('Hello,  Ada')\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def greet(name):\n        print('Hello,', name)\n    greet('Ada')\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def greet(name):\n        print('Hello,  ' + name)\n    greet('Ada')\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def say_hello(name):\n        print('Hello,', name)\n    \n"},
        ],
        "kind": "equals", "expected": "Hello, Ada\n"
    },
    2: {
        "title": "Exercise 2",
        "buggy": "def main():\n    def add_numbers(a, b):\n        return a + c\n    print(add_numbers(2, 3))\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def add_numbers(a, b):\n        return a + b\n    print(add_numbers(2, 3))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    c = 0\n    def add_numbers(a, b):\n        return a + c\n    print(add_numbers(2, 3))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def add_numbers(a, b):\n        return a\n    print(add_numbers(2, 3))\n"},
        ],
        "kind": "equals", "expected": "5\n"
    },
    3: {
        "title": "Exercise 3",
        "buggy": "def main():\n    age = '25'\n    print(age + 5)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def add_five(age):\n        return int(age) + 5\n    print(add_five('25'))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def add_five(age):\n        return age + '5'\n    print(add_five('25'))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def add_five(age):\n        return age + 5\n    print(add_five('25'))\n"},
        ],
        "kind": "equals", "expected": "30\n"
    },
    4: {
        "title": "Exercise 4",
        "buggy": "def main():\n    def is_even(n):\n        return n % 2 == 1\n    print(is_even(2))\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def is_even(n):\n        return n % 2 == 0\n    print(is_even(0), is_even(1), is_even(2))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def is_even(n):\n        return n % 2\n    print(is_even(0), is_even(1), is_even(2))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def is_even(n):\n        return n % 2 == 1\n    print(is_even(0), is_even(1), is_even(2))\n"},
        ],
        "kind": "equals", "expected": "True False True\n"
    },
    5: {
        "title": "Exercise 5",
        "buggy": "def main():\n    def append_item(item, items=[]):\n        items.append(item)\n        return items\n    print(append_item('x'))\n    print(append_item('y'))\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def append_item(item, items=None):\n        if items is None:\n            items = []\n        items.append(item)\n        return items\n    print(append_item('x'))\n    print(append_item('y'))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def append_item(item, items=[]):\n        items.append(item)\n        return items\n    print(append_item('x'))\n    print(append_item('y'))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def append_item(item, items=()):\n        items.append(item)\n        return items\n    try:\n        print(append_item('x'))\n    except Exception as e:\n        print(type(e).__name__)\n"},
        ],
        "kind": "lines", "expected": ['[\\'x\\']\\n', '[\\'y\\']\\n']
    },
    # For brevity here, we include only warm-ups (1..5). In a real file, we'd continue with 6..14.
}

def run_exercise(num: int):
    if num not in EXERCISES:
        print('Unknown exercise:', num); return
    spec = EXERCISES[num]
    _print_header(f\"{spec['title']} — Buggy run\")
    buggy_fn = _safe_exec(spec['buggy'])
    try:
        out_buggy = _capture_stdout(buggy_fn)
        print(out_buggy, end='')
    except Exception as e:
        print(f\"[EXCEPTION] {type(e).__name__}: {e}\")

    _print_header(f\"{spec['title']} — Options (randomized)\")
    options = spec['options'][:]
    random.shuffle(options)
    labels = ['A','B','C']
    mapping = {}
    for label, opt in zip(labels, options):
        mapping[label] = opt
        print(f\"  {label}) {opt['title']}\")

    choice = None
    while choice not in mapping:
        choice = input('Choose A, B, or C: ').strip().upper()
    chosen = mapping[choice]

    _print_header(f\"Running option {choice}\")
    fn = _safe_exec(chosen['code'])
    try:
        out = _capture_stdout(fn)
    except Exception as e:
        print(f\"[EXCEPTION] {type(e).__name__}: {e}\")
        print('FAIL (exception during option execution)')
        return

    # check
    if spec['kind'] == 'equals':
        if out == spec['expected']:
            print('PASS')
        else:
            print('FAIL'); print('Expected:', repr(spec['expected'])); print('Got     :', repr(out))
    elif spec['kind'] == 'lines':
        out_lines = out.splitlines(keepends=True)
        if out_lines == spec['expected']:
            print('PASS')
        else:
            print('FAIL'); print('Expected lines:', spec['expected']); print('Got lines     :', out_lines)
    else:
        print('Internal test kind error.')

def _ask_num():
    print('Available exercises:', ', '.join(str(k) for k in sorted(EXERCISES.keys())))
    while True:
        s = input('Enter exercise number: ').strip()
        if s.isdigit() and int(s) in EXERCISES:
            return int(s)
        print('Please enter a valid number.')

if __name__ == '__main__':
    if len(sys.argv) >= 2 and sys.argv[1].isdigit():
        n = int(sys.argv[1])
    else:
        n = _ask_num()
    run_exercise(n)
