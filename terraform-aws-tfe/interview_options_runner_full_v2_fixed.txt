#!/usr/bin/env python3
import sys, random, io

def _capture_stdout(fn):
    buf = io.StringIO()
    old = sys.stdout
    try:
        sys.stdout = buf
        fn()
    finally:
        sys.stdout = old
    return buf.getvalue()

def _print_header(title):
    print("\n" + "=" * 70)
    print(title)
    print("=" * 70)

def _safe_exec(code_str):
    ns = {}
    exec(code_str, ns, ns)
    fn = ns.get("main", lambda: None)
    if not callable(fn):
        fn = lambda: None
    return fn

EXERCISES = {
    1: {
        "title": "Exercise 1",
        "buggy": "def main():\n    print('Hello,  Ada')\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def greet(name):\n        print('Hello,', name)\n    greet('Ada')\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def greet(name):\n        print('Hello,  ' + name)\n    greet('Ada')\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def say_hello(name):\n        print('Hello,', name)\n    \n"},
        ],
        "kind": "equals", "expected": "Hello, Ada\n"
    },
    2: {
        "title": "Exercise 2",
        "buggy": "def main():\n    def add_numbers(a, b):\n        return a + c\n    print(add_numbers(2, 3))\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def add_numbers(a, b):\n        return a + b\n    print(add_numbers(2, 3))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    c = 0\n    def add_numbers(a, b):\n        return a + c\n    print(add_numbers(2, 3))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def add_numbers(a, b):\n        return a\n    print(add_numbers(2, 3))\n"},
        ],
        "kind": "equals", "expected": "5\n"
    },
    3: {
        "title": "Exercise 3",
        "buggy": "def main():\n    age = '25'\n    print(age + 5)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def add_five(age):\n        return int(age) + 5\n    print(add_five('25'))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def add_five(age):\n        return age + '5'\n    print(add_five('25'))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def add_five(age):\n        return age + 5\n    print(add_five('25'))\n"},
        ],
        "kind": "equals", "expected": "30\n"
    },
    4: {
        "title": "Exercise 4",
        "buggy": "def main():\n    def is_even(n):\n        return n % 2 == 1\n    print(is_even(2))\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def is_even(n):\n        return n % 2 == 0\n    print(is_even(0), is_even(1), is_even(2))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def is_even(n):\n        return n % 2\n    print(is_even(0), is_even(1), is_even(2))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def is_even(n):\n        return n % 2 == 1\n    print(is_even(0), is_even(1), is_even(2))\n"},
        ],
        "kind": "equals", "expected": "True False True\n"
    },
    5: {
        "title": "Exercise 5",
        "buggy": "def main():\n    def append_item(item, items=[]):\n        items.append(item)\n        return items\n    print(append_item('x'))\n    print(append_item('y'))\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def append_item(item, items=None):\n        if items is None:\n            items = []\n        items.append(item)\n        return items\n    print(append_item('x'))\n    print(append_item('y'))\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def append_item(item, items=[]):\n        items.append(item)\n        return items\n    print(append_item('x'))\n    print(append_item('y'))\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def append_item(item, items=()):\n        items.append(item)\n        return items\n    try:\n        print(append_item('x'))\n    except Exception as e:\n        print(type(e).__name__)\n"},
        ],
        "kind": "lines", "expected": ["['x']\n", "['y']\n"]
    },
    6: {
        "title": "Exercise 6 (File Handling)",
        "buggy": "def main():\n    def read_config(path):\n        f = open(path)\n        data = parse(f.read())\n        f.close()\n        return data\n    try:\n        read_config('config.txt')\n    except Exception as e:\n        print(type(e).__name__, e)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    path = 'config_demo.txt'\n    with open(path, 'w', encoding='utf-8') as f:\n        f.write('value=42')\n    with open(path, 'r', encoding='utf-8') as f:\n        content = f.read()\n    print(content)\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    path = 'config_demo.txt'\n    f = open(path, 'w', encoding='utf-8')\n    f.write('value=42')\n    print('wrote')\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    raise RuntimeError('simulated')\n"},
        ],
        "kind": "equals", "expected": "value=42\n"
    },
    7: {
        "title": "Exercise 7 (CSV & Encoding)",
        "buggy": "def main():\n    import csv\n    def save_rows(path, rows):\n        f = open(path, 'w')\n        w = csv.writer(f)\n        for r in rows:\n            w.writerow(r)\n        f.close()\n    save_rows('out.csv', [['naïve','café'],['a','b']])\n    print('wrote out.csv')\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    import csv\n    rows = [['naïve','café'],['a','b']]\n    with open('out.csv','w',newline='',encoding='utf-8') as f:\n        w = csv.writer(f)\n        w.writerows(rows)\n    with open('out.csv','r',encoding='utf-8') as f:\n        data = f.read().strip().splitlines()\n    print(len(data), 'lines')\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    import csv\n    rows = [['naive','cafe'],['a','b']]\n    with open('out.csv','w') as f:\n        w = csv.writer(f)\n        w.writerows(rows)\n    print('done')\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    with open('out.csv','w') as f:\n        f.write(b'na\\xefve')\n"},
        ],
        "kind": "equals", "expected": "2 lines\n"
    },
    8: {
        "title": "Exercise 8 (Async)",
        "buggy": "def main():\n    import asyncio, time\n    async def fetch(i):\n        time.sleep(0.1)\n        return i\n    async def run():\n        tasks = [fetch(i) for i in range(5)]\n        res = asyncio.gather(*tasks)\n        print('Finished?')\n        return res\n    try:\n        import asyncio\n        asyncio.run(run())\n    except Exception as e:\n        print(type(e).__name__, e)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    import asyncio\n    async def fetch(i):\n        await asyncio.sleep(0.05)\n        return i\n    async def run():\n        tasks = [fetch(i) for i in range(5)]\n        res = await asyncio.gather(*tasks)\n        print('Results:', res)\n    asyncio.run(run())\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    import asyncio, time\n    async def fetch(i):\n        time.sleep(0.05)\n        return i\n    async def run():\n        tasks = [fetch(i) for i in range(5)]\n        asyncio.gather(*tasks)\n        print('Done')\n    asyncio.run(run())\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    def fetch(i):\n        return i\n    print(list(map(fetch, range(5))))\n"},
        ],
        "kind": "equals", "expected": "Results: [0, 1, 2, 3, 4]\n"
    },
    9: {
        "title": "Exercise 9 (Threading Race)",
        "buggy": "def main():\n    import threading\n    total = 0\n    def work(n):\n        nonlocal total\n        for _ in range(n):\n            total += 1\n    th = [threading.Thread(target=work, args=(100_000,)) for _ in range(4)]\n    [t.start() for t in th]; [t.join() for t in th]\n    print('Final:', total)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    import threading\n    total = 0\n    lock = threading.Lock()\n    def work(n):\n        nonlocal total\n        for _ in range(n):\n            with lock:\n                total += 1\n    th = [threading.Thread(target=work, args=(100_000,)) for _ in range(4)]\n    [t.start() for t in th]; [t.join() for t in th]\n    print('Final:', total)\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    import threading\n    total = 0\n    def work(n):\n        nonlocal total\n        for _ in range(n):\n            total += 1\n    th = [threading.Thread(target=work, args=(100_000,)) for _ in range(4)]\n    [t.start() for t in th]; [t.join() for t in th]\n    print('Final:', total)\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    print('Final:', 0)\n"},
        ],
        "kind": "equals", "expected": "Final: 400000\n"
    },
    10: {
        "title": "Exercise 10 (SQL Injection)",
        "buggy": "def main():\n    import sqlite3\n    conn = sqlite3.connect(':memory:')\n    cur = conn.cursor()\n    cur.execute('CREATE TABLE users (id INT, name TEXT)')\n    cur.execute('INSERT INTO users VALUES (1, \\'O\\\\\\'Malley\\')')\n    username = \"O'Malley\"\n    q = f\"SELECT id, name FROM users WHERE name = '{username}'\"\n    try:\n        cur.execute(q)\n        print(cur.fetchone())\n    except Exception as e:\n        print(type(e).__name__, e)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    import sqlite3\n    with sqlite3.connect(':memory:') as conn:\n        cur = conn.cursor()\n        cur.execute('CREATE TABLE users (id INT, name TEXT)')\n        cur.execute('INSERT INTO users VALUES (?, ?)', (1, \"O'Malley\"))\n        username = \"O'Malley\"\n        cur.execute('SELECT id, name FROM users WHERE name = ?', (username,))\n        print(cur.fetchone())\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    import sqlite3\n    with sqlite3.connect(':memory:') as conn:\n        cur = conn.cursor()\n        cur.execute('CREATE TABLE users (id INT, name TEXT)')\n        cur.execute(\"INSERT INTO users VALUES (1, 'Bob')\")\n        username = \"O'Malley\"\n        q = \"SELECT id, name FROM users WHERE name = '\" + username + \"'\"\n        cur.execute(q)\n        print(cur.fetchone())\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    print('None')\n"},
        ],
        "kind": "equals", "expected": "(1, \"O'Malley\")\n"
    },
    11: {
        "title": "Exercise 11 (TZ/DST)",
        "buggy": "def main():\n    from datetime import datetime, timedelta\n    start = datetime.now()\n    end = start + timedelta(hours=24)\n    print('Naive')\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    from datetime import datetime, timedelta\n    try:\n        from zoneinfo import ZoneInfo\n        tz = ZoneInfo('Europe/London')\n        now = datetime.now(tz)\n        _ = now + timedelta(hours=24)\n        print('TZ-aware')\n    except Exception:\n        print('TZ-aware')\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    from datetime import datetime, timedelta\n    now = datetime.utcnow()\n    _ = now + timedelta(hours=24)\n    print('Naive')\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    print('Unknown')\n"},
        ],
        "kind": "equals", "expected": "TZ-aware\n"
    },
    12: {
        "title": "Exercise 12 (Iterator Exhaustion)",
        "buggy": "def main():\n    def process(lines_iter):\n        return [s.strip() for s in lines_iter if s.strip()]\n    data = iter(['a\\n', '\\n', 'b\\n'])\n    first = process(data)\n    second = process(data)\n    print('first:', first, 'second:', second)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    def process(lines_iterable):\n        items = list(lines_iterable)\n        return [s.strip() for s in items if s.strip()]\n    src = ['a\\n', '\\n', 'b\\n']\n    first = process(src)\n    second = process(src)\n    print('first:', first, 'second:', second)\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    def process(lines_iter):\n        return [s.strip() for s in lines_iter if s.strip()]\n    src_iter = iter(['a\\n', '\\n', 'b\\n'])\n    first = process(src_iter)\n    second = process(src_iter)\n    print('first:', first, 'second:', second)\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    print('first:', [], 'second:', [])\n"},
        ],
        "kind": "equals", "expected": "first: ['a', 'b'] second: ['a', 'b']\n"
    },
    13: {
        "title": "Exercise 13 (Dataclass Defaults)",
        "buggy": "def main():\n    from dataclasses import dataclass\n    @dataclass\n    class Cart:\n        items: list = []\n    c1 = Cart(); c2 = Cart()\n    c1.items.append('x')\n    print('c2.items:', c2.items)\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    from dataclasses import dataclass, field\n    @dataclass\n    class Cart:\n        items: list = field(default_factory=list)\n    c1 = Cart(); c2 = Cart()\n    c1.items.append('x')\n    print('c2.items:', c2.items)\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    from dataclasses import dataclass\n    @dataclass\n    class Cart:\n        items: list = []\n    c1 = Cart(); c2 = Cart()\n    c1.items.append('x')\n    print('c2.items:', c2.items)\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    from dataclasses import dataclass, field\n    @dataclass\n    class Cart:\n        items: tuple = field(default_factory=tuple)\n    c1 = Cart(); c2 = Cart()\n    try:\n        c1.items += ('x',)\n        print('c2.items:', c2.items)\n    except Exception as e:\n        print(type(e).__name__)\n"},
        ],
        "kind": "equals", "expected": "c2.items: []\n"
    },
    14: {
        "title": "Exercise 14 (Logging Hygiene)",
        "buggy": "def main():\n    import logging\n    API_KEY = 'sk_live_example_secret_value'\n    try:\n        raise TimeoutError('simulated')\n    except Exception as e:\n        logging.error('Charge failed for key=%s err=%r', API_KEY, e)\n        print('logged')\n",
        "options": [
            {"title": "Option A", "ok": True, "code": "def main():\n    import logging\n    try:\n        raise TimeoutError('simulated')\n    except TimeoutError as e:\n        logging.error('Charge failed; err=%s', e)\n        print('logged')\n"},
            {"title": "Option B", "ok": False, "code": "def main():\n    import logging\n    API_KEY = 'sk_live_example_secret_value'\n    try:\n        raise TimeoutError('simulated')\n    except Exception as e:\n        logging.error('Charge failed; api=%s; err=%s', API_KEY, e)\n        print('logged', API_KEY)\n"},
            {"title": "Option C", "ok": False, "code": "def main():\n    print('silent')\n"},
        ],
        "kind": "equals", "expected": "logged\n"
    },
}

def run_exercise(num: int):
    if num not in EXERCISES:
        print('Unknown exercise:', num); return
    spec = EXERCISES[num]
    _print_header(f\"{spec['title']} — Buggy run\")
    buggy_fn = _safe_exec(spec['buggy'])
    try:
        out_buggy = _capture_stdout(buggy_fn)
        print(out_buggy, end='')
    except Exception as e:
        print(f\"[EXCEPTION] {type(e).__name__}: {e}\")

    _print_header(f\"{spec['title']} — Options (randomized)\")
    options = spec['options'][:]
    random.shuffle(options)
    labels = ['A','B','C']
    mapping = {}
    for label, opt in zip(labels, options):
        mapping[label] = opt
        print(f\"  {label}) {opt['title']}\")

    choice = None
    while choice not in mapping:
        choice = input('Choose A, B, or C: ').strip().upper()
    chosen = mapping[choice]

    _print_header(f\"Running option {choice}\")
    fn = _safe_exec(chosen['code'])
    try:
        out = _capture_stdout(fn)
    except Exception as e:
        print(f\"[EXCEPTION] {type(e).__name__}: {e}\")
        print('❌ FAIL (exception during option execution)')
        return

    # Secret-leak check for exercise 14
    if num == 14 and 'sk_live' in out:
        print('❌ FAIL (secret leaked)')
        return

    if spec['kind'] == 'equals':
        if out == spec['expected']:
            print('✅ PASS')
        else:
            print('❌ FAIL'); print('Expected:', repr(spec['expected'])); print('Got     :', repr(out))
    elif spec['kind'] == 'lines':
        out_lines = out.splitlines(keepends=True)
        if out_lines == spec['expected']:
            print('✅ PASS')
        else:
            print('❌ FAIL'); print('Expected lines:', spec['expected']); print('Got lines     :', out_lines)
    else:
        print('Internal test kind error.')

def _ask_num():
    print('Available exercises:', ', '.join(str(k) for k in sorted(EXERCISES.keys())))
    while True:
        s = input('Enter exercise number: ').strip()
        if s.isdigit() and int(s) in EXERCISES:
            return int(s)
        print('Please enter a valid number.')

if __name__ == '__main__':
    if len(sys.argv) >= 2 and sys.argv[1].isdigit():
        n = int(sys.argv[1])
    else:
        n = _ask_num()
    run_exercise(n)
