#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Combined Debugging Interview — Python + CI/CD + IaC (Terraform) + Git (v3)
===========================================================================

What this does
--------------
One runner for FOUR sections:
  • Python debugging (buggy snippet + randomized fix options; validates by output)
  • CI/CD (GitLab/GitHub/Jenkins) snippet troubleshooting (metadata-driven)
  • IaC / Terraform (general, AWS, GCP) config/command fixes (metadata-driven)
  • Git (branching, merging, rebasing, stash, safety) correct-command selection

Candidate sees buggy code + options only; no pass/fail shown on screen unless you
choose to print a final summary. Results are saved to CSVs (summary + details)
and an optional one-page PDF (no question details).

Sections & filtering
--------------------
--section python|cicd|iac|git|all   (default: all)
--tool gitlab|github|jenkins        (CI/CD filter; can pass multiple)
--iac-scope general|aws|gcp         (IaC filter; can pass multiple)

Selection & order
-----------------
--all                        Select all in chosen section(s)
--pick-python N [N ...]      Choose specific Python items
--pick-cicd N [N ...]        Choose specific CI/CD items
--pick-iac N [N ...]         Choose specific IaC items
--pick-git N [N ...]         Choose specific Git items
--shuffle                    Shuffle the final combined order
--limit N                    Cap total number of questions after selection

Other flags
-----------
--time-limit SEC             Timed input per exercise (0 = off)
--pause                      Pause & clear screen between exercises
--output-dir DIR             Where to write files (default: .)
--results-file FILE          Summary CSV filename (optional)
--details-file FILE          Details CSV filename (optional)
--pdf                        Also write one-page summary PDF
--pdf-file FILE              Explicit summary PDF filename
--name "Full Name"           Candidate name (prompted if omitted)
--no-display-results         Suppress end-of-run printout

Dependencies
------------
Pure Python 3 stdlib. No external packages required.
"""

import sys, os, io, random, argparse, csv, re, logging, json
from datetime import datetime

# ==========
# Utilities
# ==========
def _print_header(title):
    print("\n" + "="*70)
    print(title)
    print("="*70)

def timed_input(prompt, timeout=0.0):
    # Simple input without true timeout to keep stdlib-only & cross-platform
    # (Your earlier v1 had a platform-aware timer; keep current simple & robust)
    try:
        return input(prompt), False
    except EOFError:
        return "", False

def sanitize_filename(s):
    s = re.sub(r"\s+","_", s.strip())
    return re.sub(r"[^A-Za-z0-9._-]","", s) or "candidate"

# ==========================
# Minimal one-page PDF (txt)
# ==========================
def _esc(s): return s.replace("\\","\\\\").replace("(","\\(").replace(")","\\)")
def write_summary_pdf(path, title, name, ts, lines, footer):
    width, height = 595, 842; y = height-56; leading=16
    out = bytearray(b"%PDF-1.4\n"); xref=[0]
    lines_out=[]
    def add(sz, text):
        nonlocal y
        lines_out.append(f"BT /F1 {sz} Tf 50 {y} Td ({_esc(text)}) Tj ET"); y -= leading
    add(16, title); y -= 6
    add(12, f"Candidate: {name}")
    add(12, f"Timestamp: {ts}"); y -= 6
    for ln in lines:
        if y < 80: break
        add(12, ln)
    y -= leading
    for ln in footer:
        if y < 60: break
        add(12, ln)
    stream = "\n".join(lines_out).encode("latin-1","replace")
    def obj(payload):
        xref.append(len(out))
        if not payload.endswith(b"\n"): payload += b"\n"
        out.extend(payload); out.extend(b"endobj\n")
    obj(b"1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>")
    obj(b"2 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>")
    obj(f"3 0 obj\n<< /Type /Page /Parent 2 0 R /MediaBox [0 0 {width} {height}] /Resources << /Font << /F1 5 0 R >> >> /Contents 4 0 R >>".encode())
    obj(b"4 0 obj\n<< /Length "+str(len(stream)).encode()+b" >>\nstream\n"+stream+b"\nendstream")
    obj(b"5 0 obj\n<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>")
    xref_pos=len(out)
    out.extend(b"xref\n"); out.extend(f"0 {len(xref)}\n".encode())
    out.extend(b"0000000000 65535 f \n")
    for off in xref[1:]:
        out.extend(f"{off:010d} 00000 n \n".encode())
    out.extend(b"trailer\n"); out.extend(f"<< /Size {len(xref)} /Root 1 0 R >>\n".encode())
    out.extend(b"startxref\n"); out.extend(f"{xref_pos}\n".encode()); out.extend(b"%%EOF")
    with open(path,"wb") as f: f.write(out)

# =============================
# Python Exercise Bank (14 full)
# =============================
PY_EX = {
  1: {"title":"Python — Snippet 1", "desc":"Fix indentation so greeting prints",
      "buggy": "def main():\nprint('Hello, Ada')\n",
      "options": [
          {"ok":True,  "code": "def main():\n    print('Hello, Ada')\n"},
          {"ok":False, "code": "def main():\n\tprint('Hello,  Ada')\n"},
          {"ok":False, "code": "def main():\n    pass\n"},
      ],
      "kind":"equals", "expected":"Hello, Ada\n"},
  2: {"title":"Python — Snippet 2", "desc":"Fix NameError and add correctly",
      "buggy":"def main():\n    def add_numbers(a,b):\n        return a + c\n    print(add_numbers(2,3))\n",
      "options": [
          {"ok":True,  "code":"def main():\n    def add_numbers(a,b):\n        return a + b\n    print(add_numbers(2,3))\n"},
          {"ok":False, "code":"def main():\n    c=0\n    def add_numbers(a,b):\n        return a + c\n    print(add_numbers(2,3))\n"},
          {"ok":False, "code":"def main():\n    def add_numbers(a,b):\n        return a\n    print(add_numbers(2,3))\n"},
      ],
      "kind":"equals", "expected":"5\n"},
  3: {"title":"Python — Snippet 3", "desc":"Avoid mutable default argument",
      "buggy":"def main():\n    def add(x, arr=[]):\n        arr.append(x)\n        return arr\n    print(add(1))\n    print(add(2))\n",
      "options":[
          {"ok":True, "code":"def main():\n    def add(x, arr=None):\n        arr = [] if arr is None else arr\n        arr.append(x)\n        return arr\n    print(add(1))\n    print(add(2))\n"},
          {"ok":False,"code":"def main():\n    def add(x, arr=[]):\n        arr.append(x)\n        return arr\n    print(add(1))\n    print(add(2))\n"},
          {"ok":False,"code":"def main():\n    def add(x, arr=()):\n        arr.append(x)\n    print('done')\n"},
      ],
      "kind":"lines", "expected":["[1]\n","[2]\n"]},
  4: {"title":"Python — Snippet 4", "desc":"Fix off-by-one in summation 1..5",
      "buggy":"def main():\n    s=sum(range(1,5))\n    print(s)\n",
      "options":[
          {"ok":True, "code":"def main():\n    s=sum(range(1,6))\n    print(s)\n"},
          {"ok":False,"code":"def main():\n    s=sum(range(0,5))\n    print(s)\n"},
          {"ok":False,"code":"def main():\n    s=sum(range(1,5,2))\n    print(s)\n"},
      ],
      "kind":"equals", "expected":"15\n"},
  5: {"title":"Python — Snippet 5", "desc":"Use f-string to format name",
      "buggy":"def main():\n    name='Bob'\n    print('Hello, {name}')\n",
      "options":[
          {"ok":True, "code":"def main():\n    name='Bob'\n    print(f'Hello, {name}')\n"},
          {"ok":False,"code":"def main():\n    name='Bob'\n    print('Hello, ' + {name})\n"},
          {"ok":False,"code":"def main():\n    name='Bob'\n    print('Hello, ' + name + '!')\n"},
      ],
      "kind":"equals", "expected":"Hello, Bob\n"},
  6: {"title":"Python — Snippet 6", "desc":"Join numbers properly into CSV",
      "buggy":"def main():\n    nums=[1,2,3]\n    print(','.join(nums))\n",
      "options":[
          {"ok":True, "code":"def main():\n    nums=[1,2,3]\n    print(','.join(str(n) for n in nums))\n"},
          {"ok":False,"code":"def main():\n    nums=[1,2,3]\n    print(','.join(map(int, nums)))\n"},
          {"ok":False,"code":"def main():\n    nums=[1,2,3]\n    print(','.join([1,2,3]))\n"},
      ],
      "kind":"equals", "expected":"1,2,3\n"},
  7: {"title":"Python — Snippet 7", "desc":"Sort tuples by second element",
      "buggy":"def main():\n    pairs=[('b',2),('a',1),('c',3)]\n    pairs.sort()\n    for p in pairs:\n        print(p)\n",
      "options":[
          {"ok":True, "code":"def main():\n    pairs=[('b',2),('a',1),('c',3)]\n    pairs.sort(key=lambda x: x[1])\n    for p in pairs:\n        print(p)\n"},
          {"ok":False,"code":"def main():\n    pairs=[('b',2),('a',1),('c',3)]\n    pairs.sort(key=lambda x: x[0])\n    for p in pairs:\n        print(p)\n"},
          {"ok":False,"code":"def main():\n    pairs=[('b',2),('a',1),('c',3)]\n    for p in sorted(pairs):\n        print(p)\n"},
      ],
      "kind":"lines", "expected":["('a', 1)\n","('b', 2)\n","('c', 3)\n"]},
  8: {"title":"Python — Snippet 8", "desc":"Count letters without mutation issues",
      "buggy":"def main():\n    s='aba'\n    d={}\n    for ch in s:\n        d[ch]=d.get(ch,[])+[1]\n    print(d)\n",
      "options":[
          {"ok":True, "code":"def main():\n    s='aba'\n    d={}\n    for ch in s:\n        d[ch]=d.get(ch,0)+1\n    print(dict(sorted(d.items())))\n"},
          {"ok":False,"code":"def main():\n    s='aba'\n    d={}\n    for ch in s:\n        d[ch].append(1)\n    print(d)\n"},
          {"ok":False,"code":"def main():\n    s='aba'\n    d={}\n    for ch in s:\n        d[ch]=1\n    print(d)\n"},
      ],
      "kind":"equals", "expected":"{'a': 2, 'b': 1}\n"},
  9: {"title":"Python — Snippet 9", "desc":"Handle ZeroDivisionError and print inf",
      "buggy":"def main():\n    def divide(a,b):\n        return a/b\n    print(divide(1,0))\n",
      "options":[
          {"ok":True, "code":"def main():\n    def divide(a,b):\n        try:\n            return a/b\n        except ZeroDivisionError:\n            return float('inf')\n    print(divide(1,0))\n"},
          {"ok":False,"code":"def main():\n    def divide(a,b):\n        if b==0: raise ValueError('bad')\n        return a/b\n    print(divide(1,0))\n"},
          {"ok":False,"code":"def main():\n    def divide(a,b):\n        try:\n            a/b\n        except ZeroDivisionError:\n            return 0\n    print(divide(1,0))\n"},
      ],
      "kind":"equals", "expected":"inf\n"},
 10: {"title":"Python — Snippet 10", "desc":"Use generator expression for sum of squares",
      "buggy":"def main():\n    squares=[i*i for i in range(6)]\n    print(sum(squares[:5]))\n",
      "options":[
          {"ok":True, "code":"def main():\n    print(sum(i*i for i in range(5)))\n"},
          {"ok":False,"code":"def main():\n    print(sum([i*i for i in range(5)]))\n"},
          {"ok":False,"code":"def main():\n    print(sum(i*i for i in range(6)))\n"},
      ],
      "kind":"equals", "expected":"30\n"},
 11: {"title":"Python — Snippet 11", "desc":"Reverse a string correctly",
      "buggy":"def main():\n    s='abc'\n    print(reversed(s))\n",
      "options":[
          {"ok":True, "code":"def main():\n    s='abc'\n    print(s[::-1])\n"},
          {"ok":False,"code":"def main():\n    s='abc'\n    print(list(reversed(s)))\n"},
          {"ok":False,"code":"def main():\n    s='abc'\n    print(''.join(reversed))\n"},
      ],
      "kind":"equals", "expected":"cba\n"},
 12: {"title":"Python — Snippet 12", "desc":"Properly await an async function",
      "buggy":"async def do_work():\n    print('done')\n\ndef main():\n    do_work()\n",
      "options":[
          {"ok":True, "code":"import asyncio\nasync def do_work():\n    print('done')\n\ndef main():\n    asyncio.run(do_work())\n"},
          {"ok":False,"code":"async def do_work():\n    print('done')\n\ndef main():\n    await do_work()\n"},
          {"ok":False,"code":"def do_work():\n    print('done')\n\ndef main():\n    asyncio.run(do_work())\n"},
      ],
      "kind":"equals", "expected":"done\n"},
 13: {"title":"Python — Snippet 13", "desc":"Parse JSON from string",
      "buggy":"def main():\n    data='{\"value\": 42}'\n    print(json.loads(data)['Value'])\n",
      "options":[
          {"ok":True, "code":"import json\n\ndef main():\n    data='{\"value\": 42}'\n    obj=json.loads(data)\n    print(obj['value'])\n"},
          {"ok":False,"code":"def main():\n    data='{\"value\": 42}'\n    print(eval(data)['value'])\n"},
          {"ok":False,"code":"import json\n\ndef main():\n    data='{\"value\": 42}'\n    obj=json.loads(data)\n    print(obj.get('value', '42'))\n"},
      ],
      "kind":"equals", "expected":"42\n"},
 14: {"title":"Python — Snippet 14", "desc":"Use enumerate with correct start index",
      "buggy":"def main():\n    items=['a','b']\n    for i,x in enumerate(items):\n        print(f\"{i}:{x}\")\n",
      "options":[
          {"ok":True, "code":"def main():\n    items=['a','b']\n    for i,x in enumerate(items, start=1):\n        print(f\"{i}:{x}\")\n"},
          {"ok":False,"code":"def main():\n    items=['a','b']\n    for i,x in enumerate(items, start=0):\n        print(f\"{i+1}:{x}\")\n"},
          {"ok":False,"code":"def main():\n    items=['a','b']\n    for i,x in enumerate(items, start=2):\n        print(f\"{i-1}:{x}\")\n"},
      ],
      "kind":"lines", "expected":["1:a\n","2:b\n"]},
}

PY_EXPLANATIONS = {
    1: "Indentation must be corrected",
    2: "Fix NameError by using correct variable",
    3: "Avoid mutable default arguments",
    4: "Correct off-by-one in range()",
    5: "Use f-string formatting",
    6: "Convert list items to str before join()",
    7: "Sort tuples with a key function (value not key)",
    8: "Use dict.get() to count occurrences",
    9: "Catch ZeroDivisionError and handle gracefully",
    10: "Use generator expression for sum of squares",
    11: "Reverse string with slicing, not reversed() object",
    12: "Properly await coroutine (asyncio.run())",
    13: "Use json.loads() instead of eval",
    14: "Use enumerate(..., start=1) for 1-based labels",
}

# ==================================
# CI/CD Exercise Bank (12)
# ==================================
EX_CICD = {
1: {"platform":"gitlab","title":"GitLab CI – Snippet 1","desc":"Review and choose the correct version.",
    "buggy":"""# .gitlab-ci.yml
build-job:
  script:
    - echo "Running tests"
""",
    "options":[
        {"ok":True,"code":"""build-job:
  stage: build
  script:
    - echo "Running tests"
""","explanation":"Jobs typically declare a stage (or rely on defaults)."},
        {"ok":False,"code":"""build-job:
  only: [ master ]
  script:
    - echo "Running tests"
"""},
        {"ok":False,"code":"""stage: build
script:
  - echo "Running tests"
"""},
    ]},
2: {"platform":"gitlab","title":"GitLab CI – Snippet 2","desc":"Review and choose the correct version.",
    "buggy":"""# .gitlab-ci.yml
test-job:
  stage: test
  script: echo "Hello"
""",
    "options":[
        {"ok":True,"code":"""test-job:
  stage: test
  script:
    - echo "Hello"
""","explanation":"`script` must be a YAML sequence (dashed list)."},
        {"ok":False,"code":"""test-job:
  stage: test
  script:
    echo "Hello"
"""},
        {"ok":False,"code":"""test-job:
  stage: test
  run:
    - echo "Hello"
"""},
    ]},
3: {"platform":"gitlab","title":"GitLab CI – Snippet 3","desc":"Review and choose the correct version.",
    "buggy":"""# .gitlab-ci.yml
image-job:
  image: ubuntu:latest:extra
  script:
    - echo "Using image"
""",
    "options":[
        {"ok":True,"code":"""image-job:
  image: ubuntu:latest
  script:
    - echo "Using image"
""","explanation":"Docker tag must be `name:tag` (single colon)."},
        {"ok":False,"code":"""image-job:
  image: latest/ubuntu
  script:
    - echo "Using image"
"""},
        {"ok":False,"code":"""image-job:
  image:
    name: ubuntu
    tag: latest:foo
  script:
    - echo "Using image"
"""},
    ]},
4: {"platform":"gitlab","title":"GitLab CI – Snippet 4","desc":"Review and choose the correct version.",
    "buggy":"""# .gitlab-ci.yml
job-with-var:
  stage: build
  script:
    - echo VAR
""",
    "options":[
        {"ok":True,"code":"""job-with-var:
  stage: build
  script:
    - echo $VAR
""","explanation":"Use shell variable expansion `$VAR` (or `${VAR}`)."},
        {"ok":False,"code":"""job-with-var:
  stage: build
  script:
    - echo ${VAR}
    - set -u
"""},
        {"ok":False,"code":"""job-with-var:
  stage: build
  script:
    - echo "$(VAR)"
"""},
    ]},
5: {"platform":"github","title":"GitHub Actions – Snippet 5","desc":"Review and choose the correct version.",
    "buggy":"""# .github/workflows/main.yml
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Test"
onn:
  push:
    branches: [ main ]
""",
    "options":[
        {"ok":True,"code":"""on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Test"
""","explanation":"Top-level trigger key is `on`, not `onn`. Keys must be correct."},
        {"ok":False,"code":"""trigger:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Test"
"""},
        {"ok":False,"code":"""on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Test"
"""},
    ]},
6: {"platform":"github","title":"GitHub Actions – Snippet 6","desc":"Review and choose the correct version.",
    "buggy":"""# .github/workflows/main.yml
on: [ push ]
jobs:
  test:
    runs-on: ubuntu-latest
    - run: echo "Hello"
""",
    "options":[
        {"ok":True,"code":"""on: [ push ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Hello"
""","explanation":"Each job needs a `steps:` sequence; list items belong under it."},
        {"ok":False,"code":"""on: [ push ]
jobs:
  test:
    steps:
      - run: echo "Hello"
"""},
        {"ok":False,"code":"""on: [ push ]
jobs:
  test:
    runs-on: ubuntu-latest
    scripts:
      - run: echo "Hello"
"""},
    ]},
7: {"platform":"github","title":"GitHub Actions – Snippet 7","desc":"Review and choose the correct version.",
    "buggy":"""# .github/workflows/main.yml
on: [ push ]
jobs:
  matrix-job:
    runs-on: ubuntu-latest
  strategy:
    matrix:
      node-version: [12, 14, 16]
    steps:
      - run: node --version
""",
    "options":[
        {"ok":True,"code":"""on: [ push ]
jobs:
  matrix-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12, 14, 16]
    steps:
      - run: node --version
""","explanation":"`strategy` must be inside the job (same level as `runs-on`/`steps`)."},
        {"ok":False,"code":"""on: [ push ]
strategy:
  matrix:
    node-version: [12, 14, 16]
jobs:
  matrix-job:
    runs-on: ubuntu-latest
    steps:
      - run: node --version
"""},
        {"ok":False,"code":"""on: [ push ]
jobs:
  matrix-job:
    runs-on: ubuntu-lest
    steps:
      - strategy:
          matrix:
            node-version: [12, 14, 16]
      - run: node --version
"""},
    ]},
8: {"platform":"github","title":"GitHub Actions – Snippet 8","desc":"Review and choose the correct version.",
    "buggy":"""# .github/workflows/main.yml
on: [ push, workflow_dispatch ]
jobs:
  conditional:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Conditional"
        if: github.event_name == push
""",
    "options":[
        {"ok":True,"code":"""on: [ push, workflow_dispatch ]
jobs:
  conditional:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Conditional"
        if: github.event_name == 'push'
""","explanation":"Compare against a quoted string in expressions: `'push'`."},
        {"ok":False,"code":"""on: [ push, workflow_dispatch ]
jobs:
  conditional:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Conditional"
        if: github.event == 'push'
"""},
        {"ok":False,"code":"""on: [ push, workflow_dispatch ]
jobs:
  conditional:
    runs-on: ubuntu-latest
    steps:
      - if: github.event_name == 'push'
        run: echo "Conditional"
        when: true
"""},
    ]},
9: {"platform":"jenkins","title":"Jenkins – Snippet 9","desc":"Review and choose the correct version.",
    "buggy":"""// Jenkinsfile
pipeline {
  agent any
}
""",
    "options":[
        {"ok":True,"code":"""pipeline {
  agent any
  stages {
    stage('Build') {
      steps { echo 'Build' }
    }
  }
}
""","explanation":"Declarative pipelines require a `stages { ... }` block with at least one stage."},
        {"ok":False,"code":"""pipeline {
  agent any
  steps { echo 'Build' }
}
"""},
        {"ok":False,"code":"""pipeline {
  agent none
}
"""},
    ]},
10: {"platform":"jenkins","title":"Jenkins – Snippet 10","desc":"Review and choose the correct version.",
    "buggy":"""pipeline {
  agent any
  stags {
    stage('Build') { steps { echo 'Building...' } }
  }
}
""",
    "options":[
        {"ok":True,"code":"""pipeline {
  agent any
  stages {
    stage('Build') { steps { echo 'Building...' } }
  }
}
""","explanation":"Key must be `stages` (not `stags`)."},
        {"ok":False,"code":"""pipeline {
  agent any
  stage {
    steps { echo 'Building...' }
  }
}
"""},
        {"ok":False,"code":"""pipeline {
  agent any
  stages:
    stage('Build') { steps { echo 'Building...' } }
}
"""},
    ]},
11: {"platform":"jenkins","title":"Jenkins – Snippet 11","desc":"Review and choose the correct version.",
    "buggy":"""pipeline {
  agent any
  stages {
    stage('Deploy') {
      steps { echo "$VAR()" }
    }
  }
}
""",
    "options":[
        {"ok":True,"code":"""pipeline {
  agent any
  stages {
    stage('Deploy') {
      steps { echo "${VAR}" }
    }
  }
}
""","explanation":"Use Groovy interpolation `${VAR}` (or `env.VAR`)."},
        {"ok":False,"code":"""pipeline {
  agent any
  stages {
    stage('Deploy') {
      steps { echo "$VAR" }
    }
  }
}
"""},
        {"ok":False,"code":"""pipeline {
  agent any
  environment { VAR = 'value' }
  stages {
    stage('Deploy') {
      steps { echo "$(VAR)" }
    }
  }
}
"""},
    ]},
12: {"platform":"jenkins","title":"Jenkins – Snippet 12","desc":"Review and choose the correct version.",
    "buggy":"""pipeline {
  agent any
  stages {
    stage('Build') { steps { echo 'First' } }
    stage('Build') { steps { echo 'Second' } }
  }
}
""",
    "options":[
        {"ok":True,"code":"""pipeline {
  agent any
  stages {
    stage('Build')  { steps { echo 'First' } }
    stage('Test')   { steps { echo 'Second' } }
  }
}
""","explanation":"Stage names should be unique to avoid confusing the UI/graph."},
        {"ok":False,"code":"""pipeline {
  agent any
  stages {
    stage('Build') { steps { echo 'First' } }
    stage('Build') { steps { echo 'Second' } }
  }
}
"""},
        {"ok":False,"code":"""pipeline {
  agent any
  stage('Build') { steps { echo 'First' } }
  stage('Test')  { steps { echo 'Second' } }
}
"""},
    ]},
}

# ==================================
# IaC / Terraform Exercise Bank (10)
# ==================================
EX_IAC = {
1: {"scope":"general","platform":"terraform","title":"Terraform – Init & Apply order","desc":"Fix the setup/plan/apply sequence.",
    "buggy":"""# Terminal
$ terraform apply
""",
    "options":[
        {"ok":True,"code":"""# Correct sequence
terraform init
terraform plan
terraform apply
""","explanation":"Always `init` to download providers and set up backend, then `plan`, then `apply`."},
        {"ok":False,"code":"""terraform plan
terraform init
terraform apply
"""},
        {"ok":False,"code":"""terraform apply --auto-approve
"""},
    ]},
2: {"scope":"general","platform":"terraform","title":"Terraform – Remote state for teams","desc":"Choose a safer backend for team use.",
    "buggy":"""# main.tf (local state by default)
# No backend configured
""",
    "options":[
        {"ok":True,"code":"""terraform {
  backend "s3" {
    bucket         = "my-tf-state-bucket"
    key            = "project/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "tf-state-locks"
    encrypt        = true
  }
}
""","explanation":"Use remote state (e.g., S3 + DynamoDB lock) to avoid local file conflicts."},
        {"ok":False,"code":"""terraform {
  backend "local" {}
}
"""},
        {"ok":False,"code":"""terraform {
  backend "http" {}
}
"""},
    ]},
3: {"scope":"general","platform":"terraform","title":"Terraform – Variables & defaults","desc":"Stop hardcoding region.",
    "buggy":"""# main.tf
provider "aws" {
  region = "us-east-1"
}
""",
    "options":[
        {"ok":True,"code":"""# variables.tf
variable "region" {
  type    = string
  default = "us-east-1"
}

# main.tf
provider "aws" {
  region = var.region
}
""","explanation":"Use variables with sane defaults; avoid hardcoding."},
        {"ok":False,"code":"""# main.tf
provider "aws" {
  region = var.aws_region
}
"""},
        {"ok":False,"code":"""# main.tf
provider "aws" {}
"""},
    ]},
4: {"scope":"aws","platform":"terraform","title":"Terraform – AWS provider config","desc":"Add a valid provider block.",
    "buggy":"""# main.tf
resource "aws_s3_bucket" "logs" {
  bucket = "my-logs"
}
""",
    "options":[
        {"ok":True,"code":"""provider "aws" {
  region = "us-east-1"
}
""","explanation":"Every AWS resource requires an `aws` provider configured (region, creds via env or profile)."},
        {"ok":False,"code":"""provider "aws" {
  credentials = "inline"
}
"""},
        {"ok":False,"code":"""provider "aws" {}
"""},
    ]},
5: {"scope":"aws","platform":"terraform","title":"Terraform – Unique resource names","desc":"Fix duplicate resource names.",
    "buggy":"""# main.tf
resource "aws_instance" "web" { ami="ami-123"; instance_type="t3.micro" }
resource "aws_instance" "web" { ami="ami-456"; instance_type="t3.small" }
""",
    "options":[
        {"ok":True,"code":"""# Option A: distinct names
resource "aws_instance" "web_a" { ami="ami-123"; instance_type="t3.micro" }
resource "aws_instance" "web_b" { ami="ami-456"; instance_type="t3.small" }
""","explanation":"Resource names must be unique. Alternatively use `for_each` or `count`."},
        {"ok":False,"code":"""# Option B: same name, last wins
resource "aws_instance" "web" { ami="ami-123"; instance_type="t3.micro" }
resource "aws_instance" "web" { ami="ami-456"; instance_type="t3.small" }
"""},
        {"ok":False,"code":"""# Option C: duplicate blocks but different AMI is allowed
resource "aws_instance" "web" { ami="ami-123"; instance_type="t3.micro" }
resource "aws_instance" "web" { ami="ami-456"; instance_type="t3.small" }
"""},
    ]},
6: {"scope":"aws","platform":"terraform","title":"Terraform – Useful outputs","desc":"Expose created IDs as outputs.",
    "buggy":"""# vpc.tf
resource "aws_vpc" "main" { cidr_block = "10.0.0.0/16" }
""",
    "options":[
        {"ok":True,"code":"""# outputs.tf
output "vpc_id" {
  value = aws_vpc.main.id
}
""","explanation":"Define outputs to surface values for modules/CI steps."},
        {"ok":False,"code":"""# outputs.tf
output "vpc_id" {}
"""},
        {"ok":False,"code":"""# vpc.tf
resource "aws_vpc" "main" { cidr_block = "10.0.0.0/16"; output=true }
"""},
    ]},
7: {"scope":"gcp","platform":"terraform","title":"Terraform – GCP credentials","desc":"Provide the credentials file path.",
    "buggy":"""# main.tf
provider "google" {
  project = "my-proj"
  region  = "us-central1"
}
""",
    "options":[
        {"ok":True,"code":"""provider "google" {
  project     = "my-proj"
  region      = "us-central1"
  credentials = file("account.json")
}
""","explanation":"Local runs typically point to a JSON key file; CI uses env or workload identity."},
        {"ok":False,"code":"""provider "google" { project="my-proj"; region="us-central1"; credentials="/root/key" }
"""},
        {"ok":False,"code":"""provider "google" { project="my-proj"; region="us-central1" }
# gcloud auth will always be picked automatically
"""},
    ]},
8: {"scope":"gcp","platform":"terraform","title":"Terraform – GCP project/region","desc":"Include required provider fields.",
    "buggy":"""# main.tf
provider "google" {}
""",
    "options":[
        {"ok":True,"code":"""provider "google" {
  project = "my-proj"
  region  = "us-central1"
}
""","explanation":"GCP resources need project/region/zone configured, either here or via variables."},
        {"ok":False,"code":"""provider "google" {
  zone = "us-central1-a"
}
"""},
        {"ok":False,"code":"""# Omit provider and rely on defaults
"""},
    ]},
9: {"scope":"general","platform":"terraform","title":"Terraform – Use modules","desc":"Avoid duplication using modules.",
    "buggy":"""# main.tf (duplicated VPC code blocks scattered across files)
# ...
""",
    "options":[
        {"ok":True,"code":"""module "vpc" {
  source = "./modules/vpc"
  cidr_block = "10.0.0.0/16"
}
""","explanation":"Encapsulate reusable infrastructure in modules; parameterize inputs/outputs."},
        {"ok":False,"code":"""# Keep copying the same resource blocks in every environment
"""},
        {"ok":False,"code":"""# Use local-exec to shell out to bash that creates VPCs manually
"""},
    ]},
10: {"scope":"general","platform":"terraform","title":"Terraform – Workspaces for envs","desc":"Separate dev/prod state safely.",
    "buggy":"""# Terminal
$ terraform apply   # using same state for dev & prod
""",
    "options":[
        {"ok":True,"code":"""# Use workspaces
terraform workspace new dev
terraform workspace select dev
terraform apply
""","explanation":"Workspaces or separate backends isolate state between environments."},
        {"ok":False,"code":"""# Use variable only
TF_VAR_env=dev terraform apply
"""},
        {"ok":False,"code":"""# Rely on tags to distinguish environments
terraform apply -var env=dev
"""},
    ]},
}

# =============================
# Git Exercise Bank (10)
# =============================
EX_GIT = {
1: {"platform":"git","title":"Git – Create & switch branch","desc":"Pick the correct command set.",
    "buggy":"""# Goal: create 'feature/api' and switch to it.""",
    "options":[
        {"ok":True,"code":"""git checkout -b feature/api
""","explanation":"`git checkout -b <name>` (or `git switch -c`) creates and checks out the branch."},
        {"ok":False,"code":"""git branch feature/api && git checkout master
"""},
        {"ok":False,"code":"""git switch feature/api
"""},
    ]},
2: {"platform":"git","title":"Git – Track remote branch","desc":"Start tracking upstream properly.",
    "buggy":"""# Goal: track origin/feature/api on local branch.""",
    "options":[
        {"ok":True,"code":"""git checkout -b feature/api origin/feature/api
""","explanation":"Create local from remote to set upstream automatically; or use `--set-upstream-to`."},
        {"ok":False,"code":"""git fetch && git branch origin/feature/api
"""},
        {"ok":False,"code":"""git pull feature/api
"""},
    ]},
3: {"platform":"git","title":"Git – Undo last local commit","desc":"Keep changes, edit message.",
    "buggy":"""# Goal: keep changes staged, edit the message.""",
    "options":[
        {"ok":True,"code":"""git commit --amend
""","explanation":"Amend rewrites the last commit message while keeping staged content."},
        {"ok":False,"code":"""git reset --hard HEAD~1
"""},
        {"ok":False,"code":"""git revert HEAD
"""},
    ]},
4: {"platform":"git","title":"Git – Rebase vs Merge","desc":"Keep linear history.",
    "buggy":"""# Goal: integrate origin/main into current feature as a linear history.""",
    "options":[
        {"ok":True,"code":"""git fetch origin
git rebase origin/main
""","explanation":"Rebase applies your commits on top of the updated base creating a linear history."},
        {"ok":False,"code":"""git merge --no-ff origin/main
"""},
        {"ok":False,"code":"""git cherry-pick origin/main
"""},
    ]},
5: {"platform":"git","title":"Git – Resolve merge conflict","desc":"Pick correct conflict resolution workflow.",
    "buggy":"""# Files have conflict markers after merge.""",
    "options":[
        {"ok":True,"code":"""# edit files to resolve
git add <files>
git commit
""","explanation":"Resolve conflicts in files, stage them, then commit."},
        {"ok":False,"code":"""git merge --abort && git push --force
"""},
        {"ok":False,"code":"""git checkout --theirs . && git commit -m "take theirs"
"""},
    ]},
6: {"platform":"git","title":"Git – Stash & pop","desc":"Temporarily shelve work-in-progress.",
    "buggy":"""# Goal: stash changes, pull, then restore.""",
    "options":[
        {"ok":True,"code":"""git stash push -m "wip"
git pull
git stash pop
""","explanation":"Stash saves changes; pop reapplies and drops the stash."},
        {"ok":False,"code":"""git reset --soft && git pull && git reset --hard
"""},
        {"ok":False,"code":"""git stash clear && git pull && git stash apply
"""},
    ]},
7: {"platform":"git","title":"Git – Remove committed secret","desc":"Purge a secret committed by mistake.",
    "buggy":"""# A secret was committed and pushed.""",
    "options":[
        {"ok":True,"code":"""git filter-repo --path secrets.env --invert-paths
git push --force
""","explanation":"Rewrite history to remove the file, then force-push. (Alternative: BFG Repo-Cleaner)."},
        {"ok":False,"code":"""git rm secrets.env && git commit -m "remove secret" && git push
"""},
        {"ok":False,"code":"""git revert HEAD
"""},
    ]},
8: {"platform":"git","title":"Git – Set upstream after first push","desc":"Connect local branch to remote.",
    "buggy":"""# First push of new branch should set upstream.""",
    "options":[
        {"ok":True,"code":"""git push -u origin feature/api
""","explanation":"`-u/--set-upstream` stores tracking info for future pulls/pushes."},
        {"ok":False,"code":"""git push origin HEAD:refs/heads/feature/api
"""},
        {"ok":False,"code":"""git push --force-with-lease
"""},
    ]},
9: {"platform":"git","title":"Git – Safe force push","desc":"Avoid clobbering others' work.",
    "buggy":"""# You rebased; now push your rewritten branch safely.""",
    "options":[
        {"ok":True,"code":"""git push --force-with-lease
""","explanation":"`--force-with-lease` protects against overwriting others' new work."},
        {"ok":False,"code":"""git push --force
"""},
        {"ok":False,"code":"""git push
"""},
    ]},
10: {"platform":"git","title":"Git – Interactive rebase cleanup","desc":"Squash fixup commits before PR.",
    "buggy":"""# Clean messy history before opening PR.""",
    "options":[
        {"ok":True,"code":"""git rebase -i HEAD~5
""","explanation":"Interactive rebase lets you squash/reword/reorder a range of commits."},
        {"ok":False,"code":"""git merge --squash HEAD~5
"""},
        {"ok":False,"code":"""git reset --hard HEAD~5 && git push --force
"""},
    ]},
}

# ==================================
# Runners (Python executes; others meta)
# ==================================
def run_single_python(idx, time_limit=0.0, pause=False):
    spec = PY_EX[idx]
    _print_header(f"{spec['title']} - {spec.get('desc','Code')}")
    print(spec["buggy"])
    _print_header(f"{spec['title']} - Options")
    opts = spec["options"][:]; random.shuffle(opts)
    labels = list("ABC")[:len(opts)]
    mapping = dict(zip(labels, opts))
    for lab, opt in mapping.items(): print(f"{lab})\n{opt['code']}")
    ans, _ = timed_input(f"Enter choice ({'/'.join(labels)}): ", time_limit)
    chosen = (ans.strip().upper() if ans.strip().upper() in mapping else "INVALID")

    ok = False; chosen_code=""; correct_label=None; correct_code=""
    for lab,opt in mapping.items():
        if opt.get("ok"): correct_label=lab; break
    if chosen in mapping:
        chosen_code = mapping[chosen]["code"]
        ns = {}
        try:
            exec(chosen_code, ns, ns)
            fn = ns.get("main", lambda: None)
            if not callable(fn): fn = lambda: None
            # silence I/O during execution
            import io as _io, sys as _sys, logging as _logging
            buf_out = _io.StringIO(); buf_err = _io.StringIO()
            old_out, old_err = _sys.stdout, _sys.stderr
            old_level = _logging.root.manager.disable
            try:
                _sys.stdout, _sys.stderr = buf_out, buf_err
                _logging.disable(_logging.CRITICAL)
                fn()
            finally:
                _logging.disable(old_level)
                _sys.stdout, _sys.stderr = old_out, old_err
            out = buf_out.getvalue()
            if spec["kind"] == "equals":
                ok = (out == spec["expected"])
            elif spec["kind"] == "lines":
                ok = (out.splitlines(keepends=True) == spec["expected"])
            else:
                ok = False
        except Exception:
            ok = False
    if not ok and correct_label:
        correct_code = mapping[correct_label]["code"]

    if pause:
        input("Press Enter to continue..."); os.system('cls' if os.name=='nt' else 'clear')

    return {
        "section": "python",
        "exercise": idx,
        "title": spec["title"],
        "description": spec.get("desc",""),
        "chosen_label": chosen,
        "ok": ok,
        "correct_label": correct_label or "",
        "buggy_code": spec["buggy"],
        "chosen_code": chosen_code,
        "correct_code_if_wrong": ("" if ok else correct_code),
        "platform": "",
        "explanation": PY_EXPLANATIONS.get(idx, ""),
    }

def _run_options_only(spec, time_limit=0.0, pause=False):
    _print_header(f"{spec['title']} - {spec['desc']}")
    print(spec["buggy"])
    _print_header(f"{spec['title']} - Options")
    opts = spec["options"][:]; random.shuffle(opts)
    labels = list("ABC")[:len(opts)]
    mapping = dict(zip(labels, opts))
    for lab, opt in mapping.items(): print(f"{lab})\n{opt['code']}")
    ans, _ = timed_input(f"Enter choice ({'/'.join(labels)}): ", time_limit)
    chosen = (ans.strip().upper() if ans.strip().upper() in mapping else "INVALID")
    ok = (mapping.get(chosen, {"ok":False})["ok"] if chosen in mapping else False)
    correct_label = next((lab for lab,opt in mapping.items() if opt.get("ok")), "")
    chosen_code = mapping.get(chosen,{}).get("code","")
    correct_code = "" if ok else mapping.get(correct_label,{}).get("code","")
    explanation = "" if ok else next((opt.get("explanation","") for opt in mapping.values() if opt.get("ok")), "")
    if pause:
        input("Press Enter to continue..."); os.system('cls' if os.name=='nt' else 'clear')
    return chosen, ok, correct_label, chosen_code, correct_code, explanation

def run_single_cicd(idx, time_limit=0.0, pause=False):
    spec = EX_CICD[idx]
    chosen, ok, correct_label, chosen_code, correct_code, explanation = _run_options_only(spec, time_limit, pause)
    return {
        "section": "cicd",
        "exercise": idx,
        "title": spec["title"],
        "description": spec["desc"],
        "chosen_label": chosen,
        "ok": ok,
        "correct_label": correct_label,
        "buggy_code": spec["buggy"],
        "chosen_code": chosen_code,
        "correct_code_if_wrong": correct_code,
        "platform": spec["platform"],
        "explanation": explanation,
    }

def run_single_iac(idx, time_limit=0.0, pause=False):
    spec = EX_IAC[idx]
    chosen, ok, correct_label, chosen_code, correct_code, explanation = _run_options_only(spec, time_limit, pause)
    return {
        "section": "iac",
        "exercise": idx,
        "title": spec["title"],
        "description": spec["desc"],
        "chosen_label": chosen,
        "ok": ok,
        "correct_label": correct_label,
        "buggy_code": spec["buggy"],
        "chosen_code": chosen_code,
        "correct_code_if_wrong": correct_code,
        "platform": f"terraform-{spec['scope']}",
        "explanation": explanation,
    }

def run_single_git(idx, time_limit=0.0, pause=False):
    spec = EX_GIT[idx]
    chosen, ok, correct_label, chosen_code, correct_code, explanation = _run_options_only(spec, time_limit, pause)
    return {
        "section": "git",
        "exercise": idx,
        "title": spec["title"],
        "description": spec["desc"],
        "chosen_label": chosen,
        "ok": ok,
        "correct_label": correct_label,
        "buggy_code": spec["buggy"],
        "chosen_code": chosen_code,
        "correct_code_if_wrong": correct_code,
        "platform": spec["platform"],
        "explanation": explanation,
    }

# ===================
# Session & CLI glue
# ===================
def run_session(order_items, time_limit, pause, out_dir, results_file, details_file,
                display_results, name, pdf, pdf_file):
    os.makedirs(out_dir, exist_ok=True)
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ts_fn = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe = sanitize_filename(name)

    sum_csv = os.path.join(out_dir, results_file) if results_file else os.path.join(out_dir, f"combined_results_{safe}_{ts_fn}.csv")
    det_csv = os.path.join(out_dir, details_file) if details_file else os.path.join(out_dir, f"combined_details_{safe}_{ts_fn}.csv")

    total=0; rows=[]; details=[]
    try:
        for (section, idx) in order_items:
            if section == "python":
                r = run_single_python(idx, time_limit, pause)
            elif section == "cicd":
                r = run_single_cicd(idx, time_limit, pause)
            elif section == "iac":
                r = run_single_iac(idx, time_limit, pause)
            else:
                r = run_single_git(idx, time_limit, pause)
            rows.append((section, idx, r["description"], r["chosen_label"], r["ok"]))
            if r["ok"]: total += 1
            details.append(r)
    except KeyboardInterrupt:
        print("\n[Session cancelled by interviewer]")

    # Summary CSV (UTF-8 BOM for Excel)
    with open(sum_csv, "w", newline="", encoding="utf-8-sig") as f:
        w=csv.writer(f)
        w.writerow(["candidate", safe]); w.writerow(["timestamp", ts]); w.writerow([])
        w.writerow(["section","exercise","description","choice","correct"])
        for section, idx, desc, choice, ok in rows:
            w.writerow([section, idx, desc, choice, str(ok)])
        w.writerow([]); w.writerow(["TOTAL_CORRECT", total]); w.writerow(["TOTAL_QUESTIONS", len(rows)])
        pct = (total/len(rows)*100.0) if rows else 0.0
        w.writerow(["PERCENT", f"{pct:.0f}%"])

    # Details CSV (UTF-8 BOM + explanations)
    with open(det_csv, "w", newline="", encoding="utf-8-sig") as f:
        cols=["section","exercise","platform","title","description","chosen_label","chosen_ok","correct_label_if_wrong","buggy_code","chosen_code","correct_code_if_wrong","explanation"]
        w=csv.DictWriter(f, fieldnames=cols); w.writeheader()
        for d in details:
            w.writerow({
                "section": d["section"],
                "exercise": d["exercise"],
                "platform": d.get("platform",""),
                "title": d["title"],
                "description": d["description"],
                "chosen_label": d["chosen_label"],
                "chosen_ok": str(d["ok"]),
                "correct_label_if_wrong": (d["correct_label"] if not d["ok"] else ""),
                "buggy_code": d["buggy_code"],
                "chosen_code": d["chosen_code"],
                "correct_code_if_wrong": d["correct_code_if_wrong"],
                "explanation": d.get("explanation",""),
            })

    pdf_path=None
    if pdf:
        pdf_path = os.path.join(out_dir, pdf_file) if pdf_file else os.path.join(out_dir, f"combined_summary_{safe}_{ts_fn}.pdf")
        lines=[f"{sec.upper():<6} {i:>2}: {'PASS' if ok else 'FAIL'}" for (sec,i,_,_,ok) in rows]
        pct = (total/len(rows)*100.0) if rows else 0.0
        footer=["-"*30, f"Score: {total} / {len(rows)} ({pct:.0f}%)"]
        write_summary_pdf(pdf_path, "Combined Interview - Summary", name, ts, lines, footer)

    if display_results:
        _print_header("Session Summary")
        print(f"Candidate: {name}")
        print(f"Saved CSV: {sum_csv}")
        print(f"Saved details: {det_csv}")
        if pdf and pdf_path: print(f"Saved PDF: {pdf_path}")
        pct = (total/len(rows)*100.0) if rows else 0.0
        print(f"Score: {total} / {len(rows)} ({pct:.0f}%)")
    else:
        print(f"Saved CSV: {sum_csv}")
        print(f"Saved details: {det_csv}")
        if pdf and pdf_path: print(f"Saved PDF: {pdf_path}")

# -----------
# CLI
# -----------
def main():
    p = argparse.ArgumentParser(description="Combined Debugging Interview — Python + CI/CD + IaC + Git")
    p.add_argument("--section", nargs="+", choices=["python","cicd","iac","git","all"], default=["all"],
                   help="which section(s) to include (default: all)")
    g = p.add_mutually_exclusive_group()
    g.add_argument("--all", action="store_true", help="select all in chosen section(s)")
    g.add_argument("--pick-python", nargs="+", type=int, help="specific Python items")
    g.add_argument("--pick-cicd", nargs="+", type=int, help="specific CI/CD items")
    g.add_argument("--pick-iac", nargs="+", type=int, help="specific IaC/Terraform items")
    g.add_argument("--pick-git", nargs="+", type=int, help="specific Git items")
    # Filters
    p.add_argument("--tool", nargs="+", choices=["gitlab","github","jenkins"], help="filter CI/CD by platform(s)")
    p.add_argument("--iac-scope", nargs="+", choices=["general","aws","gcp"], help="filter IaC by scope(s)")
    # General controls
    p.add_argument("--shuffle", action="store_true", help="shuffle final combined order")
    p.add_argument("--limit", type=int, default=0, help="cap total questions after selection/shuffle")
    p.add_argument("--time-limit", type=float, default=0.0, help="seconds allowed to enter a choice (0=off)")
    p.add_argument("--pause", action="store_true", help="pause after each exercise and clear the screen")
    p.add_argument("--output-dir", type=str, default=".", help="directory to save results")
    p.add_argument("--results-file", type=str, default=None, help="explicit summary CSV filename")
    p.add_argument("--details-file", type=str, default=None, help="explicit details CSV filename")
    p.add_argument("--no-display-results", action="store_true", help="suppress final results printout")
    p.add_argument("--name", type=str, default=None, help="candidate name (if omitted, you will be prompted)")
    p.add_argument("--pdf", action="store_true", help="also write one-page PDF summary")
    p.add_argument("--pdf-file", type=str, default=None, help="explicit PDF filename")
    args = p.parse_args()

    name = args.name if args.name else (input("Candidate name: ").strip() or "candidate")

    want_all = ("all" in args.section)
    want_python = want_all or ("python" in args.section)
    want_cicd   = want_all or ("cicd"   in args.section)
    want_iac    = want_all or ("iac"    in args.section)
    want_git    = want_all or ("git"    in args.section)

    pool = []  # list of tuples (section, idx)

    if args.all:
        if want_python: pool += [("python", i) for i in sorted(PY_EX.keys())]
        if want_cicd:
            cicd_keys = sorted(EX_CICD.keys())
            if args.tool:
                wanted = set(args.tool)
                cicd_keys = [k for k in cicd_keys if EX_CICD[k]["platform"] in wanted]
            pool += [("cicd", i) for i in cicd_keys]
        if want_iac:
            iac_keys = sorted(EX_IAC.keys())
            if args.iac_scope:
                wanted = set(args.iac_scope)
                iac_keys = [k for k in iac_keys if EX_IAC[k]["scope"] in wanted]
            pool += [("iac", i) for i in iac_keys]
        if want_git:
            pool += [("git", i) for i in sorted(EX_GIT.keys())]
    elif args.pick_python or args.pick_cicd or args.pick_iac or args.pick_git:
        if want_python and args.pick_python:
            pool += [("python", i) for i in args.pick_python if i in PY_EX]
        if want_cicd and args.pick_cicd:
            cicd_sel = [i for i in args.pick_cicd if i in EX_CICD]
            if args.tool:
                wanted = set(args.tool)
                cicd_sel = [i for i in cicd_sel if EX_CICD[i]["platform"] in wanted]
            pool += [("cicd", i) for i in cicd_sel]
        if want_iac and args.pick_iac:
            iac_sel = [i for i in args.pick_iac if i in EX_IAC]
            if args.iac_scope:
                wanted = set(args.iac_scope)
                iac_sel = [i for i in iac_sel if EX_IAC[i]["scope"] in wanted]
            pool += [("iac", i) for i in iac_sel]
        if want_git and args.pick_git:
            pool += [("git", i) for i in args.pick_git if i in EX_GIT]
        if not pool:
            print("No valid selections in --pick-*"); return
    else:
        # Interactive single-pick per requested section
        if want_python:
            print("Available Python items:", ", ".join(str(k) for k in sorted(PY_EX.keys())))
            while True:
                s = input("Enter Python exercise number: ").strip()
                if s.isdigit() and int(s) in PY_EX:
                    pool.append(("python", int(s))); break
                print("Please enter a valid number.")
        if want_cicd:
            cicd_keys = sorted(EX_CICD.keys())
            if args.tool:
                wanted = set(args.tool)
                cicd_keys = [k for k in cicd_keys if EX_CICD[k]["platform"] in wanted]
            print("Available CI/CD items:", ", ".join(str(k) for k in cicd_keys))
            while True:
                s = input("Enter CI/CD exercise number: ").strip()
                if s.isdigit() and int(s) in cicd_keys:
                    pool.append(("cicd", int(s))); break
                print("Please enter a valid number.")
        if want_iac:
            iac_keys = sorted(EX_IAC.keys())
            if args.iac_scope:
                wanted = set(args.iac_scope)
                iac_keys = [k for k in iac_keys if EX_IAC[k]["scope"] in wanted]
            print("Available IaC items:", ", ".join(str(k) for k in iac_keys))
            while True:
                s = input("Enter IaC exercise number: ").strip()
                if s.isdigit() and int(s) in iac_keys:
                    pool.append(("iac", int(s))); break
                print("Please enter a valid number.")
        if want_git:
            print("Available Git items:", ", ".join(str(k) for k in sorted(EX_GIT.keys())))
            while True:
                s = input("Enter Git exercise number: ").strip()
                if s.isdigit() and int(s) in EX_GIT:
                    pool.append(("git", int(s))); break
                print("Please enter a valid number.")

    if args.shuffle:
        random.shuffle(pool)
    if args.limit and args.limit < len(pool):
        pool = pool[:args.limit]

    os.system('cls' if os.name=='nt' else 'clear')

    try:
        run_session(pool, args.time_limit, args.pause, args.output_dir,
                    args.results_file, args.details_file,
                    not args.no_display_results, name, args.pdf, args.pdf_file)
    except KeyboardInterrupt:
        print("\n[Session cancelled] Results (so far) have been written.")

if __name__ == "__main__":
    main()
