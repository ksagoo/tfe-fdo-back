#!/usr/bin/env python
# ============================================================
#  Akamai Entitlement Validator (Level 2)
# ============================================================
#  Purpose:
#    Validates that a given Access Group is authorized for a
#    target FQDN or certificate based on:
#      • CPS enrollment ownership
#      • AppSec configuration mappings
#      • PAPI property hostname mappings
#
#  Notes:
#    - Uses region-based contract/group mapping (REGION_SETTINGS)
#    - Performs safe GET calls (no modification)
#    - Dumps all API JSON responses under ./output/
#    - Returns SUCCESS if any system shows valid ownership
# ============================================================

import json
import os
import sys
import time
import argparse
import traceback
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc


# ============================================================
#  Region Settings (Contract + Group lookup)
# ============================================================
REGION_SETTINGS = {
    "DEV":  {"contractId": "ctr_1-ABCD", "groupId": "grp_272005"},
    "APAC": {"contractId": "ctr_1-EFGH", "groupId": "grp_272006"},
    "EMEA": {"contractId": "ctr_1-IJKL", "groupId": "grp_272007"},
    "AMER": {"contractId": "ctr_1-MNOP", "groupId": "grp_272008"},
}


# ============================================================
#  Session Setup
# ============================================================
def setup_session(section, edgerc_file="~/.edgerc"):
    edgerc_path = os.path.expanduser(edgerc_file)
    rc = EdgeRc(edgerc_path)
    base_url = f"https://{rc.get(section, 'host')}"
    session = requests.Session()
    session.auth = EdgeGridAuth.from_edgerc(rc, section)
    session.headers.update({
        "User-Agent": "akamai-entitlement-validator",
        "Accept": "application/json"
    })
    return session, base_url


# ============================================================
#  Core Validation Logic
# ============================================================
def validate_entitlement(section, access_group, fqdn, dry_run=False, debug=False, json_only=False):
    result = {
        "section": section,
        "access_group": access_group,
        "fqdn": fqdn,
        "status": "FAILURE",
        "cps": False,
        "appsec": False,
        "papi": False,
    }

    try:
        print("\n============================================================")
        print(" Akamai Entitlement Validator Suite")
        print("============================================================")
        print(f"Section:        {section}")
        print(f"Access Group:   {access_group}")
        print(f"FQDN:           {fqdn}")
        print("------------------------------------------------------------")

        os.makedirs("output", exist_ok=True)
        region = REGION_SETTINGS.get(section.upper())
        if not region:
            print(f"[ERROR] Invalid section '{section}' — must match REGION_SETTINGS.")
            return result

        contract_id = region["contractId"]
        group_id = region["groupId"]

        # Initialize EdgeGrid sessions for each product
        session_cps, base_cps = setup_session("cps")
        session_appsec, base_appsec = setup_session("appsec")
        session_papi, base_papi = setup_session("papi")

        # ------------------------------------------------------------
        # 1. CPS Lookup
        # ------------------------------------------------------------
        url_cps = f"{base_cps}/cps/v2/enrollments?contractId={contract_id}"
        print(f"[CPS] {url_cps}")
        if not dry_run:
            try:
                resp = session_cps.get(url_cps, timeout=(10, 60))
                with open("output/cps_raw.json", "w") as f:
                    f.write(resp.text)
                if resp.status_code == 200:
                    data = resp.json()
                    if fqdn in json.dumps(data):
                        result["cps"] = True
                        print("[CPS] Match found.")
                    else:
                        print("[CPS] No match for FQDN.")
                else:
                    print(f"[FAILURE] CPS request failed ({resp.status_code})")
            except Exception as e:
                print(f"[ERROR] CPS lookup error: {e}")

        # ------------------------------------------------------------
        # 2. AppSec Lookup
        # ------------------------------------------------------------
        url_appsec = f"{base_appsec}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}"
        print(f"[AppSec] {url_appsec}")
        if not dry_run:
            try:
                resp = session_appsec.get(url_appsec, timeout=(10, 60))
                with open("output/appsec_raw.json", "w") as f:
                    f.write(resp.text)
                if resp.status_code == 200:
                    data = resp.json()
                    if access_group in json.dumps(data) or fqdn in json.dumps(data):
                        result["appsec"] = True
                        print("[AppSec] Access group or FQDN match found.")
                    else:
                        print("[AppSec] No match found.")
                else:
                    print(f"[FAILURE] AppSec request failed ({resp.status_code})")
            except Exception as e:
                print(f"[ERROR] AppSec lookup error: {e}")

        # ------------------------------------------------------------
        # 3. PAPI Lookup (Dual Endpoint)
        # ------------------------------------------------------------
        print("[PAPI] Checking hostname mapping...")

        papi_found = False
        # Primary: Modern /hostnames endpoint
        url_papi_primary = (
            f"{base_papi}/papi/v1/hostnames?"
            f"hostname={fqdn}&contractId={contract_id}&groupId={group_id}&limit=100"
        )
        print(f"[PAPI-primary] {url_papi_primary}")

        try:
            resp = session_papi.get(url_papi_primary, timeout=(10, 60))
            with open("output/papi_hostnames_raw.json", "w") as f:
                f.write(resp.text)
            if resp.status_code == 200:
                data = resp.json()
                if fqdn in json.dumps(data):
                    papi_found = True
                    result["papi"] = True
                    print("[PAPI] Match found via /hostnames endpoint.")
            else:
                print(f"[WARN] /hostnames lookup failed ({resp.status_code})")
        except Exception as e:
            print(f"[WARN] /hostnames API error: {e}")

        # Fallback: Legacy /search/find-by-value
        if not papi_found:
            url_papi_fallback = (
                f"{base_papi}/papi/v1/search/find-by-value?"
                f"value={fqdn}&contractId={contract_id}&groupId={group_id}"
            )
            print(f"[PAPI-fallback] {url_papi_fallback}")
            try:
                resp = session_papi.get(url_papi_fallback, timeout=(10, 60))
                with open("output/papi_legacy_raw.json", "w") as f:
                    f.write(resp.text)
                if resp.status_code == 200:
                    data = resp.json()
                    if fqdn in json.dumps(data):
                        result["papi"] = True
                        print("[PAPI] Match found via /search/find-by-value fallback.")
                else:
                    print(f"[WARN] /search/find-by-value failed ({resp.status_code})")
            except Exception as e:
                print(f"[WARN] /search/find-by-value API error: {e}")

        # ------------------------------------------------------------
        #  Final Result
        # ------------------------------------------------------------
        result["status"] = (
            "SUCCESS" if (result["cps"] or result["appsec"] or result["papi"]) else "FAILURE"
        )

        print("------------------------------------------------------------")
        print(json.dumps(result, indent=2))
        print("------------------------------------------------------------")
        print(f"[INFO] Validation completed with status: {result['status']}")
        print("[INFO] Summary written to output/entitlement_summary.json")

        with open("output/entitlement_summary.json", "w") as f:
            json.dump(result, f, indent=2)

        return result

    except Exception as e:
        print(f"[ERROR] Exception during validation: {e}")
        traceback.print_exc()
        result["status"] = "ERROR"
        return result


# ============================================================
#  CLI Entry
# ============================================================
def parse_args():
    parser = argparse.ArgumentParser(description="Akamai Entitlement Validator (Level 2)")
    parser.add_argument("--section", required=True, help="Region section (e.g. DEV, APAC, EMEA, AMER)")
    parser.add_argument("--access-group", required=True, help="Akamai Access Group name")
    parser.add_argument("--fqdn", required=True, help="Target FQDN or certificate hostname")
    parser.add_argument("--dry-run", action="store_true", help="Simulate validation without API calls")
    parser.add_argument("--debug", action="store_true", help="Enable verbose debug logging")
    parser.add_argument("--json-only", action="store_true", help="Output JSON only (no text)")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    result = validate_entitlement(
        section=args.section,
        access_group=args.access_group,
        fqdn=args.fqdn,
        dry_run=args.dry_run,
        debug=args.debug,
        json_only=args.json_only,
    )
    sys.exit(0 if result["status"] == "SUCCESS" else 1)
