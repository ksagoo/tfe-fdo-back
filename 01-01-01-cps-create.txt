def check_appsec(session, base_url, fqdn, contract_id, group_id, access_group, debug=False):
    """
    Enhanced AppSec entitlement lookup:
    Full match if fqdn in productionHostnames AND access_group substring in config name
    """
    import json, re, traceback, os

    def sanitize_filename(name):
        return re.sub(r"[^A-Za-z0-9_.-]+", "_", str(name))

    def to_lower(v):
        return str(v).lower().strip() if isinstance(v, (str, int)) else ""

    fqdn_l = to_lower(fqdn)
    ag_l = to_lower(access_group)

    url = f"{base_url}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}"
    print(f"[INFO] AppSec lookup: {url}")

    result = {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}

    try:
        resp = session.get(url, timeout=30)

        if debug:
            os.makedirs("output", exist_ok=True)
            with open(f"output/raw_appsec_list_{sanitize_filename(fqdn)}.json", "w") as f:
                f.write(resp.text)

        if resp.status_code != 200:
            print(f"[ERROR] AppSec lookup failed: HTTP {resp.status_code}")
            return result

        data = resp.json()
        configs = data.get("configurations", [])
        print(f"[DEBUG] AppSec configs returned: {len(configs)}")

        for cfg in configs:
            cfg_id = cfg.get("id")
            cfg_name = cfg.get("name", "")
            name_l = to_lower(cfg_name)

            # Check if access group name substring is in config name
            ag_match = ag_l in name_l

            cfg_url = f"{base_url}/appsec/v1/configs/{cfg_id}?includeHostnames=true"
            cfg_resp = session.get(cfg_url, timeout=30)

            if debug:
                with open(f"output/raw_appsec_cfg_{cfg_id}_{sanitize_filename(fqdn)}.json", "w") as f:
                    f.write(cfg_resp.text)

            if cfg_resp.status_code != 200:
                continue

            cfg_data = cfg_resp.json()
            hostnames = [to_lower(h) for h in cfg_data.get("productionHostnames", [])]

            fqdn_match = fqdn_l in hostnames

            if fqdn_match and ag_match:
                result["matches"].append({
                    "id": cfg_id,
                    "name": cfg_name,
                    "matchType": "full",
                    "reason": "fqdn_and_access_group_in_same_config"
                })
                result["found"] = True
                print(f"[DEBUG] FULL match: {cfg_name}")
            elif fqdn_match or ag_match:
                reason = "fqdn_only" if fqdn_match else "access_group_only"
                result["partial_matches"].append({
                    "id": cfg_id,
                    "name": cfg_name,
                    "matchType": "partial",
                    "reason": reason
                })
                result["partial"] = True
                print(f"[DEBUG] PARTIAL match: {cfg_name} ({reason})")

        if result["found"]:
            print("[RESULT] AppSec: FOUND")
        elif result["partial"]:
            print("[RESULT] AppSec: PARTIAL MATCH")
        else:
            print("[RESULT] AppSec: NOT FOUND")

        return result

    except Exception as e:
        print(f"[ERROR] AppSec check failed: {e}")
        if debug:
            traceback.print_exc()
        return result
