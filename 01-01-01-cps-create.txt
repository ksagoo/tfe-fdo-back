# ==============================================================
# Diagnostic AppSec Check (forces JSON dump + deeper insight)
# ==============================================================

import json
import os

def check_appsec(session, base_url, fqdn, region, contract_id, group_id, access_group, debug=False):
    def safe_lower(value):
        if isinstance(value, str):
            return value.lower().strip()
        return str(value).lower().strip() if value else ""

    result = {
        "found": False,
        "partial": False,
        "url": f"{base_url}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}",
        "matches": [],
        "partial_matches": []
    }

    try:
        url = result["url"]
        print(f"[INFO] AppSec lookup: {url}")
        resp = session.get(url, timeout=30)

        # Always write the raw HTTP response in debug mode
        if debug:
            os.makedirs("output", exist_ok=True)
            with open(f"output/debug_appsec_raw_{fqdn.replace('.', '_')}.txt", "w", encoding="utf-8") as f:
                f.write(resp.text)
            print(f"[DEBUG] Raw AppSec HTTP response saved to output/debug_appsec_raw_{fqdn.replace('.', '_')}.txt")

        if resp.status_code == 403:
            print("[WARN] AppSec access denied (HTTP 403): Insufficient permissions.")
            result["partial_matches"].append({"reason": "access_denied"})
            return result

        if resp.status_code != 200:
            print(f"[ERROR] AppSec lookup failed with HTTP {resp.status_code}")
            return result

        try:
            data = resp.json()
        except Exception as e:
            print(f"[ERROR] AppSec JSON decode failed: {e}")
            if debug:
                with open(f"output/debug_appsec_json_error_{fqdn.replace('.', '_')}.txt", "w", encoding="utf-8") as f:
                    f.write(resp.text[:400])
            return result

        # Always dump parsed JSON to file for inspection
        if debug:
            _write_debug_json(fqdn, "appsec", data)

        configs = data.get("configurations", [])
        print(f"[DEBUG] AppSec configs returned: {len(configs)}")

        fqdn_lower = safe_lower(fqdn)
        matched_any = False

        # show a preview of the first few configs
        if debug and configs:
            for cfg in configs[:3]:
                print(f"[DEBUG] Config '{cfg.get('name')}' has {len(cfg.get('productionHostnames', []))} hostnames")
                if cfg.get("productionHostnames"):
                    print(f"[DEBUG] → sample hostnames: {cfg['productionHostnames'][:5]}")

        for cfg in configs:
            hostnames = cfg.get("productionHostnames", [])
            if not isinstance(hostnames, list):
                continue

            for hn in hostnames:
                hn_lower = safe_lower(hn)
                if fqdn_lower == hn_lower:
                    result["matches"].append({
                        "id": cfg.get("id"),
                        "hostname": hn,
                        "matchType": "full"
                    })
                    result["found"] = True
                    matched_any = True
                elif fqdn_lower in hn_lower:
                    result["partial_matches"].append({
                        "id": cfg.get("id"),
                        "hostname": hn,
                        "matchType": "partial"
                    })
                    result["partial"] = True
                    matched_any = True

        print(f"[RESULT] AppSec: {'FOUND' if result['found'] else ('PARTIAL MATCH' if result['partial'] else 'NOT FOUND')}")

        if debug and not matched_any:
            print("[DEBUG] No hostname matches found — check raw JSON output for structure differences.")

        return result

    except Exception as e:
        print(f"[ERROR] AppSec lookup failed: {e}")
        if debug:
            import traceback
            traceback.print_exc()
        return result


# ==============================================================
def _write_debug_json(fqdn, category, data):
    os.makedirs("output", exist_ok=True)
    safe_name = fqdn.replace(".", "_")
    file_path = f"output/debug_{category}_{safe_name}.json"
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)
        print(f"[DEBUG] Parsed {category} JSON saved to {file_path}")
    except Exception as e:
        print(f"[WARN] Could not write {category} debug JSON: {e}")
