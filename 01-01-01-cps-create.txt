#!/bin/bash
# =====================================================================
#  Akamai Entitlement Validator - Level 2 Test Suite
# =====================================================================
#  Description:
#    Executes entitlement validation checks for one or more FQDNs
#    and Akamai Access Groups, verifying CPS/AppSec/PAPI associations.
#
#  Usage Examples:
#    ./test_entitlement_check.sh --section APAC --fqdn login.hsbc.com --access-group AppSec
#    ./test_entitlement_check.sh --section EMEA --fqdn portal.hsbc.com --access-group Security
#    ./test_entitlement_check.sh --section APAC --list domains.txt
#
#  Optional Flags:
#    --dry-run              Simulate (skip API calls)
#    --debug                Enable verbose output
#    --list <file>          Run batch validation (file with fqdn,access_group per line)
#
#  Output:
#    ./output/raw_cps.json
#    ./output/raw_appsec.json
#    ./output/raw_papi.json
#    ./output/entitlement_summary_<fqdn>.json
# =====================================================================

usage() { grep '^#' "$0" | sed 's/^# \{0,1\}//'; exit 0; }

# -----------------------------------------------------
# Defaults
# -----------------------------------------------------
SECTION="DEV"
ACCESS_GROUP=""
FQDN=""
DRY_RUN=false
DEBUG=false
LIST_FILE=""
OUTPUT_DIR="output"
mkdir -p "$OUTPUT_DIR"
TOTAL=0; PASS=0; FAIL=0

# -----------------------------------------------------
# Parse CLI args
# -----------------------------------------------------
while [[ $# -gt 0 ]]; do
  case $1 in
    --section) SECTION="$2"; shift 2;;
    --access-group) ACCESS_GROUP="$2"; shift 2;;
    --fqdn) FQDN="$2"; shift 2;;
    --list) LIST_FILE="$2"; shift 2;;
    --dry-run) DRY_RUN=true; shift;;
    --debug) DEBUG=true; shift;;
    -h|--help) usage;;
    *) echo "Unknown option: $1"; usage;;
  esac
done

# -----------------------------------------------------
# Helper to run validation
# -----------------------------------------------------
run_check() {
  local fqdn="$1"
  local group="$2"

  if [[ -z "$fqdn" || -z "$group" ]]; then
    echo "[WARN] Skipping empty entry (fqdn/group missing)"
    return
  fi

  echo "====================================================="
  echo "[CHECK] FQDN: $fqdn | Access Group: $group"
  echo "====================================================="

  local cmd="python akamai_entitlement_validator.py \
    --section ${SECTION} \
    --access-group ${group} \
    --fqdn ${fqdn}"

  [[ "$DRY_RUN" == true ]] && cmd="$cmd --dry-run"
  [[ "$DEBUG" == true ]] && cmd="$cmd --debug"

  echo "[INFO] Running: $cmd"
  local start_time=$(date +%s)

  set +e
  eval $cmd >>"$OUTPUT_DIR/entitlement_test.log" 2>&1
  local status=$?
  set -e

  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  TOTAL=$((TOTAL + 1))

  # Detect pipeline result
  local result_line
  result_line=$(grep "PIPELINE_RESULT=" "$OUTPUT_DIR/entitlement_test.log" | tail -n 1)
  if echo "$result_line" | grep -q "AUTHORIZED"; then
    echo "[RESULT] AUTHORIZED (${duration}s)"
    PASS=$((PASS + 1))
  else
    echo "[RESULT] UNAUTHORIZED (${duration}s)"
    FAIL=$((FAIL + 1))
  fi

  echo "-----------------------------------------------------"
}

# -----------------------------------------------------
# Run in single or batch mode
# -----------------------------------------------------
echo "====================================================="
echo " Akamai Entitlement Validation - Level 2 Suite"
echo "====================================================="
echo " Section:        ${SECTION}"
[[ -n "$LIST_FILE" ]] && echo " Mode:           Batch (${LIST_FILE})" || echo " Mode:           Single"
echo " Dry-Run:        ${DRY_RUN}"
echo " Debug:          ${DEBUG}"
echo "-----------------------------------------------------"

if [[ -n "$LIST_FILE" ]]; then
  while IFS=',' read -r fqdn group; do
    fqdn=$(echo "$fqdn" | xargs)
    group=$(echo "$group" | xargs)
    run_check "$fqdn" "$group"
  done < "$LIST_FILE"
else
  run_check "$FQDN" "$ACCESS_GROUP"
fi

# -----------------------------------------------------
# Summary
# -----------------------------------------------------
echo "====================================================="
echo " Entitlement Validation Summary"
echo "====================================================="
echo " Total Checks : $TOTAL"
echo " Authorized   : $PASS"
echo " Unauthorized : $FAIL"
echo "-----------------------------------------------------"

if [[ $FAIL -eq 0 ]]; then
  PIPELINE_RESULT="AUTHORIZED"
else
  PIPELINE_RESULT="UNAUTHORIZED"
fi

echo "PIPELINE_RESULT=$PIPELINE_RESULT"
echo "====================================================="
echo " Validation Suite Completed ($PIPELINE_RESULT)"
echo "====================================================="
