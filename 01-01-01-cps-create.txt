def reverse_fqdn_lookup(session, base_url, fqdn, debug=False):
    """
    Do a reverse PAPI lookup for an FQDN and, if found, return/cprint:
      - groupId
      - propertyName
      - accessGroupName (resolved from groupId)
      - strippedPropertyName (remove 'SD-' prefix and '-Prod'/'-Non-Prod' suffix)

    Returns a dict like:
      {
        "found": True/False,
        "groupId": "...",
        "propertyName": "...",
        "accessGroupName": "...",
        "strippedPropertyName": "...",
        "matchType": "full" | "partial" | "none"
      }
    """
    def sanitize_filename(name: str) -> str:
        import re
        return re.sub(r"[^a-zA-Z0-9._-]+", "_", name)

    def get_group_name_by_id(session, base_url, group_id):
        # Best-effort group name resolver via /papi/v1/groups
        try:
            url = f"{base_url}/papi/v1/groups"
            r = session.get(url, timeout=20)
            if r.status_code != 200:
                return "UNKNOWN"
            data = r.json() or {}
            groups = (data.get("groups") or {}).get("items", [])
            for g in groups:
                if g.get("groupId") == group_id or g.get("groupId") == group_id.replace("grp_", ""):
                    return g.get("groupName") or "UNKNOWN"
            return "UNKNOWN"
        except Exception:
            return "UNKNOWN"

    result = {
        "found": False,
        "groupId": None,
        "propertyName": None,
        "accessGroupName": None,
        "strippedPropertyName": None,
        "matchType": "none",
    }

    fqdn_l = fqdn.lower().strip()
    url = f"{base_url}/papi/v1/hostnames?search={fqdn}"
    print("\n==== Starting Reverse FQDN Lookup ====")
    print(f"[INFO] Performing PAPI reverse lookup: {url}")

    try:
        resp = session.get(url, timeout=30)

        if debug:
            with open(f"output/reverse_lookup_{sanitize_filename(fqdn)}.json", "w", encoding="utf-8") as f:
                f.write(resp.text)

        if resp.status_code != 200:
            print(f"[ERROR] PAPI reverse lookup failed: HTTP {resp.status_code}")
            return result

        data = resp.json() or {}

        # Accept both shapes:
        # - {"items":[ ... host entries ... ]}
        # - {"hostnames":[ ... host entries ... ]}
        host_entries = []
        if isinstance(data, list):
            host_entries = data
        else:
            host_entries = data.get("items") or data.get("hostnames") or []

        if debug:
            print(f"[DEBUG] Total host entries returned: {len(host_entries)}")

        # Scan for a full match first
        full_hit = None
        partial_hit = None

        for entry in host_entries:
            if not isinstance(entry, dict):
                continue

            cname_from = str(entry.get("cnameFrom", "")).lower()
            cname_to = str(entry.get("cnameTo", "")).lower()
            edge_hostname = str(entry.get("edgeHostname", "")).lower()

            # FULL match (exact)
            if fqdn_l in (cname_from, cname_to, edge_hostname):
                full_hit = entry
                break

            # PARTIAL match (substring somewhere)
            if (fqdn_l and (fqdn_l in cname_from or fqdn_l in cname_to or fqdn_l in edge_hostname)):
                # save the first partial if we don't find a full
                if partial_hit is None:
                    partial_hit = entry

        hit = full_hit or partial_hit
        if not hit:
            print(f"[WARN] No results found for {fqdn}")
            print("==== Reverse Lookup Complete ====\n")
            return result

        group_id = hit.get("groupId")
        prop_name = hit.get("propertyName") or "UNKNOWN"

        # Resolve group name
        access_group_name = get_group_name_by_id(session, base_url, group_id) if group_id else "UNKNOWN"

        # Clean up property name
        stripped = prop_name
        if stripped.startswith("SD-"):
            stripped = stripped[3:]
        for suffix in ("-Non-Prod", "-Prod"):
            if stripped.endswith(suffix):
                stripped = stripped[: -len(suffix)]

        result.update({
            "found": True,
            "groupId": group_id,
            "propertyName": prop_name,
            "accessGroupName": access_group_name,
            "strippedPropertyName": stripped,
            "matchType": "full" if full_hit else "partial",
        })

        print("---- Reverse FQDN Lookup Result ----")
        print(f"[INFO] FQDN: {fqdn}")
        print(f"[INFO] Group ID: {group_id}")
        print(f"[INFO] Access Group Name: {access_group_name}")
        print(f"[INFO] Property Name: {prop_name}")
        print(f"[INFO] Stripped Property Name: {stripped}")
        print("==== Reverse Lookup Complete ====\n")

        return result

    except Exception as e:
        print(f"[ERROR] reverse_fqdn_lookup failed: {e}")
        return result
