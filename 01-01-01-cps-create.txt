#!/usr/bin/env python3
"""
================================================================================
Akamai FQDN Access Group Lookup Utility (Property-Level)
================================================================================
Description:
    Used during certificate discovery or automation processes where only
    an FQDN is available. This performs a full PAPI reverse lookup to return
    the *property-level* Access Group and Group ID.

Usage:
    python akamai_fqdn_access_group_lookup.py --section <edgerc_section> --fqdn <hostname> [--json]

Example:
    python akamai_fqdn_access_group_lookup.py --section dev --fqdn epspos-dev-059test.hsbc.com.hk

Output (text mode):
    == Access Group Lookup Result ==
    FQDN: epspos-dev-059test.hsbc.com.hk
    Access Group: ServiceNow-itilUser
    Group ID: grp_272095

Output (JSON mode):
    {
      "fqdn": "epspos-dev-059test.hsbc.com.hk",
      "accessGroupName": "ServiceNow-itilUser",
      "groupId": "grp_272095"
    }
================================================================================
"""

import os
import sys
import json
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth
from configparser import ConfigParser


# ==============================================================================
# Setup Akamai EdgeGrid session
# ==============================================================================
def setup_session(section):
    edgerc = os.path.join(os.path.expanduser("~"), ".edgerc")
    parser = ConfigParser()
    parser.read(edgerc)

    if not parser.has_section(section):
        print(f"[ERROR] Missing section [{section}] in {edgerc}")
        sys.exit(1)

    base_url = f"https://{parser.get(section, 'host')}"
    session = requests.Session()
    session.auth = EdgeGridAuth(
        client_token=parser.get(section, "client_token"),
        client_secret=parser.get(section, "client_secret"),
        access_token=parser.get(section, "access_token")
    )
    session.headers.update({"Accept": "application/json"})
    return session, base_url


# ==============================================================================
# Helper: Get group name by ID
# ==============================================================================
def get_group_name_by_id(session, base_url, group_id):
    try:
        resp = session.get(f"{base_url}/papi/v1/groups", timeout=20)
        if resp.status_code != 200:
            return "UNKNOWN"
        for item in resp.json().get("groups", {}).get("items", []):
            if item.get("groupId") == group_id:
                return item.get("groupName", "UNKNOWN")
    except Exception:
        pass
    return "UNKNOWN"


# ==============================================================================
# Full reverse lookup for property-level group
# ==============================================================================
def reverse_fqdn_lookup(session, base_url, fqdn):
    fqdn = fqdn.lower()
    url = f"{base_url}/papi/v1/hostnames?search={fqdn}"

    try:
        resp = session.get(url, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] HTTP {resp.status_code} during lookup for {fqdn}")
            return None
        data = resp.json()
    except Exception as e:
        print(f"[ERROR] Exception during lookup: {e}")
        return None

    host_entries = (
        data.get("items")
        or data.get("hostnames", {}).get("items", [])
        or data.get("hostnames", [])
    )

    for entry in host_entries:
        cname_from = str(entry.get("cnameFrom", "")).lower()
        cname_to = str(entry.get("cnameTo", "")).lower()
        edge = str(entry.get("edgeHostname", "")).lower()
        staging = str(entry.get("stagingEdgeHostname", "")).lower()

        if fqdn not in (cname_from, cname_to, edge, staging):
            continue

        # Step 1: Extract property info
        property_id = entry.get("propertyId")
        contract_id = entry.get("contractId")
        group_id = entry.get("groupId")

        if not property_id or not contract_id or not group_id:
            continue

        # Step 2: Query property metadata to get true property-level groupId
        prop_url = f"{base_url}/papi/v1/properties/{property_id}?contractId={contract_id}&groupId={group_id}"
        try:
            prop_resp = session.get(prop_url, timeout=20)
            if prop_resp.status_code == 200:
                prop_data = prop_resp.json()
                prop_items = prop_data.get("properties", {}).get("items", [])
                if prop_items:
                    real_group_id = prop_items[0].get("groupId", group_id)
                else:
                    real_group_id = group_id
            else:
                real_group_id = group_id
        except Exception:
            real_group_id = group_id

        # Step 3: Get friendly Access Group name
        access_group_name = get_group_name_by_id(session, base_url, real_group_id)

        return {
            "fqdn": fqdn,
            "groupId": real_group_id,
            "accessGroupName": access_group_name
        }

    return None


# ==============================================================================
# Main
# ==============================================================================
def main():
    parser = argparse.ArgumentParser(description="Akamai FQDN â†’ Access Group lookup tool")
    parser.add_argument("--section", required=True, help="Section from .edgerc")
    parser.add_argument("--fqdn", required=True, help="Fully qualified domain name to look up")
    parser.add_argument("--json", action="store_true", help="Output results in JSON format for CI/CD pipelines")
    args = parser.parse_args()

    session, base_url = setup_session(args.section)
    result = reverse_fqdn_lookup(session, base_url, args.fqdn)

    if not result:
        print(f"[WARN] No Access Group found for {args.fqdn}")
        sys.exit(1)

    if args.json:
        print(json.dumps(result, indent=2))
    else:
        print("================================================================================")
        print("Akamai FQDN Access Group Lookup Utility")
        print("================================================================================")
        print(f"Section: {args.section}")
        print(f"FQDN: {args.fqdn}\n")
        print("== Access Group Lookup Result ==")
        print(f"FQDN: {result['fqdn']}")
        print(f"Access Group: {result['accessGroupName']}")
        print(f"Group ID: {result['groupId']}")
        print("================================================================================")


if __name__ == "__main__":
    main()
