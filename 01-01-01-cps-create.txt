# ==============================================================
# AppSec Check â€” Strict Matching Version
# ==============================================================
def check_appsec(session, base_url, fqdn, region, contract_id, group_id, access_group, debug=False):
    """
    Validates AppSec configuration entitlements via /appsec/v1/configs.

    A Full Match occurs only when BOTH:
      - The FQDN exists in the same configuration's productionHostnames array
      - The Access Group substring appears in that same configuration's name

    A Partial Match occurs when:
      - The access group appears in the name but no fqdn in productionHostnames, OR
      - The fqdn appears in productionHostnames but the access group isn't in the name

    Always writes raw JSON output to 'output/appsec_raw.json' when --debug is set.
    """

    import traceback

    url = f"{base_url}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}"
    print(f"[INFO] AppSec lookup: {url}")

    result = {
        "found": False,
        "partial": False,
        "url": url,
        "matches": [],
        "partial_matches": []
    }

    try:
        resp = session.get(url, timeout=30)

        # --- Error Handling ---
        if resp.status_code == 403:
            print("[WARN] AppSec access denied (HTTP 403)")
            result["partial_matches"].append({
                "matchType": "none",
                "reason": "access_denied"
            })
            return result

        if resp.status_code != 200:
            print(f"[ERROR] AppSec lookup failed (HTTP {resp.status_code})")
            if debug:
                os.makedirs("output", exist_ok=True)
                with open("output/appsec_raw.json", "w") as f:
                    f.write(resp.text)
            return result

        # --- Parse Response JSON ---
        try:
            data = resp.json()
        except Exception as e:
            print(f"[ERROR] AppSec JSON decode failed: {e}")
            if debug:
                os.makedirs("output", exist_ok=True)
                with open("output/appsec_raw.json", "w") as f:
                    f.write(resp.text[:2000])
            return result

        configs = data.get("configurations", [])
        fqdn_lower = fqdn.lower()
        access_lower = access_group.lower()

        for cfg in configs:
            name = str(cfg.get("name", "")).lower()
            hostnames = [h.lower() for h in cfg.get("productionHostnames", [])]
            cfg_id = cfg.get("id")
            match_logged = False

            # --- Full Match: fqdn + access group in SAME config
            if access_lower in name and fqdn_lower in hostnames:
                result["matches"].append({
                    "id": cfg_id,
                    "name": cfg.get("name"),
                    "matchType": "full",
                    "reason": "fqdn_and_accessgroup_match",
                    "productionVersion": cfg.get("productionVersion"),
                    "latestVersion": cfg.get("latestVersion")
                })
                result["found"] = True
                match_logged = True

            # --- Partial: access group in name only
            elif access_lower in name and fqdn_lower not in hostnames:
                result["partial_matches"].append({
                    "id": cfg_id,
                    "name": cfg.get("name"),
                    "matchType": "partial",
                    "reason": "access_group_only"
                })
                result["partial"] = True
                match_logged = True

            # --- Partial: fqdn in hostnames only
            elif fqdn_lower in hostnames and access_lower not in name:
                result["partial_matches"].append({
                    "id": cfg_id,
                    "name": cfg.get("name"),
                    "matchType": "partial",
                    "reason": "fqdn_only"
                })
                result["partial"] = True
                match_logged = True

            if debug and match_logged:
                print(f"[DEBUG] AppSec config {cfg_id}: {cfg.get('name')}")

        # --- Always write raw data if debug enabled ---
        if debug:
            os.makedirs("output", exist_ok=True)
            with open("output/appsec_raw.json", "w") as f:
                json.dump(data, f, indent=2)
            print("[DEBUG] Raw AppSec API data written to output/appsec_raw.json")

        # --- Summary Line ---
        status = "FOUND" if result["found"] else ("PARTIAL MATCH" if result["partial"] else "NOT FOUND")
        print(f"[RESULT] AppSec: {status}")

        return result

    except Exception as e:
        print(f"[ERROR] AppSec lookup failed: {e}")
        if debug:
            traceback.print_exc()
        return result
