# ==============================================================
# AppSec Check
# ==============================================================

def check_appsec(session, base_url, fqdn, region, contract_id, group_id, access_group, debug=False):
    """
    Validates AppSec configuration entitlements.

    Looks up AppSec configurations within the given contract/group context.
    Determines whether the FQDN or Access Group appears in:
      - Top-level config names, or
      - Nested productionHostnames entries.

    Returns:
      {
        "found": bool,
        "partial": bool,
        "url": str,
        "matches": [ ... ],
        "partial_matches": [ ... ]
      }
    """

    # --- Local helper to safely lowercase values
    def safe_lower(value):
        try:
            if isinstance(value, str):
                return value.lower()
            return str(value).lower()
        except Exception:
            return ""

    result = {
        "found": False,
        "partial": False,
        "url": f"{base_url}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}",
        "matches": [],
        "partial_matches": []
    }

    try:
        url = result["url"]
        resp = session.get(url, timeout=30)

        # --- Handle permission or API errors cleanly
        if resp.status_code == 403:
            print("[WARN] AppSec access denied (HTTP 403): The API client lacks permission for this group.")
            result["partial_matches"].append({
                "matchType": "none",
                "reason": "access_denied"
            })
            return result

        if resp.status_code != 200:
            print(f"[ERROR] AppSec lookup failed with HTTP {resp.status_code}")
            if debug:
                print(resp.text[:400])
            return result

        # --- Parse response JSON safely
        try:
            data = resp.json()
        except Exception as e:
            print(f"[ERROR] AppSec JSON decode failed: {e}")
            if debug:
                print(resp.text[:400])
            return result

        configs = data.get("configurations", [])
        fqdn_lower = safe_lower(fqdn)
        access_lower = safe_lower(access_group)

        for cfg in configs:
            cfg_name = safe_lower(cfg.get("name", ""))
            match_found = False

            # --- Direct name checks
            if fqdn_lower in cfg_name and access_lower in cfg_name:
                result["matches"].append({
                    "id": cfg.get("id"),
                    "name": cfg.get("name"),
                    "matchType": "full"
                })
                result["found"] = True
                match_found = True

            elif fqdn_lower in cfg_name or access_lower in cfg_name:
                result["partial_matches"].append({
                    "id": cfg.get("id"),
                    "name": cfg.get("name"),
                    "matchType": "partial",
                    "reason": "access_group_only" if access_lower in cfg_name else "fqdn_only"
                })
                result["partial"] = True
                match_found = True

            # --- Nested hostname checks (productionHostnames)
            hostnames = cfg.get("productionHostnames", [])
            if isinstance(hostnames, list):
                for hn in hostnames:
                    hn_lower = safe_lower(hn)
                    if fqdn_lower == hn_lower:
                        result["matches"].append({
                            "id": cfg.get("id"),
                            "hostname": hn,
                            "matchType": "full",
                            "reason": "fqdn_in_productionHostnames"
                        })
                        result["found"] = True
                        match_found = True
                    elif fqdn_lower in hn_lower:
                        result["partial_matches"].append({
                            "id": cfg.get("id"),
                            "hostname": hn,
                            "matchType": "partial",
                            "reason": "partial_fqdn_in_productionHostnames"
                        })
                        result["partial"] = True
                        match_found = True

            if debug and match_found:
                print(f"[DEBUG] AppSec Match in config {cfg.get('id')} ({cfg.get('name')})")

        # --- Summary output
        print(f"[RESULT] AppSec: {'FOUND' if result['found'] else ('PARTIAL MATCH' if result['partial'] else 'NOT FOUND')}")

        if debug:
            print(f"[DEBUG] AppSec configs checked: {len(configs)}")
            for m in result["matches"]:
                print(f"[DEBUG] AppSec FULL → {m}")
            for p in result["partial_matches"]:
                print(f"[DEBUG] AppSec PARTIAL → {p}")

        return result

    except Exception as e:
        print(f"[ERROR] AppSec lookup failed: {e}")
        if debug:
            traceback.print_exc()
        return result
