#!/usr/bin/env python3
"""
====================================================================
Akamai / AD Group Email Fetcher Utility
====================================================================
Description:
------------
This lightweight utility retrieves Active Directory (AD) user
email addresses for a given AD group name.

It supports both:
- Live mode (queries the internal HSBC LDAP API)
- Dry-run mode (returns a fixed mock list or a fail-safe address)

If the AD lookup fails or no members exist, the script safely
returns a fallback alias:
    cyberwaspwafdevops@noexternalmail.hsbc.com

====================================================================
Usage:
------

Live Mode:
-----------
Fetch real AD membership via HSBC internal LDAP API.

    python fetch_ad_users.py --group_name "<AD Group Name>"
    python fetch_ad_users.py --group_name "<AD Group Name>" --flatten

Dry-Run Mode:
--------------
Return default test data (no live API calls).

    # Simulated success (returns default email list)
    python fetch_ad_users.py --group_name "AnyGroup" --dry-run

    # Simulated failure (returns fail-safe alias)
    python fetch_ad_users.py --group_name "FakeGroup" --dry-run --simulate-fail

    # Flattened output for Jenkins/email usage
    python fetch_ad_users.py --group_name "AnyGroup" --dry-run --flatten

====================================================================
Output:
-------
JSON (default) or comma-separated email list (when using --flatten)

Examples:
---------
1. JSON Output:
[
    {"mail": "paul.dawson@hsbc.com"},
    {"mail": "paul.hiesley@hsbc.com"},
    {"mail": "pavan.prabhakar@hsbc.com"}
]

2. Flattened Output (--flatten):
paul.dawson@hsbc.com, paul.hiesley@hsbc.com, pavan.prabhakar@hsbc.com
====================================================================
"""

import requests
import argparse
import json
import urllib.parse

# -------------------------------------------------------------
# Default Data Sets
# -------------------------------------------------------------
DEFAULT_EMAILS = [
    {"mail": "paul.dawson@hsbc.com"},
    {"mail": "paul.hiesley@hsbc.com"},
    {"mail": "pavan.prabhakar@hsbc.com"},
    {"mail": "kuldeep.sagoo@hsbc.com"},
    {"mail": "jijin.karumathilvellilapully@hsbc.com"},
]

FAILSAFE_EMAIL = "cyberwaspwafdevops@noexternalmail.hsbc.com"


# -------------------------------------------------------------
# Core Function: Fetch AD Group Members
# -------------------------------------------------------------
def fetch_ad_user_details(group_name, dry_run=False, simulate_fail=False):
    """Fetch AD user details for a given group name or return fallback data."""
    if dry_run:
        if simulate_fail:
            print("[Dry Run: Simulated Failure] Returning fail-safe email alias.")
            return [{"mail": FAILSAFE_EMAIL}]
        print("[Dry Run] Returning static default email list.")
        return DEFAULT_EMAILS

    encoded_group = urllib.parse.quote(group_name)
    url = (
        f"https://hsbc-ldap.prd.digital.gbm.cloud.hk.hsbc/hsbc-ldap?"
        f"serverUrl=ldaps://faa-lds-prod.uk.hsbc&baseDn=OU%3DCyber%20WASP%20Automation,"
        f"OU%3DApplications,OU%3DProd,DC%3Dhsbc,DC=com&InfoDir={encoded_group}"
        f"&limit=100&ad=false&sentFrom=CyberWASP"
    )

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if not data:
            print("[Warning] No AD members found. Using fail-safe email alias.")
            return [{"mail": FAILSAFE_EMAIL}]
        return data

    except Exception as e:
        print(f"[Error] Failed to fetch AD group details: {e}")
        print("[Fallback] Returning fail-safe email alias.")
        return [{"mail": FAILSAFE_EMAIL}]


# -------------------------------------------------------------
# Helper: Flatten to CSV string
# -------------------------------------------------------------
def flatten_email_list(data):
    """Convert list of {'mail': ...} dicts to a single comma-separated string."""
    return ", ".join(item.get("mail", "") for item in data if "mail" in item)


# -------------------------------------------------------------
# Main Entry Point
# -------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fetch AD user details for a given group name.")
    parser.add_argument("--group_name", required=True, help="The name of the AD group to query.")
    parser.add_argument("--dry-run", action="store_true", help="Use dry-run mode with dummy data.")
    parser.add_argument("--simulate-fail", action="store_true", help="Simulate AD lookup failure in dry-run mode.")
    parser.add_argument("--flatten", action="store_true", help="Output flattened comma-separated email string.")
    args = parser.parse_args()

    user_details = fetch_ad_user_details(
        args.group_name,
        dry_run=args.dry_run,
        simulate_fail=args.simulate_fail
    )

    if args.flatten:
        print(flatten_email_list(user_details))
    else:
        print(json.dumps(user_details, indent=4))
