#!/usr/bin/env python3
"""
Akamai Entitlement Validator Suite (Final Rebuild)
Validates FQDN and Access Group entitlements in CPS, AppSec, and PAPI.
"""

import sys
import json
import argparse
import os
import re
import traceback
from requests.sessions import Session
from akamai.edgegrid import EdgeGridAuth
from configparser import ConfigParser
from os.path import expanduser

# =============================================================================
# Region Mappings
# =============================================================================
REGION_SETTINGS = {
    "GLOBAL": {"contract_id": "P-2YN4YRH", "group_id": "154041"},
    "APAC": {"contract_id": "V-5A82LRN", "group_id": "272084"},
    "EMEA": {"contract_id": "V-5A82MHB", "group_id": "272093"},
    "LATAM": {"contract_id": "V-5A854K9", "group_id": "272094"},
    "AMER": {"contract_id": "V-5A854K9", "group_id": "272094"},
    "DEV": {"contract_id": "V-5A82MTA", "group_id": "272095"},
}


# =============================================================================
# Setup Akamai Session
# =============================================================================
def setup_session(section: str):
    edgerc = os.path.join(expanduser("~"), ".edgerc")
    parser = ConfigParser()
    parser.read(edgerc)
    if not parser.has_section(section):
        print(f"[ERROR] Missing section [{section}] in {edgerc}")
        sys.exit(1)

    base_url = f"https://{parser.get(section, 'host')}"
    session = Session()
    session.auth = EdgeGridAuth(
        client_token=parser.get(section, "client_token"),
        client_secret=parser.get(section, "client_secret"),
        access_token=parser.get(section, "access_token"),
    )
    session.headers.update({"Accept": "application/json", "Content-Type": "application/json"})
    return session, base_url


# =============================================================================
# Utility Functions
# =============================================================================
def safe_json(resp):
    try:
        return resp.json()
    except Exception:
        return {}


def sanitize_filename(name: str) -> str:
    return re.sub(r"[^A-Za-z0-9_-]+", "_", name)


def write_json(data, filename):
    os.makedirs("output", exist_ok=True)
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)


# =============================================================================
# CPS Lookup
# =============================================================================
def check_cps(session, base_url, fqdn, contract_id, debug=False):
    url = f"{base_url}/cps/v2/enrollments?contractId={contract_id}"
    print(f"[INFO] CPS lookup: {url}")
    matches, partials = [], []
    try:
        resp = session.get(
            url,
            headers={"Accept": "application/vnd.akamai.cps.enrollments.v11+json"},
            timeout=(10, 60)
        )
        data = safe_json(resp)
        if debug:
            write_json(data, f"output/raw_cps_{sanitize_filename(fqdn)}.json")

        for e in data.get("enrollments", []):
            cn = e.get("csr", {}).get("cn", "")
            sans = e.get("csr", {}).get("sans", [])
            all_names = [cn] + sans
            if fqdn in all_names:
                matches.append({"id": e.get("id"), "cn": cn, "matchType": "full"})
            elif any(fqdn in n for n in all_names if isinstance(n, str)):
                partials.append({"id": e.get("id"), "cn": cn, "matchType": "partial"})

        result = {
            "found": bool(matches),
            "partial": bool(partials) and not matches,
            "url": url,
            "matches": matches,
            "partial_matches": partials
        }
        print(f"[RESULT] CPS: {'FOUND' if matches else ('PARTIAL MATCH' if partials else 'NOT FOUND')}")
        return result
    except Exception as e:
        print(f"[ERROR] CPS lookup failed: {e}")
        if debug:
            traceback.print_exc()
        return {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}


# =============================================================================
# AppSec Lookup
# =============================================================================
def check_appsec(session, base_url, fqdn, contract_id, group_id, access_group, debug=False):
    url = f"{base_url}/appsec/v1/configs?contractId={contract_id}&groupId={group_id}"
    print(f"[INFO] AppSec lookup: {url}")
    matches, partials = [], []
    try:
        resp = session.get(url, timeout=(10, 60))
        data = safe_json(resp)
        if debug:
            write_json(data, f"output/raw_appsec_{sanitize_filename(fqdn)}.json")

        for c in data.get("configurations", []):
            name = c.get("name", "").lower()
            fqdn_match = fqdn.lower() in name
            ag_match = access_group.lower() in name
            if fqdn_match and ag_match:
                matches.append({"id": c.get("id"), "name": c.get("name"), "matchType": "full"})
            elif fqdn_match or ag_match:
                reason = "fqdn_only" if fqdn_match else "access_group_only"
                partials.append({"id": c.get("id"), "name": c.get("name"), "matchType": "partial", "reason": reason})

        result = {
            "found": bool(matches),
            "partial": bool(partials) and not matches,
            "url": url,
            "matches": matches,
            "partial_matches": partials
        }
        print(f"[RESULT] AppSec: {'FOUND' if matches else ('PARTIAL MATCH' if partials else 'NOT FOUND')}")
        return result
    except Exception as e:
        print(f"[ERROR] AppSec lookup failed: {e}")
        if debug:
            traceback.print_exc()
        return {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}


# =============================================================================
# PAPI Lookup
# =============================================================================
def check_papi(session, base_url, fqdn, access_group, debug=False):
    url = f"{base_url}/papi/v1/hostnames"
    print(f"[INFO] PAPI lookup: {url}")
    matches, partials = [], []
    try:
        resp = session.get(url, timeout=(10, 60))
        data = safe_json(resp)
        if debug:
            write_json(data, f"output/raw_papi_{sanitize_filename(fqdn)}.json")

        raw_hosts = data.get("hostnames") or data.get("items") or []
        for h in raw_hosts:
            if isinstance(h, str):
                hostname, prop_name = h.lower(), ""
            else:
                hostname = str(h.get("cnameFrom", "")).lower()
                prop_name = str(h.get("propertyName", "")).lower()

            fqdn_match = fqdn.lower() in hostname
            ag_match = access_group.lower() in prop_name

            if fqdn_match and ag_match:
                matches.append({"hostname": hostname, "propertyName": prop_name, "matchType": "full"})
            elif fqdn_match or ag_match:
                partials.append({"hostname": hostname, "propertyName": prop_name, "matchType": "partial"})

        result = {
            "found": bool(matches),
            "partial": bool(partials) and not matches,
            "url": url,
            "matches": matches,
            "partial_matches": partials
        }
        print(f"[RESULT] PAPI: {'FOUND' if matches else ('PARTIAL MATCH' if partials else 'NOT FOUND')}")
        return result
    except Exception as e:
        print(f"[ERROR] PAPI lookup failed: {e}")
        if debug:
            traceback.print_exc()
        return {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}


# =============================================================================
# Main
# =============================================================================
def main():
    parser = argparse.ArgumentParser(description="Akamai Entitlement Validator")
    parser.add_argument("--section", required=True)
    parser.add_argument("--fqdn", required=True)
    parser.add_argument("--access-group", required=True)
    parser.add_argument("--debug", action="store_true")
    args = parser.parse_args()

    section = args.section.upper()
    fqdn = args.fqdn.strip()
    access_group = args.access_group.strip()
    debug = args.debug

    print("\n==============================================================")
    print("             Akamai Entitlement Validator Suite")
    print("==============================================================")
    print(f"Section:      {section}")
    print(f"Access Group: {access_group}")
    print(f"FQDN:         {fqdn}")
    print(f"Debug Mode:   {'ON' if debug else 'OFF'}\n")

    if section not in REGION_SETTINGS:
        print(f"[ERROR] Invalid section '{section}'. Check REGION_SETTINGS.")
        sys.exit(1)

    region = REGION_SETTINGS[section]
    session, base_url = setup_session(section)

    cps = check_cps(session, base_url, fqdn, region["contract_id"], debug)
    appsec = check_appsec(session, base_url, fqdn, region["contract_id"], region["group_id"], access_group, debug)
    papi = check_papi(session, base_url, fqdn, access_group, debug)

    full_found = any([cps["found"], appsec["found"], papi["found"]])
    partial_only = any([cps["partial"], appsec["partial"], papi["partial"]]) and not full_found

    validated_by = []
    for name, res in [("CPS", cps), ("AppSec", appsec), ("PAPI", papi)]:
        if res["found"]:
            validated_by.append(name)
        elif res["partial"]:
            validated_by.append(f"{name} (partial)")

    summary = {
        "section": section,
        "access_group": access_group,
        "fqdn": fqdn,
        "cps": cps,
        "appsec": appsec,
        "papi": papi,
        "validated_by": validated_by,
        "authorized": full_found
    }

    os.makedirs("output", exist_ok=True)
    file = f"output/entitlement_summary_{sanitize_filename(fqdn)}.json"
    write_json(summary, file)

    print("\n--------------------------------------------------------------")
    if full_found:
        print("[SUMMARY] Validation Result: AUTHORIZED")
    elif partial_only:
        print("[SUMMARY] Validation Result: UNAUTHORIZED (PARTIAL MATCH DETECTED)")
    else:
        print("[SUMMARY] Validation Result: UNAUTHORIZED")

    print(f"[SUMMARY] Validated by: {', '.join(validated_by) if validated_by else 'None'}")
    print("--------------------------------------------------------------\n")
    print(f"[INFO] Summary written to {file}\n")


if __name__ == "__main__":
    main()
