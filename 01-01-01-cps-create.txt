import requests
import argparse
import urllib.parse
import json

# ---------------------------------------------------------------------
# Constants
# ---------------------------------------------------------------------
DEFAULT_BASE_URL = "https://hsbc-ldap.prd.digital.gbm.cloud.hk.hsbc/hsbc-ldap"
DEFAULT_SERVER_URL = "ldaps://faa-lds-prod.uk.hsbc"
DEFAULT_BASE_DN = "OU=Cyber WASP Automation,OU=Applications,OU=Prod,DC=hsbc,DC=com"

DEFAULT_EMAILS = [
    {"mail": "paul.dawson@hsbc.com"},
    {"mail": "paul.hiesley@hsbc.com"},
    {"mail": "pavan.prabhakar@hsbc.com"},
    {"mail": "kuldeep.sagoo@hsbc.com"},
    {"mail": "jijin.karumathilvellilapully@hsbc.com"},
]
FAILSAFE_EMAIL = "cyberwaspwafdevops@noexternalmail.hsbc.com"

# ---------------------------------------------------------------------
# Core Function
# ---------------------------------------------------------------------
def fetch_ad_user_details(
    group_name,
    dry_run=False,
    simulate_fail=False,
    base_url=DEFAULT_BASE_URL,
    server_url=DEFAULT_SERVER_URL,
    base_dn=DEFAULT_BASE_DN,
):
    """Fetch AD user details for a given group name or return fallback data."""

    # Dry-run handling
    if dry_run:
        if simulate_fail:
            print("[Dry Run: Simulated Failure] Returning fail-safe email alias.")
            return [{"mail": FAILSAFE_EMAIL}]
        print("[Dry Run] Returning static default email list.")
        return DEFAULT_EMAILS

    # Encode only once for live URL
    encoded_group = urllib.parse.quote(group_name)
    encoded_server_url = urllib.parse.quote(server_url)
    encoded_base_dn = urllib.parse.quote(base_dn)

    url = (
        f"{base_url}?"
        f"serverUrl={encoded_server_url}&"
        f"baseDn={encoded_base_dn}&"
        f"InfoDir={encoded_group}&limit=100&ad=false&sentFrom=CyberWASP"
    )

    print(f"[INFO] Querying LDAP API:\n{url}\n")

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if not data:
            print("[Warning] No AD members found. Using fail-safe email alias.")
            return [{"mail": FAILSAFE_EMAIL}]
        return data

    except Exception as e:
        print(f"[Error] Failed to fetch AD group details: {e}")
        print("[Fallback] Returning fail-safe email alias.")
        return [{"mail": FAILSAFE_EMAIL}]

# ---------------------------------------------------------------------
# CLI Entry Point
# ---------------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Query AD group members (dry-run or live mode)."
    )
    parser.add_argument("--group_name", required=True, help="Name of AD group to query")
    parser.add_argument("--dry_run", action="store_true", help="Simulate response only")
    parser.add_argument("--simulate_fail", action="store_true", help="Force dry-run failure mode")
    parser.add_argument("--base_url", default=DEFAULT_BASE_URL, help="Base URL for LDAP endpoint")
    parser.add_argument("--server_url", default=DEFAULT_SERVER_URL, help="LDAP server URL (unencoded)")
    parser.add_argument("--base_dn", default=DEFAULT_BASE_DN, help="Base DN (unencoded)")
    parser.add_argument("--flatten", action="store_true", help="Output flattened email list")

    args = parser.parse_args()

    user_details = fetch_ad_user_details(
        args.group_name,
        dry_run=args.dry_run,
        simulate_fail=args.simulate_fail,
        base_url=args.base_url,
        server_url=args.server_url,
        base_dn=args.base_dn,
    )

    if args.flatten:
        print(", ".join([u["mail"] for u in user_details]))
    else:
        print(json.dumps(user_details, indent=4))
