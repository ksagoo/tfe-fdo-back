#!/usr/bin/env python3
"""
Query Active Directory group members via HSBC LDAP API.

Usage Examples:
  Live mode:       python query_ad_group_final_fixed.py --group_name <ADGroup>
  Dry run:         python query_ad_group_final_fixed.py --group_name <ADGroup> --dry_run
  Simulate fail:   python query_ad_group_final_fixed.py --group_name <ADGroup> --dry_run --simulate_fail
  Flatten output:  python query_ad_group_final_fixed.py --group_name <ADGroup> --flatten
  Show URL only:   python query_ad_group_final_fixed.py --group_name <ADGroup> --show_url
"""

import requests
import argparse
import urllib.parse
import json
from urllib.parse import urlparse, parse_qs, unquote


# ------------------------------------------------------------------------
# Constants (Final verified and fixed)
# ------------------------------------------------------------------------
DEFAULT_BASE_URL = "https://hsbc-ldap.prd.digital.gbm.cloud.hk.hsbc/hsbc-ldap"
#DEFAULT_SERVER_URL = "ldaps://faa-lds-prod.uk.hsbc:3269"
DEFAULT_SERVER_URL = "ldaps%3A%2F%2FFaa-lds-prod.uk.hsbc%3A3269"  # fixed uppercase F after %2F

DEFAULT_BASE_DN = "OU%3DHSBCPeople%2CDC%3DInfoDir%2CDC%3DProd%2CDC%3DHSBC"

DEFAULT_MEMBER_PATH = (
    "OU%3DCyber%20WASP%20Automation%2COU%3DApplications%2COU%3DGroups"
    "%2CDC%3DInfoDir%2CDC%3DProd%2CDC%3DHSBC"
)

DEFAULT_EMAILS = [
    {"mail": "paul.dawson@hsbc.com"},
    {"mail": "paul.hiesley@hsbc.com"},
    {"mail": "pavan.prabhakar@hsbc.com"},
    {"mail": "kuldeep.sagoo@hsbc.com"},
    {"mail": "jijin.karumathilvelilapully@hsbc.com"},
]

FAILSAFE_EMAIL = "cyberwaspwafdevops@noexternalmail.hsbc.com"


# ------------------------------------------------------------------------
# Sanity Check
# ------------------------------------------------------------------------
def sanity_check_url(url, show_output=True):
    """Decode and validate LDAP query URL structure."""
    if not show_output:
        return
    print("\n[DEBUG] Sanity check before live LDAP query:")
    parsed = urlparse(url)
    print(f"  Base URL: {parsed.scheme}://{parsed.netloc}{parsed.path}")
    query_params = parse_qs(parsed.query)
    for key, value in query_params.items():
        decoded_value = unquote(value[0])
        print(f"  {key} = {decoded_value}")
        if "%25" in value[0]:
            print(f"  Warning: Double encoding detected in '{key}' (contains '%25')")
    if "member-of" in query_params:
        print("  Sanity check passed: 'member-of' present.\n")
    else:
        print("  Warning: missing 'member-of' parameter.\n")


# ------------------------------------------------------------------------
# Core Function
# ------------------------------------------------------------------------
def fetch_ad_user_details(
    group_name,
    dry_run=False,
    simulate_fail=False,
    base_url=DEFAULT_BASE_URL,
    server_url=DEFAULT_SERVER_URL,
    base_dn=DEFAULT_BASE_DN,
    member_path=DEFAULT_MEMBER_PATH,
):
    """Fetch AD user details for a given group name or return fallback data."""
    if dry_run:
        if simulate_fail:
            print("[Dry Run: Simulated Failure] Returning fail-safe email alias.")
            return [{"mail": FAILSAFE_EMAIL}]
        print("[Dry Run] Returning static default email list.")
        return DEFAULT_EMAILS

    encoded_group = urllib.parse.quote(group_name)
    url = (
        f"{base_url}?"
        f"serverUrl={server_url}"
        f"&baseDN={base_dn}"
        f"&attributes=mail"
        f"&member-of=CN%3DInfodir-{encoded_group}%2C{member_path}"
        f"&limit=100&ad=false&sentFrom=CyberWASP"
    )

    sanity_check_url(url)
    print(f"\n[INFO] Querying LDAP API:\n{url}\n")

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        if not data:
            print("[Warning] No AD members found. Using fail-safe email alias.")
            return [{"mail": FAILSAFE_EMAIL}]
        return data
    except Exception as e:
        print(f"[Error] Failed to fetch AD group details: {e}")
        print("[Fallback] Returning fail-safe email alias.")
        return [{"mail": FAILSAFE_EMAIL}]


# ------------------------------------------------------------------------
# CLI Entry Point
# ------------------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Query AD group members via HSBC LDAP endpoint.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument("--group_name", required=True, help="Name of AD group to query")
    parser.add_argument("--dry_run", action="store_true", help="Simulate response only")
    parser.add_argument("--simulate_fail", action="store_true", help="Force dry-run failure mode")
    parser.add_argument("--flatten", action="store_true", help="Output flattened email list")
    parser.add_argument("--show_url", action="store_true", help="Show LDAP query URL and exit")

    args = parser.parse_args()

    # Show URL only
    if args.show_url:
        encoded_group = urllib.parse.quote(args.group_name)
        preview_url = (
            f"{DEFAULT_BASE_URL}?"
            f"serverUrl={DEFAULT_SERVER_URL}"
            f"&baseDN={DEFAULT_BASE_DN}"
            f"&attributes=mail"
            f"&member-of=CN%3DInfodir-{encoded_group}%2C{DEFAULT_MEMBER_PATH}"
            f"&limit=100&ad=false&sentFrom=CyberWASP"
        )
        print(f"[SHOW_URL]\n{preview_url}\n")
        sanity_check_url(preview_url)
        exit(0)

    user_details = fetch_ad_user_details(
        args.group_name, dry_run=args.dry_run, simulate_fail=args.simulate_fail
    )

    if args.flatten:
        print(", ".join([u["mail"] for u in user_details]))
    else:
        print(json.dumps(user_details, indent=4))
