#!/usr/bin/env python3
"""
================================================================================
Akamai FQDN Access Group Lookup Utility
================================================================================
Description:
    This script is used primarily during the certificate discovery or automation
    process, where only an FQDN is available and we need to determine its
    associated Access Group name and Group ID via Akamai PAPI.

Usage:
    python akamai_fqdn_access_group_lookup.py --section <edgerc_section> --fqdn <hostname>

Example:
    python akamai_fqdn_access_group_lookup.py --section dev --fqdn epspos-dev-01.hsbc.com.hk

Output:
    == Access Group Lookup Result ==
    FQDN: epspos-dev-01.hsbc.com.hk
    Access Group: ServiceNow-itilUser
    Group ID: grp_272095
================================================================================
"""

import os
import sys
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth
from configparser import ConfigParser

# ==============================================================================
# Session setup
# ==============================================================================
def setup_session(section):
    config = ConfigParser()
    config.read(os.path.expanduser("~/.edgerc"))

    if section not in config:
        print(f"[ERROR] Section '{section}' not found in .edgerc")
        sys.exit(1)

    base_url = f"https://{config[section]['host']}"
    session = requests.Session()
    session.auth = EdgeGridAuth(
        client_token=config[section]['client_token'],
        client_secret=config[section]['client_secret'],
        access_token=config[section]['access_token']
    )
    return session, base_url


# ==============================================================================
# Reverse FQDN Lookup (from your validator)
# ==============================================================================
def reverse_fqdn_lookup(session, base_url, fqdn):
    url = f"{base_url}/papi/v1/hostnames?search={fqdn}"
    try:
        resp = session.get(url, headers={"accept": "application/json"}, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] HTTP {resp.status_code} during reverse lookup for {fqdn}")
            return None
        data = resp.json()
    except Exception as e:
        print(f"[ERROR] Exception during reverse lookup: {e}")
        return None

    host_entries = (
        data.get("items")
        or data.get("hostnames", {}).get("items", [])
        or data.get("hostnames", [])
    )

    for entry in host_entries:
        if fqdn.lower() not in (
            str(entry.get("cnameFrom", "")).lower(),
            str(entry.get("edgeHostname", "")).lower(),
            str(entry.get("stagingEdgeHostname", "")).lower()
        ):
            continue

        return {
            "groupId": entry.get("groupId", "UNKNOWN"),
            "accessGroupName": entry.get("accessGroupName", "UNKNOWN"),
        }

    return None


# ==============================================================================
# Main
# ==============================================================================
def main():
    parser = argparse.ArgumentParser(description="Akamai FQDN â†’ Access Group lookup tool")
    parser.add_argument("--section", required=True, help="Section from .edgerc")
    parser.add_argument("--fqdn", required=True, help="Fully qualified domain name to look up")
    args = parser.parse_args()

    print("================================================================================")
    print("Akamai FQDN Access Group Lookup Utility")
    print("================================================================================")
    print(f"Section: {args.section}")
    print(f"FQDN: {args.fqdn}\n")

    session, base_url = setup_session(args.section)
    result = reverse_fqdn_lookup(session, base_url, args.fqdn)

    if not result:
        print(f"[WARN] No Access Group found for {args.fqdn}")
        sys.exit(1)

    print("== Access Group Lookup Result ==")
    print(f"FQDN: {args.fqdn}")
    print(f"Access Group: {result['accessGroupName']}")
    print(f"Group ID: {result['groupId']}")
    print("================================================================================")


if __name__ == "__main__":
    main()
