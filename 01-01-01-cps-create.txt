def discover_enrollments(session, base_url, section, expiry_threshold=30, dry_run=False, debug=False):
    """
    Discover certificate enrollments from Akamai CPS.

    - In dry-run mode, returns simulated enrollments for test validation.
    - In live mode, queries CPS /enrollments and filters certificates expiring within the threshold window.

    Args:
        session (requests.Session): Authenticated EdgeGrid session.
        base_url (str): Akamai API base URL.
        section (str): Environment section (e.g., DEV, APAC, EMEA).
        expiry_threshold (int): Days before expiry to include certificates.
        dry_run (bool): Whether to simulate results (no API calls).
        debug (bool): Enable verbose debug logging.

    Returns:
        list: Discovered enrollments.
    """

    # -----------------------------
    # DRY RUN MODE
    # -----------------------------
    if dry_run:
        now = datetime.now(timezone.utc)
        data = []

        for i, days in enumerate([14, 10, 7]):
            expiry = now + timedelta(days=days)
            data.append({
                "enrollment_id": f"1000{i+1}",
                "fqdn": f"dryrun{i+1}.example.com",
                "days_to_expiry": days,
                "expiry_date": expiry.strftime("%d %b %Y"),
                "auto_renewal_date": (expiry - timedelta(days=3)).strftime("%d %b %Y %H:%M UTC"),
                "sans": [f"www.dryrun{i+1}.example.com", f"alt.dryrun{i+1}.example.com"],
                "slot": f"slot-{1000+i}",
                "deployment_network": "production"
            })

        with open(os.path.join(OUTPUT_DIR, "discovered_enrollments.json"), "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)

        log_message("DRY-RUN", f"Simulated discovery of {len(data)} enrollments")
        return data

    # -----------------------------
    # LIVE MODE
    # -----------------------------
    region = REGION_SETTINGS.get(section, {})
    contract_id = region.get("contract_id")
    account_switch_key = region.get("account_switch_key")

    if not contract_id:
        log_message("FAILURE", f"Missing contract_id in REGION_SETTINGS for section [{section}]")
        return []

    url = f"{base_url}/cps/v2/enrollments?contractId={contract_id}"
    if account_switch_key:
        url += f"&accountSwitchKey={account_switch_key}"

    headers = {
        "Accept": "application/vnd.akamai.cps.enrollments.v11+json"
    }

    try:
        if debug:
            print(f"[DEBUG] GET {url}")

        response = session.get(url, headers=headers, timeout=(10, 60))
        if response.status_code != 200:
            log_message("FAILURE", f"Discovery failed: {response.status_code}")
            if debug:
                print(f"[DEBUG] Response body: {response.text}")
            return []

        all_enrollments = response.json().get("enrollments", [])
        if debug:
            print(f"[DEBUG] Retrieved {len(all_enrollments)} total enrollments")

        with open(os.path.join(OUTPUT_DIR, "raw_enrollments.json"), "w", encoding="utf-8") as f:
            json.dump(response.json(), f, indent=2)
            print(f"[DEBUG] Saved raw enrollment JSON to output/raw_enrollments.json")

        # -----------------------------
        # Extract expiry + CN (debug listing)
        # -----------------------------
        for e in all_enrollments:
            expiry = (
                e.get("renewal", {}).get("certificateNotAfter")
                or e.get("certificate", {}).get("notAfter")
                or (e.get("certificateChain", [{}])[0].get("notAfter") if e.get("certificateChain") else None)
                or e.get("autoRenewalStartTime")
            )

            # fallback: deployments
            if not expiry and "deployments" in e:
                for d in e.get("deployments", []):
                    cert = d.get("certificate", {})
                    if cert.get("notAfter"):
                        expiry = cert["notAfter"]
                        break

            cn = (
                e.get("csr", {}).get("cn")
                or (e.get("csr", {}).get("sans", [])[0] if e.get("csr", {}).get("sans") else None)
                or e.get("networkConfiguration", {}).get("dnsNameSettings", {}).get("dnsNames", [None])[0]
            )

            print(f"[DEBUG] Enrollment: {cn}, Expiry: {expiry}")

    except Exception as e:
        log_message("FAILURE", f"Discovery exception: {e}")
        return []

    # -----------------------------
    # FILTER BY EXPIRY
    # -----------------------------
    now = datetime.now(timezone.utc)
    discovered = []

    for e in all_enrollments:
        expiry = (
            e.get("renewal", {}).get("certificateNotAfter")
            or e.get("certificate", {}).get("notAfter")
            or (e.get("certificateChain", [{}])[0].get("notAfter") if e.get("certificateChain") else None)
            or e.get("autoRenewalStartTime")
        )

        if not expiry and "deployments" in e:
            for d in e.get("deployments", []):
                cert = d.get("certificate", {})
                if cert.get("notAfter"):
                    expiry = cert["notAfter"]
                    break

        if not expiry:
            continue

        try:
            expiry_date = datetime.fromisoformat(expiry.replace("Z", "+00:00"))
            days_left = (expiry_date - now).days

            if days_left < expiry_threshold:
                discovered.append({
                    "enrollment_id": e.get("enrollmentId"),
                    "fqdn": e.get("csr", {}).get("cn", "unknown"),
                    "days_to_expiry": days_left,
                    "expiry_date": expiry_date.strftime("%d %b %Y"),
                    "sans": e.get("csr", {}).get("sans", []),
                    "deployment_network": e.get("deploymentNetwork", "production"),
                })

        except Exception as ex:
            log_debug(debug, f"Skipping invalid enrollment: {ex}")

    with open(os.path.join(OUTPUT_DIR, "discovered_enrollments.json"), "w", encoding="utf-8") as f:
        json.dump(discovered, f, indent=2)

    log_message("SUCCESS", f"Discovered {len(discovered)} enrollments expiring within {expiry_threshold} days")
    return discovered
