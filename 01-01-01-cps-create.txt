#!/usr/bin/env python3
"""
================================================================================
Akamai FQDN Access Group Lookup Utility (Final)
================================================================================
Description:
    This script is used primarily during the certificate discovery or automation
    process, where only an FQDN is available and we need to determine its
    associated Access Group name and Group ID via Akamai PAPI.

Usage:
    python akamai_fqdn_access_group_lookup.py --section <edgerc_section> --fqdn <hostname>

Example:
    python akamai_fqdn_access_group_lookup.py --section dev --fqdn epspos-dev-01.hsbc.com.hk

Output:
    == Access Group Lookup Result ==
    FQDN: epspos-dev-01.hsbc.com.hk
    Access Group: ServiceNow-itilUser
    Group ID: grp_272095
================================================================================
"""

import sys
import json
import argparse
import re
import os
import traceback
from requests.sessions import Session
from akamai.edgegrid import EdgeGridAuth
from configparser import ConfigParser


# ==============================================================================
# Session setup
# ==============================================================================
def setup_session(section: str):
    edgerc = os.path.join(os.path.expanduser("~"), ".edgerc")
    parser = ConfigParser()
    parser.read(edgerc)

    if not parser.has_section(section):
        print(f"[ERROR] Missing section [{section}] in {edgerc}")
        sys.exit(1)

    base_url = f"https://{parser.get(section, 'host')}"
    session = Session()
    session.auth = EdgeGridAuth(
        client_token=parser.get(section, "client_token"),
        client_secret=parser.get(section, "client_secret"),
        access_token=parser.get(section, "access_token"),
    )
    session.headers.update({
        "Accept": "application/json",
        "Content-Type": "application/json"
    })
    return session, base_url


# ==============================================================================
# Helper: Resolve Access Group Name from Group ID
# ==============================================================================
def get_group_name_by_id(session, base_url, group_id):
    """Look up Access Group Name from /papi/v1/groups."""
    try:
        resp = session.get(f"{base_url}/papi/v1/groups", timeout=20)
        if resp.status_code != 200:
            return "UNKNOWN"
        data = resp.json()
        for g in data.get("groups", {}).get("items", []):
            if g.get("groupId") == group_id:
                return g.get("groupName", "UNKNOWN")
    except Exception:
        return "UNKNOWN"
    return "UNKNOWN"


# ==============================================================================
# Reverse FQDN Lookup (from validator)
# ==============================================================================
def reverse_fqdn_lookup(session, base_url, fqdn):
    url = f"{base_url}/papi/v1/hostnames?search={fqdn}"
    try:
        resp = session.get(url, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] HTTP {resp.status_code} during reverse lookup for {fqdn}")
            return None
        data = resp.json()
    except Exception as e:
        print(f"[ERROR] Exception during reverse lookup: {e}")
        return None

    host_entries = (
        data.get("items")
        or data.get("hostnames", {}).get("items", [])
        or data.get("hostnames", [])
    )

    fqdn_lower = fqdn.lower()
    for entry in host_entries:
        cname_from = str(entry.get("cnameFrom", "")).lower()
        cname_to = str(entry.get("cnameTo", "")).lower()
        edge = str(entry.get("edgeHostname", "")).lower()
        staging = str(entry.get("stagingEdgeHostname", "")).lower()

        if fqdn_lower not in (cname_from, cname_to, edge, staging):
            continue

        group_id = entry.get("groupId", "UNKNOWN")
        access_group = get_group_name_by_id(session, base_url, group_id)
        return {"groupId": group_id, "accessGroupName": access_group}

    return None


# ==============================================================================
# Main
# ==============================================================================
def main():
    parser = argparse.ArgumentParser(description="Akamai FQDN â†’ Access Group lookup tool")
    parser.add_argument("--section", required=True, help="Section from .edgerc")
    parser.add_argument("--fqdn", required=True, help="Fully qualified domain name to look up")
    args = parser.parse_args()

    print("================================================================================")
    print("Akamai FQDN Access Group Lookup Utility")
    print("================================================================================")
    print(f"Section: {args.section}")
    print(f"FQDN: {args.fqdn}\n")

    session, base_url = setup_session(args.section)
    result = reverse_fqdn_lookup(session, base_url, args.fqdn)

    if not result:
        print(f"[WARN] No Access Group found for {args.fqdn}")
        sys.exit(1)

    print("== Access Group Lookup Result ==")
    print(f"FQDN: {args.fqdn}")
    print(f"Access Group: {result['accessGroupName']}")
    print(f"Group ID: {result['groupId']}")
    print("================================================================================")


if __name__ == "__main__":
    main()
