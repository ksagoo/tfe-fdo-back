#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
===================================================================================
                           Akamai IAM Client Credential Management Script
===================================================================================
Script Name:
    Akamai IAM Credential Rotation Script

Description:
    This script authenticates using EdgeGrid and interacts with Akamai's IAM API to:
    - List all API clients and their IDs
    - List all credentials for a specific API client
    - Rotate client credentials (generate new client token/secret/access token)
    - Optionally delete older credentials

Parameters:
    --list_clients               : Lists all available API clients and exits
    --client_id (optional)       : ID of the API client to manage credentials for
    --rotate (optional)          : Rotate credentials for the client. Default is 'N'
    --delete_old (optional)      : Delete previous credentials after rotation. Default is 'N'
    --edgerc (optional)          : Path to the .edgerc file. Default is '~/.edgerc'
    --section (optional)         : Section in the .edgerc file. Default is 'default'

Usage:
    - List all API clients:
        python akamai_manage_iam_creds.py --list_clients

    - Rotate and delete old:
        python akamai_manage_iam_creds.py --client_id abc123 --rotate Y --delete_old Y
===================================================================================
"""
import os
import argparse
import requests
import json
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin

def setup_session(edgerc_path, section):
    try:
        edgerc = EdgeRc(edgerc_path)
        base_url = f"https://{edgerc.get(section, 'host')}/"
        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section)
        return session, base_url
    except Exception as e:
        print(f"Failed to load EdgeGrid credentials: {e}")
        exit(1)

def list_api_clients(session, base_url):
    url = urljoin(base_url, "identity-management/v3/api-clients")
    response = session.get(url)
    if response.status_code == 200:
        clients = response.json()
        print("Available API Clients:")
        for client in clients:
            print(f"  - clientId: {client['clientId']}")
            print(f"    name:     {client.get('name', '(no name)')}")
            print(f"    desc:     {client.get('description', '(no description)')}\n")
        return clients
    else:
        print(f"Failed to list API clients: {response.status_code}")
        print(response.text)
        return []

def list_client_credentials(session, base_url, client_id):
    url = urljoin(base_url, f"identity-management/v3/api-clients/{client_id}/credentials")
    resp = session.get(url)
    if resp.status_code == 200:
        creds = resp.json()
        print(f"Credentials for client ID {client_id}:")
        for cred in creds:
            print(f"  - ID: {cred['credentialId']}, Created: {cred.get('createdDate', 'N/A')}, Status: {cred.get('status', 'N/A')}")
        return creds
    else:
        print(f"Failed to list credentials (status code {resp.status_code}): {resp.text}")
        return []

def rotate_client_credentials(session, base_url, client_id):
    url = urljoin(base_url, f"identity-management/v3/api-clients/{client_id}/credentials")
    resp = session.post(url)
    if resp.status_code == 201:
        data = resp.json()
        print("New credential created:")
        print(json.dumps(data, indent=4))
        return data["credentialId"]
    else:
        print(f"Failed to create new credentials: {resp.status_code}")
        print(resp.text)
        return None

def delete_credential(session, base_url, client_id, credential_id):
    url = urljoin(base_url, f"identity-management/v3/api-clients/{client_id}/credentials/{credential_id}")
    resp = session.delete(url)
    if resp.status_code == 204:
        print(f"Deleted old credential: {credential_id}")
    else:
        print(f"Failed to delete credential {credential_id}: {resp.status_code}")
        print(resp.text)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Manage IAM API client credentials via Akamai API")

    parser.add_argument("--list_clients", action="store_true", help="List all available API clients")
    parser.add_argument("--client_id", help="The API client ID")
    parser.add_argument("--rotate", choices=["Y", "N"], default="N", help="Rotate credentials (default: N)")
    parser.add_argument("--delete_old", choices=["Y", "N"], default="N", help="Delete previous credentials (default: N)")
    parser.add_argument("--edgerc", default=os.path.expanduser("~/.edgerc"), help="Path to .edgerc file")
    parser.add_argument("--section", default="default", help="Section in .edgerc")

    args = parser.parse_args()
    session, base_url = setup_session(args.edgerc, args.section)

    if args.list_clients:
        list_api_clients(session, base_url)
        exit(0)

    if not args.client_id:
        print("Error: --client_id is required unless --list_clients is used")
        exit(1)

    existing_credentials = list_client_credentials(session, base_url, args.client_id)

    if args.rotate == "Y":
        new_credential_id = rotate_client_credentials(session, base_url, args.client_id)
        if args.delete_old == "Y" and new_credential_id:
            for cred in existing_credentials:
                if cred["credentialId"] != new_credential_id:
                    delete_credential(session, base_url, args.client_id, cred["credentialId"])
