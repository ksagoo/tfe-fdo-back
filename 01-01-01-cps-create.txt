def reverse_fqdn_lookup(session, base_url, fqdn, access_group, debug=False):
    """
    Reverse lookup for a given FQDN via PAPI, then normalize/compare:
      - lowercase both sides
      - remove 'sd-' prefix ONLY if first 3 characters
      - remove trailing '-nonprod' (8 chars) or '-prod' (4 chars)
      - compare stripped property name to access group
    Returns:
      {
        'found': bool,
        'groupId': str|None,
        'propertyName': str|None,
        'accessGroupName': str|None,
        'strippedPropertyName': str|None,
        'matchAccessGroup': bool|None,
        'matchType': 'full'|'partial'|'none'
      }
    """
    import requests
    import time

    # --- Helper: Resolve group name by ID ---
    def get_group_name_by_id(sess, base, gid):
        try:
            r = sess.get(f"{base}/papi/v1/groups",
                         headers={"accept": "application/json", "PAPI-Use-Prefixes": "true"},
                         timeout=20)
            if r.status_code == 200:
                data = r.json() or {}
                items = (data.get("groups") or {}).get("items", [])
                for g in items:
                    if g.get("groupId", "").replace("grp_", "") == (gid or "").replace("grp_", ""):
                        return g.get("groupName") or None
        except Exception:
            pass
        try:
            r = sess.get(f"{base}/identity-management/v3/user-admin/groups",
                         headers={"accept": "application/json"}, timeout=20)
            if r.status_code == 200:
                for g in (r.json() or []):
                    gid2 = str(g.get("groupId") or g.get("id") or "")
                    if gid2.replace("grp_", "") == (gid or "").replace("grp_", ""):
                        return g.get("groupName") or g.get("name") or None
        except Exception:
            pass
        return None

    # --- Initialize result ---
    result = {
        "found": False,
        "groupId": None,
        "propertyName": None,
        "accessGroupName": None,
        "strippedPropertyName": None,
        "matchAccessGroup": None,
        "matchType": "none",
    }

    fqdn = (fqdn or "").strip().lower()
    access_group_l = (access_group or "").strip().lower()

    # --- PAPI reverse lookup ---
    url = f"{base_url}/papi/v1/hostnames?search={fqdn}"
    if debug:
        print("\n==== Starting Reverse FQDN Lookup ====")
        print(f"[INFO] Performing PAPI reverse lookup: {url}")

    for attempt in range(3):
        try:
            resp = session.get(
                url,
                headers={"accept": "application/json", "PAPI-Use-Prefixes": "true"},
                timeout=30,
            )
            break
        except requests.exceptions.RequestException as e:
            if attempt < 2:
                if debug: print(f"[WARN] Request failed ({e}), retrying...")
                time.sleep(2 ** attempt)
            else:
                if debug: print(f"[ERROR] Reverse lookup failed after retries: {e}")
                return result

    if resp.status_code != 200:
        if debug: print(f"[ERROR] PAPI reverse lookup failed: HTTP {resp.status_code}")
        return result

    data = resp.json() or {}
    host_entries = []
    if isinstance(data, list):
        host_entries = data
    elif isinstance(data, dict):
        if "items" in data:
            host_entries = data["items"] or []
        elif "hostnames" in data:
            hn = data["hostnames"]
            if isinstance(hn, dict) and "items" in hn:
                host_entries = hn["items"] or []
            elif isinstance(hn, list):
                host_entries = hn

    if not host_entries:
        if debug: print(f"[WARN] No hostnames found for {fqdn}")
        return result

    # --- choose best hit ---
    full_hit = None
    partial_hit = None
    for entry in host_entries:
        if not isinstance(entry, dict):
            continue
        cname_from = str(entry.get("cnameFrom", "")).lower()
        cname_to = str(entry.get("stagingCnameTo", "")).lower()
        edge_host = str(entry.get("stagingEdgeHostnameId", "")).lower()

        if fqdn in (cname_from, cname_to, edge_host):
            full_hit = entry
            break
        if fqdn in cname_from or fqdn in cname_to:
            partial_hit = partial_hit or entry

    hit = full_hit or partial_hit
    if not hit:
        if debug: print(f"[WARN] No matching entry for {fqdn}")
        return result

    # --- extract + normalize ---
    group_id = hit.get("groupId") or None
    prop_name = hit.get("propertyName") or ""
    prop_l = prop_name.strip().lower()

    # remove 'sd-' ONLY if it's literally the first three chars
    if prop_l.startswith("sd-"):
        prop_l = prop_l[3:]

    # strip trailing environment tags
    if prop_l.endswith("-nonprod"):
        prop_l = prop_l[:-8]
    elif prop_l.endswith("-prod"):
        prop_l = prop_l[:-4]

    prop_l = prop_l.strip()
    access_group_name = get_group_name_by_id(session, base_url, group_id)
    match_flag = (prop_l == access_group_l)

    # --- fill result ---
    result.update({
        "found": True,
        "groupId": group_id,
        "propertyName": prop_name,
        "accessGroupName": access_group_name,
        "strippedPropertyName": prop_l,
        "matchAccessGroup": match_flag,
        "matchType": "full" if full_hit else "partial",
    })

    # --- print output ---
    print(f"\nFQDN:        {fqdn}")
    print(f"Access Group: {access_group}")
    print(f"Property:    {prop_name}")
    print(f"Match:       {'TRUE' if match_flag else 'FALSE'}")

    if debug:
        print(f"[DEBUG] Stripped property (lower): {prop_l}")
        print(f"[DEBUG] Access group (lower):     {access_group_l}")
        print(f"[DEBUG] Match type:               {'FULL' if full_hit else 'PARTIAL'}")
        print(f"[DEBUG] groupId:                  {group_id} ({access_group_name or 'UNKNOWN'})")

    return result
