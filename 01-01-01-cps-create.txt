def reverse_fqdn_lookup(session, base_url, fqdn, access_group, debug=False):
    """
    Reverse lookup for a given FQDN via PAPI.
    Returns: groupId, propertyName, accessGroupName, strippedPropertyName, matchAccessGroup
    """

    import re
    result = {
        "found": False,
        "groupId": None,
        "propertyName": None,
        "accessGroupName": None,
        "strippedPropertyName": None,
        "matchAccessGroup": None,
        "matchType": "none",
    }

    fqdn = fqdn.lower().strip()
    url = f"{base_url}/papi/v1/hostnames?search={fqdn}"

    if debug:
        print("\n==== Starting Reverse FQDN Lookup ====")
        print(f"[INFO] Performing PAPI reverse lookup: {url}")

    try:
        resp = session.get(url, timeout=30)
        os.makedirs("output", exist_ok=True)

        if debug:
            with open(f"output/raw_reverse_lookup_{sanitize_filename(fqdn)}.json", "w", encoding="utf-8") as f:
                f.write(resp.text)

        if resp.status_code != 200:
            print(f"[ERROR] PAPI reverse lookup failed: HTTP {resp.status_code}")
            return result

        data = resp.json()

        # Handle all known PAPI hostname data shapes
        host_entries = []
        if isinstance(data, list):
            host_entries = data
        elif isinstance(data, dict):
            if "items" in data:
                host_entries = data["items"]
            elif "hostnames" in data and isinstance(data["hostnames"], dict):
                hostnames = data["hostnames"]
                if "items" in hostnames:
                    host_entries = hostnames["items"]
            elif "hostnames" in data and isinstance(data["hostnames"], list):
                host_entries = data["hostnames"]

        if debug:
            print(f"[DEBUG] Total host entries returned: {len(host_entries)}")

        if not host_entries:
            print(f"[WARN] No hostname entries found in response for {fqdn}")
            print("==== Reverse Lookup Complete ====\n")
            return result

        # Search for matches in cnameFrom / cnameTo / edgeHostname
        full_hit = None
        partial_hit = None
        for entry in host_entries:
            if not isinstance(entry, dict):
                continue

            cname_from = entry.get("cnameFrom", "").lower()
            cname_to = entry.get("cnameTo", "").lower()
            edge_hostname = entry.get("stagingEdgeHostname", "").lower()

            if fqdn in (cname_from, cname_to, edge_hostname):
                full_hit = entry
            elif fqdn in cname_from or fqdn in cname_to:
                partial_hit = entry

        hit = full_hit or partial_hit
        if not hit:
            if debug:
                print(f"[WARN] No results found for {fqdn}")
                print("==== Reverse Lookup Complete ====\n")
            return result

        group_id = hit.get("groupId")
        property_name = hit.get("propertyName", "UNKNOWN")

        # Strip prefixes and suffixes
        stripped = property_name or "UNKNOWN"
        if stripped.lower().startswith("sd-"):
            stripped = stripped[3:]

        for suffix in ["-nonprod", "-prod", "-non-prod", "-production"]:
            if stripped.lower().endswith(suffix):
                stripped = stripped[: -len(suffix)]
                break

        stripped_property_name = stripped

        # Normalize helper
        def normalize_name(name: str) -> str:
            return re.sub(r'[^a-z0-9]', '', name.lower())

        # Compare stripped property vs CLI access group name
        match_access_group = normalize_name(stripped_property_name) == normalize_name(access_group)

        result.update({
            "found": True,
            "groupId": group_id,
            "propertyName": property_name,
            "accessGroupName": access_group,
            "strippedPropertyName": stripped_property_name,
            "matchAccessGroup": match_access_group,
            "matchType": "full" if full_hit else "partial",
        })

        if debug:
            print(f"[DEBUG] Comparing '{stripped_property_name}' ↔ '{access_group}' → Match={match_access_group}")
            print(f"[INFO] FQDN: {fqdn}")
            print(f"[INFO] Group ID: {group_id}")
            print(f"[INFO] Property Name: {property_name}")
            print(f"[INFO] Stripped Property: {stripped_property_name}")
            print(f"[INFO] Access Group: {access_group}")
            print(f"[INFO] Property : AccessGroup Match: {match_access_group}")
            print(f"[INFO] Match Type: {'Full' if full_hit else 'Partial'}")
            print("==== Reverse Lookup Complete ====\n")

        return result

    except Exception as e:
        print(f"[ERROR] reverse_fqdn_lookup failed: {e}")
        return result
