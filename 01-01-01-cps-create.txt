#!/usr/bin/env python
# ==========================================================
#  Akamai Entitlement Validator (Level 2 Validation)
# ==========================================================
#  Description:
#    Validates that an FQDN and certificate enrollment belong
#    to the specified Akamai Access Group by examining naming
#    conventions and mapping relationships across:
#      • CPS (Certificate Provisioning System)
#      • AppSec (Security Configurations & Policies)
#      • PAPI (Properties / Site Delivery Configs)
#
#  Key Features:
#    - Full EdgeGrid-authenticated Akamai session
#    - Lightweight, read-only lookups
#    - Dumps raw JSON responses to ./output/
#    - Prints a concise entitlement summary
#    - Exports PIPELINE_RESULT=AUTHORIZED or UNAUTHORIZED
#    - Always exits cleanly (status 0)
#
#  Usage:
#    python akamai_entitlement_validator.py \
#      --section APAC \
#      --access-group AppSec \
#      --fqdn login.hsbc.com \
#      --enrollment-id 104532 \
#      --debug
#
#  Optional:
#    --dry-run        Simulate only (no API calls)
#
#  Output:
#    ./output/raw_cps.json
#    ./output/raw_appsec.json
#    ./output/raw_papi.json
#    ./output/entitlement_summary_<fqdn>.json
# ==========================================================

import argparse
import json
import os
import sys
import traceback
import requests
from akamai.edgegrid import EdgeGridAuth
from requests.sessions import Session

# ----------------------------------------------------------
#  Global constants
# ----------------------------------------------------------
OUTPUT_DIR = "output"
os.makedirs(OUTPUT_DIR, exist_ok=True)

REGION_SETTINGS = {
    "APAC": {"contractId": "ctr_ABC123", "groupId": "grp_45678"},
    "EMEA": {"contractId": "ctr_DEF456", "groupId": "grp_98765"},
    "AMER": {"contractId": "ctr_XYZ789", "groupId": "grp_54321"},
}

# ----------------------------------------------------------
#  Setup session
# ----------------------------------------------------------
def setup_session(section):
    import configparser
    from akamai.edgegrid import EdgeGridAuth

    edgerc_path = os.path.expanduser("~/.edgerc")
    if not os.path.exists(edgerc_path):
        print(f"[FAILURE] Missing .edgerc file at {edgerc_path}")
        sys.exit(1)

    config = configparser.ConfigParser()
    config.read(edgerc_path)

    if section not in config:
        print(f"[FAILURE] Section [{section}] not found in .edgerc")
        sys.exit(1)

    baseurl = "https://{}/".format(config[section].get("host"))
    s = Session()
    s.auth = EdgeGridAuth.from_edgerc(config, section)
    s.headers.update({"Content-Type": "application/json"})
    return s, baseurl

# ----------------------------------------------------------
#  Fetch helpers (CPS, AppSec, PAPI)
# ----------------------------------------------------------
def get_cps_enrollments(session, baseurl):
    url = f"{baseurl}cps/v2/enrollments"
    r = session.get(url)
    r.raise_for_status()
    return r.json()

def get_appsec_configs(session, baseurl):
    url = f"{baseurl}appsec/v1/configs"
    r = session.get(url)
    r.raise_for_status()
    return r.json()

def get_papi_properties(session, baseurl, contract_id, group_id):
    url = f"{baseurl}papi/v1/properties?contractId={contract_id}&groupId={group_id}"
    r = session.get(url)
    r.raise_for_status()
    return r.json()

# ----------------------------------------------------------
#  Entitlement discovery & validation
# ----------------------------------------------------------
def discover_entitlement(section, access_group, fqdn, enrollment_id=None, dry_run=False, debug=False):
    result = {"section": section, "access_group": access_group, "fqdn": fqdn, "authorized": False}
    try:
        if dry_run:
            print("[INFO] Dry-run mode enabled — skipping API calls.")
            return result

        session, baseurl = setup_session(section)
        region_info = REGION_SETTINGS.get(section, {})
        contract_id = region_info.get("contractId")
        group_id = region_info.get("groupId")

        # --- CPS ---
        print("[INFO] Fetching CPS enrollments ...")
        cps_data = get_cps_enrollments(session, baseurl)
        with open(f"{OUTPUT_DIR}/raw_cps.json", "w") as f: json.dump(cps_data, f, indent=2)

        matched_cps = [e for e in cps_data.get("enrollments", []) if fqdn in json.dumps(e)]
        print(f"[INFO] Found {len(matched_cps)} CPS matches for {fqdn}")

        # --- AppSec ---
        print("[INFO] Fetching AppSec configurations ...")
        appsec_data = get_appsec_configs(session, baseurl)
        with open(f"{OUTPUT_DIR}/raw_appsec.json", "w") as f: json.dump(appsec_data, f, indent=2)

        matched_appsec = [c for c in appsec_data.get("configurations", []) if access_group in json.dumps(c)]
        print(f"[INFO] Found {len(matched_appsec)} AppSec matches for {access_group}")

        # --- PAPI ---
        print("[INFO] Fetching PAPI properties ...")
        papi_data = get_papi_properties(session, baseurl, contract_id, group_id)
        with open(f"{OUTPUT_DIR}/raw_papi.json", "w") as f: json.dump(papi_data, f, indent=2)

        matched_papi = [p for p in papi_data.get("properties", []) if fqdn in json.dumps(p)]
        print(f"[INFO] Found {len(matched_papi)} PAPI matches for {fqdn}")

        # --- Correlate ---
        if matched_cps and matched_appsec and matched_papi:
            result["authorized"] = True
            print(f"[SUCCESS] {fqdn} is fully mapped to access group {access_group}")
        else:
            print(f"[WARN] Entitlement incomplete for {fqdn} / {access_group}")

        result.update({
            "cps_matches": len(matched_cps),
            "appsec_matches": len(matched_appsec),
            "papi_matches": len(matched_papi),
        })

        # --- Dump summary ---
        summary_path = f"{OUTPUT_DIR}/entitlement_summary_{fqdn.replace('.', '_')}.json"
        with open(summary_path, "w") as f: json.dump(result, f, indent=2)
        print(f"[INFO] Summary written to {summary_path}")

        # --- Export pipeline result ---
        pipeline_status = "AUTHORIZED" if result["authorized"] else "UNAUTHORIZED"
        print(f"PIPELINE_RESULT={pipeline_status}")

    except requests.HTTPError as e:
        print(f"[FAILURE] HTTP {e.response.status_code}: {e.response.text}")
        traceback.print_exc()
        result["error"] = str(e)
    except Exception as e:
        print(f"[FAILURE] Unexpected error: {e}")
        traceback.print_exc()
        result["error"] = str(e)
    finally:
        return result

# ----------------------------------------------------------
#  CLI
# ----------------------------------------------------------
def parse_args():
    parser = argparse.ArgumentParser(description="Akamai Entitlement Validator (Level 2)")
    parser.add_argument("--section", required=True, help="Akamai .edgerc section name")
    parser.add_argument("--access-group", required=True, help="Access group name to validate")
    parser.add_argument("--fqdn", required=True, help="Fully Qualified Domain Name")
    parser.add_argument("--enrollment-id", type=int, help="Optional CPS enrollment ID")
    parser.add_argument("--dry-run", action="store_true", help="Simulate only (no API calls)")
    parser.add_argument("--debug", action="store_true", help="Enable verbose logging")
    return parser.parse_args()

def main():
    args = parse_args()
    print("=====================================================")
    print(" Akamai Entitlement Validator - Level 2 Check")
    print("=====================================================")
    print(f" Section:       {args.section}")
    print(f" Access Group:  {args.access_group}")
    print(f" FQDN:          {args.fqdn}")
    print(f" Enrollment ID: {args.enrollment_id or '(auto)'}")
    print(f" Dry-Run:       {args.dry_run}")
    print("-----------------------------------------------------")

    discover_entitlement(
        args.section,
        args.access_group,
        args.fqdn,
        args.enrollment_id,
        args.dry_run,
        args.debug
    )

    print("-----------------------------------------------------")
    print(" Validation completed.")
    print("=====================================================")

if __name__ == "__main__":
    main()
