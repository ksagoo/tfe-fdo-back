#!/usr/bin/env python3
"""
===============================================================================
   Akamai Entitlement Validator Suite  (v2.0 Final)
===============================================================================

   Description:
   ---------------------------------------------------------------------------
   Validates entitlements for a given FQDN and Access Group across Akamai:
       • CPS    (Certificate Provisioning System)
       • AppSec (Application Security Configurations)
       • PAPI   (Property Manager API)

   The validator checks whether a hostname (FQDN) and access group pairing
   is authorized across Akamai platforms by detecting:
       - Full matches   → FQDN and Access Group both align
       - Partial matches → Only one element aligns (FQDN or Access Group)

   Generates both:
       • A human-readable terminal summary
       • A structured JSON report saved under: ./output/entitlement_summary_<fqdn>.json

   ---------------------------------------------------------------------------
   Usage:
       python akamai_entitlement_validator-v2.py \
           --section <ENV_SECTION> \
           --fqdn <FQDN> \
           --access-group <ACCESS_GROUP> \
           [--debug] [--ci]

   Example:
       python akamai_entitlement_validator-v2.py \
           --section DEV \
           --fqdn epspos-dev-059test.hsbc.com.hk \
           --access-group ServiceNow-itilUser \
           --debug

   ---------------------------------------------------------------------------
   Arguments:
       --section        Environment section name (e.g. DEV, PROD)
       --fqdn           Fully Qualified Domain Name to validate
       --access-group   Access group or role for entitlement check
       --debug          Enables detailed output and raw JSON capture
       --ci             Enables CI-safe mode (no ANSI colors in output)

   Exit Codes:
       0 = Authorized (Full or Mixed Match)
       1 = Unauthorized (No Valid Entitlement Found)

   ---------------------------------------------------------------------------
   Author:    <Your Name / Team>
   Created:   October 2025
   Version:   2.0 Final
===============================================================================
"""

import os
import sys
import json
import argparse
import traceback
from datetime import datetime
from akamai.edgegrid import EdgeGridAuth
import requests

# =============================================================================
# Argument Parsing and Helper Functions
# =============================================================================

def parse_args():
    parser = argparse.ArgumentParser(description="Akamai Entitlement Validator Suite")
    parser.add_argument("--section", required=True, help="Environment section (e.g. DEV, PROD)")
    parser.add_argument("--fqdn", required=True, help="FQDN to validate")
    parser.add_argument("--access-group", required=True, help="Access group to validate")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    parser.add_argument("--ci", action="store_true", help="CI-safe mode (plain text output, no ANSI colors)")
    return parser.parse_args()


def print_summary_line(msg, ci=False, color=None):
    """Handles CI-safe or colored console output."""
    if ci or not sys.stdout.isatty():
        print(msg)
    else:
        colors = {
            "green": "\033[92m",
            "yellow": "\033[93m",
            "red": "\033[91m",
            "cyan": "\033[96m",
            "reset": "\033[0m"
        }
        if color and color in colors:
            print(f"{colors[color]}{msg}{colors['reset']}")
        else:
            print(msg)


def sanitize_filename(name):
    """Clean unsafe characters for filenames."""
    import re
    return re.sub(r'[^a-zA-Z0-9_.-]', '_', name)


def setup_session(section):
    """Initialize Akamai EdgeGrid session using .edgerc section."""
    import akamai.edgegrid.edgegrid as edgegrid
    from requests.sessions import Session
    from akamai.edgegrid import EdgeGridAuth
    from akamai.edgegrid.edgegrid_config import EdgeRc

    edgerc = EdgeRc(os.path.expanduser("~/.edgerc"))
    baseurl = edgerc.get(section, "host")
    session = requests.Session()
    session.auth = EdgeGridAuth.from_edgerc(edgerc, section)
    session.headers.update({"Content-Type": "application/json"})
    return session, baseurl


# =============================================================================
# Core Validation Logic
# =============================================================================

def check_cps(session, base_url, fqdn, debug=False):
    """Validate against CPS API."""
    url = f"https://{base_url}/cps/v2/enrollments?contractId=V-5A82MTA"
    if debug:
        print(f"[INFO] CPS lookup: {url}")
    result = {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}
    try:
        resp = session.get(url)
        data = resp.json()
        for item in data.get("enrollments", []):
            cn = item.get("csr", {}).get("cn", "")
            if fqdn == cn:
                result["found"] = True
                result["matches"].append({"id": item["id"], "cn": cn, "matchType": "full"})
            elif fqdn in cn:
                result["partial"] = True
                result["partial_matches"].append({"id": item["id"], "cn": cn, "matchType": "partial", "reason": "fqdn_only"})
        if debug:
            print(f"[RESULT] CPS: {'FOUND' if result['found'] else 'PARTIAL MATCH' if result['partial'] else 'NOT FOUND'}")
    except Exception as e:
        print(f"[ERROR] CPS lookup failed: {e}")
        if debug:
            traceback.print_exc()
    return result


def check_appsec(session, base_url, fqdn, access_group, debug=False):
    """Validate against AppSec API."""
    url = f"https://{base_url}/appsec/v1/configs?contractId=V-5A82MTA&groupId=272095"
    if debug:
        print(f"[INFO] AppSec lookup: {url}")
    result = {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}
    try:
        resp = session.get(url)
        data = resp.json()
        for item in data.get("configurations", []):
            name = item.get("name", "")
            if access_group in name and fqdn in name:
                result["found"] = True
                result["matches"].append({"id": item["id"], "name": name, "matchType": "full"})
            elif access_group in name:
                result["partial"] = True
                result["partial_matches"].append({"id": item["id"], "name": name, "matchType": "partial", "reason": "access_group_only"})
        if debug:
            print(f"[RESULT] AppSec: {'FOUND' if result['found'] else 'PARTIAL MATCH' if result['partial'] else 'NOT FOUND'}")
    except Exception as e:
        print(f"[ERROR] AppSec lookup failed: {e}")
        if debug:
            traceback.print_exc()
    return result


def check_papi(session, base_url, fqdn, access_group, debug=False):
    """Validate against PAPI API."""
    url = f"https://{base_url}/papi/v1/hostnames"
    if debug:
        print(f"[INFO] PAPI lookup: {url}")
    result = {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}
    try:
        resp = session.get(url)
        data = resp.json()
        for host in data.get("hostnames", []):
            cname = host.get("cnameFrom", "")
            prop = host.get("propertyName", "")
            if fqdn == cname:
                result["found"] = True
                result["matches"].append({"propertyName": prop, "cnameFrom": cname, "matchType": "full"})
            elif fqdn.split(".")[0] in cname:
                result["partial"] = True
                result["partial_matches"].append({"propertyName": prop, "cnameFrom": cname, "matchType": "partial", "reason": "access_group_only"})
        if debug:
            print(f"[RESULT] PAPI: {'FOUND' if result['found'] else 'PARTIAL MATCH' if result['partial'] else 'NOT FOUND'}")
    except Exception as e:
        print(f"[ERROR] PAPI lookup failed: {e}")
        if debug:
            traceback.print_exc()
    return result


# =============================================================================
# Main Entry Point
# =============================================================================

def main():
    args = parse_args()
    print_summary_line("\nAkamai Entitlement Validator Suite", ci=args.ci, color="cyan")
    print_summary_line("=" * 60, ci=args.ci)

    print(f"Section:      {args.section}")
    print(f"Access Group: {args.access_group}")
    print(f"FQDN:         {args.fqdn}")
    print(f"Debug Mode:   {'ON' if args.debug else 'OFF'}\n")

    session, base_url = setup_session(args.section)

    cps = check_cps(session, base_url, args.fqdn, args.debug)
    appsec = check_appsec(session, base_url, args.fqdn, args.access_group, args.debug)
    papi = check_papi(session, base_url, args.fqdn, args.access_group, args.debug)

    authorized = cps["found"] or appsec["found"] or papi["found"]
    partial = any([cps["partial"], appsec["partial"], papi["partial"]])

    validated_by = []
    if cps["found"]: validated_by.append("CPS")
    elif cps["partial"]: validated_by.append("CPS (partial)")
    if appsec["found"]: validated_by.append("AppSec")
    elif appsec["partial"]: validated_by.append("AppSec (partial)")
    if papi["found"]: validated_by.append("PAPI")
    elif papi["partial"]: validated_by.append("PAPI (partial)")

    if authorized:
        print_summary_line("[SUMMARY] Validation Result: AUTHORIZED", ci=args.ci, color="green")
    elif partial:
        print_summary_line("[SUMMARY] Validation Result: UNAUTHORIZED (PARTIAL MATCH DETECTED)", ci=args.ci, color="yellow")
    else:
        print_summary_line("[SUMMARY] Validation Result: UNAUTHORIZED (NO MATCH FOUND)", ci=args.ci, color="red")

    print_summary_line(f"[SUMMARY] Validated by: {', '.join(validated_by) if validated_by else 'None'}", ci=args.ci)

    summary = {
        "section": args.section,
        "access_group": args.access_group,
        "fqdn": args.fqdn,
        "cps": cps,
        "appsec": appsec,
        "papi": papi,
        "validated_by": validated_by,
        "authorized": authorized
    }

    os.makedirs("output", exist_ok=True)
    outfile = f"output/entitlement_summary_{sanitize_filename(args.fqdn)}.json"
    with open(outfile, "w") as f:
        json.dump(summary, f, indent=4)
    print_summary_line(f"\n[INFO] Summary written to {outfile}", ci=args.ci)

    sys.exit(0 if authorized else 1)


if __name__ == "__main__":
    main()
