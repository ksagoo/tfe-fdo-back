import argparse
import csv
import os
import sys
from datetime import datetime
from requests import Session

# import your function
from reverse_fqdn_lookup import reverse_fqdn_lookup


def main():
    parser = argparse.ArgumentParser(description="Akamai Entitlement Validator Suite")
    parser.add_argument("--section", required=True, help="Section name (e.g., DEV, PROD)")
    parser.add_argument("--fqdn", required=True, help="FQDN to validate")
    parser.add_argument("--access-group", required=True, help="Access group name")
    parser.add_argument("--all-fqdn", action="store_true", help="Check all related FQDNs from PAPI")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    args = parser.parse_args()

    print("\n" + "=" * 60)
    print("Akamai Entitlement Validator Suite")
    print("=" * 60)
    print(f"Section:       {args.section}")
    print(f"Access Group:  {args.access_group}")
    print(f"FQDN:          {args.fqdn}")
    print(f"Debug Mode:    {'ON' if args.debug else 'OFF'}\n")

    base_url = "https://akab-g4z5cm6hrbi64j2v-v2fvfyprabsvw5sd.luna.akamaiapis.net"
    session = Session()
    fqdn_input = args.fqdn.strip().lower()

    # Single lookup for initial FQDN
    result_main = reverse_fqdn_lookup(session, base_url, fqdn_input, args.access_group, args.debug)

    fqdn_results = [result_main]
    fqdn_list = [fqdn_input]

    # If --all-fqdn is specified, fetch all related hostnames from the PAPI response
    if args.all_fqdn and result_main.get("found"):
        print(f"[INFO] Reverse lookup successful for {fqdn_input}")
        print(f"[INFO] Fetching all hostnames via {base_url}/papi/v1/hostnames")

        try:
            resp = session.get(
                f"{base_url}/papi/v1/hostnames",
                headers={"accept": "application/json", "PAPI-Use-Prefixes": "true"},
                timeout=30,
            )
            if resp.status_code == 200:
                data = resp.json() or {}
                host_entries = (
                    (data.get("items"))
                    or (data.get("hostnames", {}).get("items") if isinstance(data.get("hostnames"), dict) else None)
                    or (data.get("hostnames") if isinstance(data.get("hostnames"), list) else None)
                    or []
                )
                fqdn_list = list({entry.get("cnameFrom", "").lower() for entry in host_entries if entry.get("cnameFrom")})
                print(f"[INFO] Retrieved {len(fqdn_list)} FQDNs from PAPI.")
            else:
                print(f"[WARN] Failed to retrieve all FQDNs, HTTP {resp.status_code}")
        except Exception as e:
            print(f"[ERROR] Unable to fetch FQDNs from PAPI: {e}")

    # Deduplicate the FQDNs before running lookups
    fqdn_list = sorted(set(fqdn_list))
    print(f"[INFO] Running reverse lookup for {len(fqdn_list)} FQDNs...\n")

    results = []
    seen_fqdns = set()
    for fqdn in fqdn_list:
        if fqdn in seen_fqdns:
            continue
        seen_fqdns.add(fqdn)
        res = reverse_fqdn_lookup(session, base_url, fqdn, args.access_group, args.debug)
        results.append(res)

    # Write summary CSV
    timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    os.makedirs("output", exist_ok=True)
    csv_path = f"output/reverse_fqdn_summary_{fqdn_input.replace('.', '_')}_{timestamp}.csv"
    with open(csv_path, "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.DictWriter(
            csvfile,
            fieldnames=[
                "FQDN", "AccessGroup", "PropertyName", "NormalizedProperty", "Match"
            ],
        )
        writer.writeheader()
        for res in results:
            writer.writerow({
                "FQDN": fqdn_input,
                "AccessGroup": args.access_group,
                "PropertyName": res.get("propertyName"),
                "NormalizedProperty": res.get("strippedPropertyName"),
                "Match": res.get("matchAccessGroup"),
            })

    print(f"[INFO] Reverse FQDN summary written to: {csv_path}")
    print(f"[INFO] Total FQDNs processed: {len(results)}")
    print("[INFO] All reverse lookups complete.\n")

    # Determine final result summary
    papi_found = any(r.get("found") for r in results)
    appsec_match = any(r.get("matchAccessGroup") for r in results)

    print(f"[RESULT] CPS: PARTIAL MATCH")
    print(f"[RESULT] AppSec: {'FULL MATCH' if appsec_match else 'PARTIAL MATCH'}")
    print(f"[RESULT] PAPI: {'FOUND' if papi_found else 'NOT FOUND'}\n")

    if appsec_match or papi_found:
        print("[SUMMARY] Validation Result: AUTHORIZED")
        print("[SUMMARY] Validated by: CPS (partial), AppSec, PAPI\n")
    else:
        print("[SUMMARY] Validation Result: UNAUTHORIZED\n")


if __name__ == "__main__":
    sys.exit(main())
