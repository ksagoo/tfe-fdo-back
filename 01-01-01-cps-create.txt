#!/usr/bin/env python3
"""
===================================================================================
                           LDAP Lookup & Group Membership Script
===================================================================================
Script Name:
    ldap_lookup.py

Description:
    This script queries the internal LDAP/AD API endpoint and retrieves user details,
    including group memberships. It supports checking membership, listing groups,
    searching by substring/regex, and exporting JSON.

Parameters:
    --base (required)            : Base API URL (e.g., https://.../api/v1/ldap)
    --user (required)            : User ID (e.g., 45384191)

    --summary (optional)         : Print user summary (default if no other option given)
    --groups (optional)          : Print only group memberships
    --is-member (optional)       : Check if user is in a group (substring match unless --exact)
    --exact (optional)           : Use exact match for --is-member
    --find (optional)            : Find groups by substring
    --find-regex (optional)      : Find groups by regex
    --save-json (optional)       : Save raw API JSON response to a file
    --verify-ca (optional)       : Path to CA certificate file for HTTPS verification.
                                   Default is insecure mode (verify=False, warning suppressed).

Usage:
    - Print summary of a user:
        python ldap_lookup.py --base https://apprunner.hk.hsbc/cached-ldap-looker-upperer/api/v1/ldap --user 45384191 --summary

    - List groups only:
        python ldap_lookup.py --base https://apprunner.hk.hsbc/cached-ldap-looker-upperer/api/v1/ldap --user 45384191 --groups

    - Check membership (substring match):
        python ldap_lookup.py --base ... --user 45384191 --is-member "O365"

    - Check exact membership:
        python ldap_lookup.py --base ... --user 45384191 --is-member "CN=Infdor-O365-AllowAccess,...,DC=HSBC" --exact

    - Find groups containing substring:
        python ldap_lookup.py --base ... --user 45384191 --find "Azure"

    - Find groups using regex:
        python ldap_lookup.py --base ... --user 45384191 --find-regex "^CN=Infdor-.*O365"

    - Save JSON for inspection:
        python ldap_lookup.py --base ... --user 45384191 --save-json my_ldap.json

    - Run with CA cert verification:
        python ldap_lookup.py --base ... --user 45384191 --summary --verify-ca hsbc-ca.pem
===================================================================================
"""

import argparse
import json
import os
import re
from typing import Any, Dict, List

import requests
import urllib3

# Disable warnings by default
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def _headers_from_env() -> Dict[str, str]:
    headers = {"Accept": "application/json"}
    bearer = os.getenv("LDAP_BEARER")
    cookies = os.getenv("LDAP_COOKIES")
    if bearer:
        headers["Authorization"] = f"Bearer {bearer}"
    if cookies:
        headers["Cookie"] = cookies
    return headers


def fetch_user_json(base_url: str, user_id: str, ca_path: str = None, timeout: float = 20.0) -> Dict[str, Any]:
    url = f"{base_url.rstrip('/')}/{user_id}"
    headers = _headers_from_env()

    if ca_path:
        resp = requests.get(url, headers=headers, timeout=timeout, verify=ca_path)
    else:
        resp = requests.get(url, headers=headers, timeout=timeout, verify=False)

    resp.raise_for_status()
    return resp.json()


def _extract_groups(payload: Dict[str, Any]) -> List[str]:
    if "memberOf" in payload and isinstance(payload["memberOf"], list):
        return sorted(set(payload["memberOf"]), key=str.casefold)
    return []


def print_summary(payload: Dict[str, Any]) -> None:
    fields = [
        ("displayName", payload.get("displayName")),
        ("mail", payload.get("mail")),
        ("sAMAccountName", payload.get("sAMAccountName")),
        ("employeeId", payload.get("employeeId")),
        ("department", payload.get("department")),
        ("company", payload.get("company")),
    ]
    print("== User Summary ==")
    for k, v in fields:
        if v:
            print(f"{k:18}: {v}")

    groups = _extract_groups(payload)
    print(f"\nGroups ({len(groups)}):")
    for g in groups:
        print(f"  - {g}")


def is_member(payload: Dict[str, Any], group: str, exact: bool = False) -> bool:
    groups = _extract_groups(payload)
    if exact:
        return any(g.strip().casefold() == group.strip().casefold() for g in groups)
    return any(group.lower() in g.lower() for g in groups)


def find_groups(payload: Dict[str, Any], pattern: str, regex: bool = False) -> List[str]:
    groups = _extract_groups(payload)
    if regex:
        rx = re.compile(pattern, re.IGNORECASE)
        return [g for g in groups if rx.search(g)]
    return [g for g in groups if pattern.lower() in g.lower()]


def main():
    ap = argparse.ArgumentParser(description="Fetch and query LDAP/AD details from an internal API.")
    ap.add_argument("--base", required=True, help="Base API URL (e.g. https://.../api/v1/ldap)")
    ap.add_argument("--user", required=True, help="User ID (e.g. 45384191)")

    ap.add_argument("--summary", action="store_true", help="Print user summary")
    ap.add_argument("--groups", action="store_true", help="List only groups")
    ap.add_argument("--is-member", metavar="GROUP", help="Check membership (substring or exact match)")
    ap.add_argument("--exact", action="store_true", help="Use exact match for --is-member")
    ap.add_argument("--find", metavar="PATTERN", help="Find groups by substring")
    ap.add_argument("--find-regex", metavar="REGEX", help="Find groups by regex")
    ap.add_argument("--save-json", metavar="PATH", help="Save fetched JSON to file")
    ap.add_argument("--verify-ca", metavar="CA_PATH", help="Path to CA cert for TLS verification")

    args = ap.parse_args()

    payload = fetch_user_json(args.base, args.user, ca_path=args.verify_ca)
    if args.save_json:
        with open(args.save_json, "w", encoding="utf-8") as f:
            json.dump(payload, f, indent=2)

    did_any = False
    if args.summary or (not args.groups and not args.is_member and not args.find and not args.find_regex):
        print_summary(payload)
        did_any = True

    if args.groups:
        for g in _extract_groups(payload):
            print(g)
        did_any = True

    if args.is_member:
        print("YES" if is_member(payload, args.is_member, args.exact) else "NO")
        did_any = True

    if args.find:
        for g in find_groups(payload, args.find):
            print(g)
        did_any = True

    if args.find_regex:
        for g in find_groups(payload, args.find_regex, regex=True):
            print(g)
        did_any = True

    if not did_any:
        print("No action selected. Use --summary, --groups, --is-member, --find, or --find-regex.")


if __name__ == "__main__":
    main()
