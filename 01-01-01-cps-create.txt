from urllib.parse import urljoin


if not check_group_exists(session, base_url, access_group, debug=debug):
    print(f"[ERROR] Access Group '{access_group}' does not exist â€” aborting validation.")
    return

def check_group_exists(session, base_url, group_name, debug=False):
    """
    Checks if an Akamai Access Group already exists in the account.

    Args:
        session: Authenticated Akamai EdgeGrid session
        base_url (str): Base API hostname (e.g., https://akab-xxxx.luna.akamaiapis.net/)
        group_name (str): Target access group name
        debug (bool): Optional debug output toggle

    Returns:
        bool: True if the group exists, False otherwise
    """
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}

        response = session.get(url, headers=headers, timeout=30)
        if debug:
            print(f"[INFO] Access Group lookup: {url}")
            print(f"[DEBUG] HTTP {response.status_code}")

        if response.status_code != 200:
            print(f"[ERROR] Failed to fetch groups: {response.status_code} - {response.text[:300]}")
            return False

        groups_data = response.json()

        # Some tenants return an object like {"groups": [...]}, handle both
        groups = groups_data.get("groups", groups_data)

        group_name_l = group_name.lower().strip()
        for g in groups:
            if group_name_l == g.get("groupName", "").lower().strip():
                if debug:
                    print(f"[DEBUG] Group found: {g.get('groupName')} (ID: {g.get('groupId')})")
                return True

        if debug:
            print(f"[DEBUG] Group '{group_name}' not found in {len(groups)} entries.")

        return False

    except Exception as e:
        print(f"[ERROR] check_group_exists() failed: {e}")
        return False
