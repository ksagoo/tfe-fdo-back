# =============================================================================
# PAPI Check (Universal parser with full + nested formats)
# =============================================================================
def check_papi(session, base_url, fqdn, access_group, debug=False):
    url = f"{base_url}/papi/v1/hostnames"
    print(f"[INFO] PAPI lookup: {url}")
    matches, partials = [], []
    try:
        resp = session.get(url, timeout=(10, 60))
        data = safe_json(resp)
        if debug:
            write_json(data, f"output/raw_papi_{sanitize_filename(fqdn)}.json")

        fqdn_l = fqdn.lower().rstrip(".")
        ag_l = access_group.lower()

        # --- Flatten all possible hostname entries ---
        hosts = []
        if isinstance(data, dict):
            if "hostnames" in data:
                # hostnames may be a list or a dict containing items
                if isinstance(data["hostnames"], list):
                    hosts.extend(data["hostnames"])
                elif isinstance(data["hostnames"], dict):
                    hosts.extend(data["hostnames"].get("items", []))
            elif "items" in data:
                hosts.extend(data["items"])
        elif isinstance(data, list):
            hosts.extend(data)

        if debug:
            print(f"[DEBUG] PAPI host entries found: {len(hosts)}")

        # --- Evaluate matches ---
        for h in hosts:
            cname_from = str(h.get("cnameFrom", "") if isinstance(h, dict) else h).lower().rstrip(".")
            prop_name = str(h.get("propertyName", "") if isinstance(h, dict) else "").lower()

            fqdn_match = fqdn_l == cname_from or fqdn_l in cname_from
            ag_match = ag_l in prop_name

            if fqdn_match and ag_match:
                matches.append({
                    "propertyName": h.get("propertyName"),
                    "cnameFrom": h.get("cnameFrom"),
                    "matchType": "full"
                })
                if debug:
                    print(f"[DEBUG] PAPI FULL → cnameFrom={cname_from}, property={prop_name}")
            elif fqdn_match or ag_match:
                reason = "fqdn_only" if fqdn_match else "access_group_only"
                partials.append({
                    "propertyName": h.get("propertyName"),
                    "cnameFrom": h.get("cnameFrom"),
                    "matchType": "partial",
                    "reason": reason
                })
                if debug:
                    print(f"[DEBUG] PAPI PARTIAL → cnameFrom={cname_from}, property={prop_name}, reason={reason}")

        result = {
            "found": bool(matches),
            "partial": bool(partials) and not matches,
            "url": url,
            "matches": matches,
            "partial_matches": partials
        }

        print(f"[RESULT] PAPI: {'FOUND' if matches else ('PARTIAL MATCH' if partials else 'NOT FOUND')}")
        return result

    except Exception as e:
        print(f"[ERROR] PAPI lookup failed: {e}")
        if debug:
            traceback.print_exc()
        return {"found": False, "partial": False, "url": url, "matches": [], "partial_matches": []}
