"""
===================================================================================
                           Akamai Security Configuration Activation Script
===================================================================================
Script Name:
    Akamai Security Configuration Activation Script
Description:
    This script activates a security configuration on the Akamai platform, allowing 
    users to specify either a configuration name or a configuration ID. It also 
    supports the comparison of a previous active configuration version with the new 
    version to be activated, and allows users to check the status of ongoing activations.
    The script handles authentication via the .edgerc file using Akamai EdgeGrid API.

Parameters:
    --config_id (optional)        : The ID of the security configuration. Use this or --config_name.
    --config_name (optional)      : The name of the security configuration. Use this or --config_id.
    --config_version (required)   : The version of the security configuration to activate (format: 'v1', 'v2', etc.)
    --network (optional)          : The environment for activation ('staging' or 'production'). Default is 'staging'.
    --note (optional)             : Note to include with the activation. Default is 'New Version to Activate'.
    --emails (optional)           : Notification emails for activation status. Default is 'aactivation@test.com'.
    --edgerc (optional)           : Path to the .edgerc file for Akamai API authentication. Default is '~/.edgerc'.
    --section (optional)          : Section name in the .edgerc file. Default is 'default'.
    --activation_id (optional)    : The activation ID to check the status of an ongoing activation.
    --compare (optional)          : Compare the current active version with the new one ('Y' or 'N'). Default is 'N'.
    --create (optional)           : Apply changes if 'Y' (default is 'N' - comparison only without activation).

Usage:
    - Compare versions without activating:
        python activate_security.py --config_name "Corporate Sites WAF" --config_version v9 --compare Y --create N
    
    - Activate configuration by ID with comparison:
        python activate_security.py --config_id 7180 --config_version v9 --network staging --compare Y --create Y
    
    - Check the activation status by providing the activation ID:
        python activate_security.py --activation_id 1234

===================================================================================
"""

import os
import argparse
import requests
import time
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/".rstrip('/') + '/'
        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section_name)
        print("Session setup successful.")
        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Retrieve config ID and active version by name
def get_config_id_by_name(session, base_url, config_name, network):
    # Implementation remains the same
    pass

# Activate the security configuration
def activate_security_configuration(session, base_url, config_id, config_version, network, note, emails):
    # Proceed with activation
    activation_url = urljoin(base_url, "appsec/v1/activations")
    payload = {
        "action": "ACTIVATE",
        "activationConfigs": [{"configId": config_id, "configVersion": config_version}],
        "network": network.upper(),
        "note": note,
        "notificationEmails": emails
    }

    headers = {"accept": "application/json", "content-type": "application/json"}

    response = session.post(activation_url, json=payload, headers=headers)
    
    if response.status_code == 200:
        print("Security configuration activation initiated successfully.")
        print(json.dumps(response.json(), indent=4))
        return response.json().get('activationId')
    else:
        print(f"Failed to activate configuration. Status Code: {response.status_code}")
        print(response.text)
        return None

# Compare two versions
def compare_versions(session, base_url, config_id, from_version, to_version):
    # Implementation remains the same
    pass

# Monitor activation status until 'ACTIVATED'
def monitor_activation_status(session, base_url, activation_id):
    print(f"Checking activation status for ID: {activation_id}")
    status = get_activation_status(session, base_url, activation_id)
    
    # Loop until the status becomes 'ACTIVATED'
    while status != "ACTIVATED":
        print(f"Activation request in status '{status}', waiting for it to be 'ACTIVATED'...")
        time.sleep(30)
        status = get_activation_status(session, base_url, activation_id)

    print("The activation has been completed. The new version is now active.")
    get_activation_status(session, base_url, activation_id, detailed=True)

# Main function to handle arguments and perform activation or comparison
if __name__ == "__main__":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="Activate Akamai security configuration, compare versions, and check activation status")
    
    parser.add_argument("--config_id", type=int, help="The ID of the security configuration")
    parser.add_argument("--config_name", help="The name of the security configuration")
    parser.add_argument("--config_version", type=str, help="The version of the security configuration to activate in the format 'v1', 'v2', etc.")
    
    # Network and activation options
    parser.add_argument("--network", choices=["staging", "production"], default="staging", help="The network to activate ('staging' or 'production'). Default is 'staging'.")
    parser.add_argument("--note", default="New Version to Activate", help="Optional note to include with the activation")
    parser.add_argument("--emails", nargs="+", default=["aactivation@test.com"], help="Notification emails for activation status")
    
    # Authentication options
    parser.add_argument("--edgerc", default=os.path.expanduser("~/.edgerc"), help="Path to the .edgerc file for Akamai API authentication. Default is '~/.edgerc'.")
    parser.add_argument("--section", default="default", help="Section of the .edgerc file to use (default: 'default').")
    
    # Additional functionality
    parser.add_argument("--activation_id", type=int, help="The activation ID to check the status")
    parser.add_argument("--compare", choices=["Y", "N"], default="Y", help="Compare the versions ('Y' to compare, default is 'Y').")
    parser.add_argument("--create", choices=["Y", "N"], default="N", help="Apply changes if 'Y', else only outputs comparison. Default is 'N'.")

    # Parse the arguments
    args = parser.parse_args()

    # Set up session with EdgeRc credentials
    session, base_url = setup_session(args.edgerc, args.section)

    if args.activation_id:
        monitor_activation_status(session, base_url, args.activation_id)
    else:
        # If activation_id is not provided, config_version is required
        if not args.config_version:
            parser.error("--config_version is required when activation_id is not provided")

        # Strip 'v' from the config_version input
        config_version = int(args.config_version.lstrip('v'))

        # If config_name is provided, retrieve config_id and active version
        if args.config_name and not args.config_id:
            args.config_id, active_version = get_config_id_by_name(session, base_url, args.config_name, args.network)
            print(f"Using config ID: {args.config_id}, Active version for {args.network}: {active_version}")
        elif args.config_id:
            active_version = list_config_versions(session, base_url, args.config_id, args.network)

        # Compare versions if --compare is set to Y
        if args.compare == "Y" and active_version:
            compare_versions(session, base_url, args.config_id, active_version, config_version)

        # Activate only if --create is set to Y
        if args.create == "Y":
            activation_id = activate_security_configuration(session, base_url, args.config_id, config_version, args.network, args.note, args.emails)
            if activation_id:
                print(f"Activation initiated. Activation ID: {activation_id}")
                monitor_activation_status(session, base_url, activation_id)
        else:
            print("Comparison only - no activation triggered. Use --create Y to activate.")
