#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
===================================================================================
                                Akamai IAM Group Management Script
===================================================================================
Script Name:
    Akamai IAM Group Management Script

Description:
    This script:
    - Authenticates with Akamai IAM API.
    - Fetches group details based on group name or ID.
    - Retrieves a list of users assigned to a specific group.

Parameters:
    --group_name           : The name of the group to search for.
    --group_id             : The ID of the group to search for.
    --list_users           : If set, retrieves the users in the specified group.
    --env                  : The environment (DEV or PROD). Default is DEV.
    --edgerc_file          : Path to the .edgerc file. Default is '~/.edgerc'.
    --section_name         : Section name in the .edgerc file. Default is 'default'.

Usage:
    - To get all groups:
        python script.py

    - To search for a group by name:
        python script.py --group_name "MyGroupName"

    - To search for a group by ID:
        python script.py --group_id "123456"

    - To list users of a specific group:
        python script.py --group_id "123456" --list_users
===================================================================================
"""

import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to set up the session using the .edgerc file for authentication
def setup_session(edgerc_file, section_name):
    """
    Sets up an authenticated session with Akamai IAM API.
    
    Args:
        edgerc_file (str): Path to the .edgerc authentication file.
        section_name (str): The section name in .edgerc to use.

    Returns:
        session (requests.Session): Authenticated session.
        base_url (str): Akamai API base URL.
    """
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Function to get Akamai IAM groups (fetch all or specific group)
def get_akamai_groups(session, base_url, group_name=None, group_id=None):
    """
    Fetches Akamai IAM groups. Returns all groups or a specific group if name or ID is provided.

    Args:
        session (requests.Session): Authenticated Akamai session.
        base_url (str): Akamai API base URL.
        group_name (str, optional): The name of the group to search for.
        group_id (str, optional): The ID of the group to search for.

    Returns:
        dict or list: Group details if found, otherwise all groups.
    """
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}

        print(f"Checking groups at URL: {url}")
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()

            # Debugging output: Print full response
            print("Akamai Groups JSON Response:")
            print(json.dumps(groups, indent=4))

            # If no filters, return all groups
            if not group_name and not group_id:
                return groups

            # Search for a specific group
            for group in groups:
                if group_id and str(group["groupId"]) == str(group_id):
                    print(f"Found Group by ID: {group['groupName']} (ID: {group['groupId']})")
                    return group
                elif group_name and group["groupName"].lower() == group_name.lower():
                    print(f"Found Group by Name: {group['groupName']} (ID: {group['groupId']})")
                    return group

            print(f"Group '{group_name or group_id}' not found in Akamai IAM.")
            return None

        else:
            print(f"Failed to retrieve groups: {response.status_code} - {response.text}")
            return None

    except Exception as e:
        print(f"Error fetching group information: {e}")
        return None

# Function to list users in a specific group
def list_users_in_group(session, base_url, group_id):
    """
    Lists users assigned to a specific Akamai IAM group.

    Args:
        session (requests.Session): Authenticated Akamai session.
        base_url (str): Akamai API base URL.
        group_id (str): The ID of the group.

    Returns:
        list: A list of users in the group.
    """
    try:
        url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{group_id}/ui-identities")

url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{group_id}/members")
        headers = {"accept": "application/json"}

        print(f"Retrieving users in Group ID {group_id} at URL: {url}")
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            users = response.json()
            
            if not users:
                print(f"No users found in Group ID {group_id}.")
            else:
                print(f"Users in Group ID {group_id}:")
                for user in users:
                    print(f"- {user['username']} (ID: {user['id']})")

            return users

        else:
            print(f"Failed to retrieve users: {response.status_code} - {response.text}")
            return None

    except Exception as e:
        print(f"Error fetching user information: {e}")
        return None

# Main logic
def main():
    parser = argparse.ArgumentParser(description="Akamai IAM Group Management")
    parser.add_argument("--group_name", help="Group Name to check in IAM.")
    parser.add_argument("--group_id", help="Group ID to check in IAM.")
    parser.add_argument("--list_users", action="store_true", help="List users of the specified group.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="Environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc authentication file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    # Load session
    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)

    # Check for group details
    group_info = None
    if args.group_name or args.group_id:
        group_info = get_akamai_groups(session, base_url, args.group_name, args.group_id)
    
    # If list_users flag is set, fetch users in the group
    if args.list_users:
        if not group_info:
            print("Cannot list users: Group not found.")
        else:
            group_id = group_info["groupId"]
            list_users_in_group(session, base_url, group_id)

if __name__ == "__main__":
    main()

def check_user_in_group(session, base_url, group_id, user_email):
    """Checks if a given user email exists in an Akamai IAM group."""
    try:
        url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{group_id}/members")
        headers = {"accept": "application/json"}

        print(f"Checking if {user_email} exists in Group ID {group_id} at URL: {url}")
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            users = response.json()

            # Debugging: Print the returned JSON user list
            print("Users found in the group:")
            print(json.dumps(users, indent=4))

            # Check if user_email exists in the returned list
            for user in users:
                if user.get("email", "").lower() == user_email.lower():
                    print(f"Match found: {user_email} exists in Group ID {group_id}.")
                    return True

            print(f"No match: {user_email} is NOT found in Group ID {group_id}.")
            return False

        elif response.status_code == 403:
            print(f"API lacks permission to retrieve users. Check Akamai IAM settings.")
        
        elif response.status_code == 404:
            print(f"Group ID {group_id} not found, or it has no assigned users.")

        else:
            print(f"Failed to retrieve users: {response.status_code} - {response.text}")

        return False

    except Exception as e:
        print(f"Error fetching user information: {e}")
        return False

