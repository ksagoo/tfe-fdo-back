"""
===================================================================================
                                Akamai Access Country/Service Name Script
===================================================================================
Script Name:
    Akamai Access Country/Service Name Script

Description:
    This script lists or checks country/service name groups under each regional group 
    for a specified top-level group in the Akamai platform. It uses --env to set 
    the default parent_group_id based on whether it's running in DEV or PROD environment, 
    or it can resolve a parent group dynamically using the provided --parent_group_name. 
    The script only processes top-level groups that contain the specified --group_prefix.

Parameters:
    --env               : The environment (DEV or PROD). Default is DEV.
    --parent_group_name : The name of the parent group. Provide either this or --parent_group_id.
    --parent_group_id   : The numeric ID of the parent group. Provide either this or --parent_group_name.
    --group_prefix      : The prefix for filtering top-level groups. Default is 'HSBC-DDoS-KSD'.
    --operation         : Operation mode, either 'list' (default) or 'check'.
    --lob               : Line of Business (LOB) to check in 'check' mode.
    --regions           : Regions to check or list, default to all 5 (APAC, EMEA, AMER, Global, LATAM).
    --country_servicename: Country/service name to check in 'check' mode.
    --output_format     : The format for output, either 'list' (default) or 'json'.
    --output_type       : Output to 'stdout' (default) or 'file'.
    --edgerc_file       : Path to the .edgerc file. Default is '~/.edgerc'.
    --section_name      : Section name in the .edgerc file. Default is 'default'.

Usage:
    - To list country/service name groups in the DEV environment with the default parent group ID:
        python script.py --env=DEV

    - To check if a specific LOB, region, and country/service name exist:
        python script.py --operation=check --lob="LOB" --regions="APAC,EMEA" --country_servicename="AkamaiDevOps"

===================================================================================
"""

import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to set up the session using the .edgerc file for authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')

        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )

        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Function to find the parent group by name or ID
def find_group_by_name_or_id(groups, parent_group_name=None, parent_group_id=None):
    for group in groups:
        if (parent_group_name and group.get("groupName").lower() == parent_group_name.lower()) or (parent_group_id and group.get("groupId") == parent_group_id):
            return group
    return None

# Function to list or check country/service groups under regional groups, filtered by group_prefix
def list_or_check_country_service_groups(session, base_url, group_prefix, operation, lob=None, regions=None, country_servicename=None, parent_group_name=None, parent_group_id=None):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()

            # Find the parent group by name or ID
            parent_group = find_group_by_name_or_id(groups, parent_group_name, parent_group_id)

            if parent_group:
                # Print parent group name and group prefix
                print(f"Parent Group: {parent_group.get('groupName')}")
                print(f"Group Prefix: {group_prefix}\n")

                if operation == 'list':
                    country_service_output = {}
                    for top_level_group in parent_group.get("subGroups", []):
                        if top_level_group["groupName"].startswith(group_prefix):
                            lob_name = top_level_group.get("groupName").replace(group_prefix + "-", "")
                            country_service_output[lob_name] = {}

                            for region_group in top_level_group.get("subGroups", []):
                                region_name = region_group.get("groupName").replace(group_prefix + "-" + lob_name + "-", "")
                                country_service_output[lob_name][region_name] = []

                                for service_group in region_group.get("subGroups", []):
                                    country_service_name = service_group.get("groupName").replace(region_group.get("groupName") + "-", "")
                                    country_service_output[lob_name][region_name].append(country_service_name)

                    return country_service_output

                elif operation == 'check':
                    if not lob or not regions or not country_servicename:
                        print("Error: 'lob', 'regions', and 'country_servicename' must be provided in check mode.")
                        return None

                    regions = [region.strip().upper() for region in regions.split(",")]
                    country_servicename = country_servicename.strip().lower()

                    for top_level_group in parent_group.get("subGroups", []):
                        if top_level_group["groupName"].lower().startswith(group_prefix.lower()) and lob.lower() == top_level_group.get("groupName").replace(group_prefix + "-", "").lower():
                            for region_group in top_level_group.get("subGroups", []):
                                region_name = region_group.get("groupName").replace(group_prefix + "-" + lob + "-", "")
                                if region_name.upper() in regions:
                                    for service_group in region_group.get("subGroups", []):
                                        service_group_name = service_group.get("groupName").replace(region_group.get("groupName") + "-", "").lower()
                                        if service_group_name == country_servicename:
                                            print(f"True: Subgroup '{service_group.get('groupName')}' already exists with groupId: {service_group.get('groupId')}")
                                            return True

                    print(f"False: Subgroup for LOB '{lob}', region(s) '{regions}' and country/service name '{country_servicename}' does not exist.")
                    return False
            else:
                print(f"Error: Parent group not found with name '{parent_group_name}' or ID '{parent_group_id}'.")
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"Error fetching group information: {e}")

# Main function that handles argument parsing and logic flow
def main():
    parser = argparse.ArgumentParser(description="List or check country/service name groups under regional groups.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--group_prefix", default="HSBC-DDoS-KSD", help="The prefix for filtering top-level groups. Default is 'HSBC-DDoS-KSD'.")
    parser.add_argument("--operation", choices=["list", "check"], default="list", help="Operation mode: 'list' (default) or 'check'.")
    parser.add_argument("--lob", help="The LOB to check in 'check' mode.")
    parser.add_argument("--regions", help="Regions to check (default: all regions in check mode).")
    parser.add_argument("--country_servicename", help="The country/service name to check in 'check' mode.")
    parser.add_argument("--output_format", choices=["list", "json"], default="list", help="The format for output, either 'list' (default) or 'json'.")
    parser.add_argument("--output_type", choices=["stdout", "file"], default="stdout", help="Output to 'stdout' (default) or 'file'.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)

    # Set the default parent_group_id based on the environment
    if args.env == "DEV":
        default_parent_group_id = 185773
    else:  # PROD
        default_parent_group_id = 1234567

    # Determine the parent group ID to use
    if args.parent_group_id:
        resolved_parent_group_id = args.parent_group_id
    elif args.parent_group_name:
        resolved_parent_group_id = None
    else:
        resolved_parent_group_id = default_parent_group_id

    # List or check country/service groups under regional groups
    result = list_or_check_country_service_groups(session, base_url, args.group_prefix, args.operation, args.lob, args.regions, args.country_servicename, args.parent_group_name, resolved_parent_group_id)

    # Output the result if in 'list' mode
    if args.operation == "list" and result:
        if args.output_format == "list":
            output = ""
            for lob, regions in result.items():
                output += f"{lob}\n"
                for region, services in regions.items():
                    output += f"  - {region}\n"
                    for service in services:
                        output += f"    - {service}\n"
            if args.output_type == "stdout":
                print(output)
            else:
                with open("country_service_list.txt", "w") as f:
                    f.write(output)
        elif args.output_format == "json":
            output_json = json.dumps(result, indent=4)
            if args.output_type == "stdout":
                print(output_json)
            else:
                with open("country_service_list.json", "w") as f:
                    f.write(output_json)

if __name__ == "__main__":
    main()
