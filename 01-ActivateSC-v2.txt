#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
===================================================================================
                           Akamai Security Configuration Activation Script
===================================================================================
Script Name:
    Akamai Security Configuration Activation Script
Description:
    This script activates a security configuration on the Akamai platform, allowing 
    users to specify either a configuration name or a configuration ID. It also 
    supports the comparison of a previous active configuration version with the new 
    version to be activated, and allows users to check the status of ongoing activations.
    The script handles authentication via the .edgerc file using Akamai EdgeGrid API.

Parameters:
    --config_id (optional)        : The ID of the security configuration. Use this or --config_name.
    --config_name (optional)      : The name of the security configuration. Use this or --config_id.
    --config_version (required)   : The version of the security configuration to activate in the format 'v1', 'v2', etc.
    --network (optional)          : The environment for activation ('staging' or 'production'). Default is 'staging'.
    --note (optional)             : Note to include with the activation. Default is 'New Version to Activate'.
    --emails (optional)           : Notification emails for activation status. Default is 'aactivation@test.com'.
    --edgerc (optional)           : Path to the .edgerc file for Akamai API authentication. Default is '~/.edgerc'.
    --section (optional)          : Section name in the .edgerc file. Default is 'default'.
    --activation_id (optional)    : The activation ID to check the status of an ongoing activation.
    --compare (optional)          : Compare the current active version with the new one ('Y' or 'N'). Default is 'N'.

Usage:
    - Activate using a config name and compare versions:
        python activate_security.py --config_name "Corporate Sites WAF" --config_version v9 --network production --compare Y
    
    - Activate using a config ID without version comparison:
        python activate_security.py --config_id 7180 --config_version v9 --network staging --compare N
    
    - Check the activation status by providing the activation ID:
        python activate_security.py --activation_id 1234
    
    - Compare the versions of an existing and new configuration before activation:
        python activate_security.py --config_name "Corporate Sites WAF" --config_version v9 --compare Y

===================================================================================
"""

import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/".rstrip('/') + '/'
        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section_name)
        print("Session setup successful.")
        return session, base_url
    except KeyError as e:
        print(f"Missing required value in .edgerc: {e}")
        exit(1)
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Function to retrieve all configuration names and IDs
def get_config_id_by_name(session, base_url, config_name):
    url = urljoin(base_url, "appsec/v1/configs")
    headers = {"accept": "application/json"}
    response = session.get(url, headers=headers)
    
    if response.status_code == 200:
        configs = response.json().get("configurations", [])
        for config in configs:
            if config["name"] == config_name:
                config_id = config["id"]
                print(f"Found configuration '{config_name}' with ID: {config_id}")
                print("Fetching config versions...")
                active_version = list_config_versions(session, base_url, config_id)
                return config_id, active_version
        print(f"Config name '{config_name}' not found.")
        exit(1)
    else:
        print(f"Failed to fetch configurations. Status Code: {response.status_code}")
        exit(1)

# Function to list all versions of a specific configuration and return the correct active version
def list_config_versions(session, base_url, config_id, network="staging"):
    url = urljoin(base_url, f"appsec/v1/configs/{config_id}/versions")
    headers = {"accept": "application/json"}
    response = session.get(url, headers=headers)
    
    if response.status_code == 200:
        config_data = response.json()
        # Get the production and staging active versions
        production_active_version = config_data.get("productionActiveVersion")
        staging_active_version = config_data.get("stagingActiveVersion")
        
        # Determine which active version to return based on --network
        if network.lower() == "production":
            active_version = production_active_version
        else:
            active_version = staging_active_version

        print(f"Using active version {active_version} for network {network}")

        # Optionally, print available versions and statuses for debug purposes
        versions = config_data.get("versionList", [])
        print(f"Versions for config ID {config_id}:")
        for version in versions:
            production_status = version.get('production', {}).get('status', 'N/A')
            staging_status = version.get('staging', {}).get('status', 'N/A')
            print(f"Version: {version['version']}, Production Status: {production_status}, Staging Status: {staging_status}")

        return active_version  # Return the correct active version
    else:
        print(f"Failed to fetch config versions. Status Code: {response.status_code}")
        print(response.text)
        return None

# Function to activate the security configuration using the correct active version
def activate_security_configuration(session, base_url, config_id, config_version, network, note, emails):
    # Proceed with activation
    activation_url = urljoin(base_url, "appsec/v1/activations")
    payload = {
        "action": "ACTIVATE",
        "activationConfigs": [
            {
                "configId": config_id,
                "configVersion": config_version  # Pass the version to be activated
            }
        ],
        "network": network.upper(),
        "note": note,
        "notificationEmails": emails
    }

    headers = {
        "accept": "application/json",
        "content-type": "application/json"
    }

    response = session.post(activation_url, json=payload, headers=headers)
    
    if response.status_code == 200:
        print("Security configuration activation initiated successfully.")
        print(json.dumps(response.json(), indent=4))
        return response.json().get('activationId')
    else:
        print(f"Failed to activate configuration. Status Code: {response.status_code}")
        print(response.text)
        return None

# Function to get the activation request status
def get_activation_status(session, base_url, activation_id):
    status_url = urljoin(base_url, f"appsec/v1/activations/status/{activation_id}")
    
    headers = {
        "accept": "application/json"
    }

    response = session.get(status_url, headers=headers)
    
    if response.status_code == 200:
        print("Activation Status:")
        print(json.dumps(response.json(), indent=4))
    else:
        print(f"Failed to get activation status. Status Code: {response.status_code}")
        print(response.text)

# Function to compare two versions of a security configuration
def compare_versions(session, base_url, config_id, from_version, to_version):
    compare_url = urljoin(base_url, f"appsec/v1/configs/{config_id}/versions/diff")
    
    payload = {
        "outcomes": ["MODIFIED"],
        "to": to_version,   # Use the version directly as 'v1', 'v2', etc.
        "from": from_version
    }

    headers = {
        "accept": "application/json",
        "content-type": "application/json"
    }

    response = session.post(compare_url, json=payload, headers=headers)
    
    if response.status_code == 200:
        print("Comparison between versions:")
        print(json.dumps(response.json(), indent=4))
    else:
        print(f"Failed to compare versions. Status Code: {response.status_code}")
        print(response.text)

# Main function to handle arguments and perform the activation
if __name__ == "__main__":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="Activate Akamai security configuration, compare versions, and check activation status")
    
    # Arguments for configuration details
    parser.add_argument("--config_id", type=int, help="The ID of the security configuration")
    parser.add_argument("--config_name", help="The name of the security configuration")
    parser.add_argument("--config_version", type=str, required=True, help="The version of the security configuration to activate (format: 'v1', 'v2', etc.)")
    
    # Network and activation options
    parser.add_argument("--network", choices=["staging", "production"], default="staging", help="The network to activate ('staging' or 'production'). Default is 'staging'.")
    parser.add_argument("--note", default="New Version to Activate", help="Optional note to include with the activation")
    parser.add_argument("--emails", nargs="+", default=["aactivation@test.com"], help="Notification emails for activation status")
    
    # Authentication options
    parser.add_argument("--edgerc", default=os.path.expanduser("~/.edgerc"), help="Path to the .edgerc file for Akamai API authentication. Default is '~/.edgerc'.")
    parser.add_argument("--section", default="default", help="Section of the .edgerc file to use (default: 'default').")
    
    # Additional functionality
    parser.add_argument("--activation_id", type=int, help="The activation ID to check the status")
    parser.add_argument("--compare", choices=["Y", "N"], default="N", help="Compare the versions ('Y' to compare, default is 'N').")

    # Parse the arguments
    args = parser.parse_args()

    # Strip 'v' from the config_version input
    if args.config_version.startswith('v'):
        config_version = int(args.config_version[1:])
    else:
        config_version = int(args.config_version)

    # Set up session with EdgeRc credentials
    session, base_url = setup_session(args.edgerc, args.section)

    if args.activation_id:
        # Check the activation status if activation_id is provided
        get_activation_status(session, base_url, args.activation_id)
    else:
        # If config_name is provided, retrieve config_id
        if args.config_name and not args.config_id:
            args.config_id, previous_version = get_config_id_by_name(session, base_url, args.config_name)
            print(f"Using config ID: {args.config_id}, Previous active version: {previous_version}")
        elif args.config_id:
            previous_version = None  # In case the user provides config_id directly, there's no way to know the previous version.

        # Get the active version based on the network (staging/production)
        active_version = list_config_versions(session, base_url, args.config_id, args.network)

        # Compare versions if --compare is set to Y
        if args.compare == "Y" and previous_version:
            compare_versions(session, base_url, args.config_id, previous_version, config_version)

        # Activate the security configuration using the correct active version
        if active_version:
            activation_id = activate_security_configuration(session, base_url, args.config_id, config_version, args.network, args.note, args.emails)
            if activation_id:
                print(f"Activation initiated. Activation ID: {activation_id}")
