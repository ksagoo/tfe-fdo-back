def list_country_service_groups(session, base_url, group_prefix, parent_group_name=None, parent_group_id=None, levels=3, mode='frontdoor'):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()

            parent_group = find_group_by_name_or_id(groups, parent_group_name, parent_group_id)

            if parent_group:
                print(f"Parent Group: {parent_group.get('groupName')}")
                print(f"Group Prefix: {group_prefix}\n")

                country_service_output = {}
                found_groups = False
                for top_level_group in parent_group.get("subGroups", []):
                    if check_case_insensitive_match(group_prefix, [top_level_group["groupName"][:len(group_prefix)]]):
                        found_groups = True
                        lob_name = top_level_group.get("groupName").replace(group_prefix + "-", "")
                        country_service_output[lob_name] = {}

                        if levels >= 2:
                            for region_group in top_level_group.get("subGroups", []):
                                region_name = region_group.get("groupName").replace(group_prefix + "-" + lob_name + "-", "")
                                country_service_output[lob_name][region_name] = []

                                if levels == 3:
                                    for service_group in region_group.get("subGroups", []):
                                        country_service_name = service_group.get("groupName").replace(region_group.get("groupName") + "-", "")
                                        if mode == "akamai":
                                            full_service_name = f"{group_prefix}-{lob_name}-{region_name}-{country_service_name}"
                                        else:
                                            full_service_name = country_service_name
                                        country_service_output[lob_name][region_name].append(full_service_name)

                if not found_groups:
                    print(f"No match found for group prefix '{group_prefix}' under the parent group '{parent_group.get('groupName')}'.")
                return country_service_output
            else:
                print(f"No match found for parent group '{parent_group_name}' with ID '{parent_group_id}'.")
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"Error fetching group information: {e}")

# Main function that handles argument parsing and logic flow
def main():
    parser = argparse.ArgumentParser(description="List or check country/service name groups under regional groups.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--group_prefix", default="HSBC-DDoS-KSD", help="The prefix for filtering top-level groups. Default is 'HSBC-DDoS-KSD'.")
    parser.add_argument("--output_format", choices=["list", "json"], default="list", help="The format for output, either 'list' (default) or 'json'.")
    parser.add_argument("--output_type", choices=["stdout", "file"], default="stdout", help="Output to 'stdout' (default) or 'file'.")
    parser.add_argument("--operation", choices=["list", "check"], default="list", help="The operation mode, either 'list' or 'check'.")
    parser.add_argument("--lob", help="The Line of Business (LOB) name, required for 'check' operation.")
    parser.add_argument("--regions", nargs='+', choices=["APAC", "EMEA", "AMER", "Global", "LATAM"], default=["APAC", "EMEA", "AMER", "Global", "LATAM"], help="The regions to check.")
    parser.add_argument("--country_servicename", help="The country/service name, required for 'check' operation.")
    parser.add_argument("--levels", type=int, choices=[1, 2, 3], default=3, help="Levels to list (1, 2, or 3). Default is 3.")
    parser.add_argument("--mode", choices=["frontdoor", "akamai"], default="frontdoor", help="Mode for listing: 'akamai' or 'frontdoor'. Default is 'frontdoor'.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)

    # Set the default parent_group_id based on the environment
    if args.env == "DEV":
        default_parent_group_id = 185773
    else:  # PROD
        default_parent_group_id = 1234567

    # Determine the parent group ID to use
    if args.parent_group_id:
        resolved_parent_group_id = args.parent_group_id
    elif args.parent_group_name:
        resolved_parent_group_id = None
    else:
        resolved_parent_group_id = default_parent_group_id

    if args.operation == "list":
        country_service_output = list_country_service_groups(session, base_url, args.group_prefix, args.parent_group_name, resolved_parent_group_id, args.levels, args.mode)

        if country_service_output:
            if args.output_format == "list":
                output = ""
                for lob, regions in country_service_output.items():
                    if args.mode == "akamai":
                        lob_output = f"{args.group_prefix}-{lob}"
                    else:
                        lob_output = f"{lob}"
                    output += f"{lob_output}\n"
                    if args.levels >= 2:
                        for region, services in regions.items():
                            if args.mode == "akamai":
                                region_output = f"{args.group_prefix}-{lob}-{region}"
                            else:
                                region_output = f"  - {region}"
                            output += f"  {region_output}\n"
                            if args.levels == 3:
                                for service in services:
                                    if args.mode == "akamai":
                                        service_output = f"{args.group_prefix}-{lob}-{region}-{service}"
                                    else:
                                        service_output = f"    - {service}"
                                    output += f"    {service_output}\n"
                if args.output_type == "stdout":
                    print(output)
                else:
                    file_name = "country_service_list.txt"
                    with open(file_name, "w") as f:
                        f.write(output)
                    print(f"File created: {file_name}")
            elif args.output_format == "json":
                output_json = json.dumps(country_service_output, indent=4)
                if args.output_type == "stdout":
                    print(output_json)
                else:
                    file_name = "country_service_list.json"
                    with open(file_name, "w") as f:
                        f.write(output_json)
                    print(f"File created: {file_name}")

    elif args.operation == "check":
        if not args.lob or not args.country_servicename:
            print("Error: --lob and --country_servicename are required for 'check' operation.")
            return

        # Trim and check in case-insensitive manner for lob and country_servicename
        trimmed_lob = args.lob.strip()
        trimmed_country_servicename = args.country_servicename.strip()

        for region in args.regions:
            exists, group_info = check_group_exists(session, base_url, args.group_prefix, trimmed_lob, region, trimmed_country_servicename, args.parent_group_name, resolved_parent_group_id)
            if exists:
                print(f"True: Subgroup already exists - {group_info}")
            else:
                print(f"False: Subgroup {args.group_prefix}-{trimmed_lob}-{region}-{trimmed_country_servicename} does not exist.")

if __name__ == "__main__":
    main()
