import requests
from typing import Union, Iterable, Optional

def reassign_dos_protection_rate_policies(
    session: requests.Session,
    base_url: str,
    config_id: Union[str, int],
    version: Union[str, int],
    access_group: Optional[str] = None,
    policy_ids: Optional[Iterable[str]] = None,
    exclude_name_prefix: str = "TEMP_",
) -> dict:
    """
    Replace the bypass client list for all DoS / Rate Limiting policies
    attached to non-TEMP security policies within the given config/version.

    - Automatically resolves the correct active Client List ID based on access_group.
    - Updates both legacy and modern payload shapes.
    - Returns full summary of successes/failures.
    """

    summary = {
        "processed_policies": 0,
        "processed_rate_policies": 0,
        "successful": 0,
        "failed": 0,
        "details": []
    }

    # ----------------------------------------------------------
    # STEP 1: Resolve the correct active Client List ID
    # ----------------------------------------------------------
    list_url = f"{base_url}/appsec/v1/network-lists"
    target_list_id = None
    try:
        resp = session.get(list_url)
        resp.raise_for_status()
        all_lists = resp.json().get("networkLists", [])
        for lst in all_lists:
            name = lst.get("name", "")
            if not name or lst.get("deprecated", True):
                continue
            if "Rate Controls Bypass List" in name and access_group in name:
                target_list_id = lst.get("id")
                print(f"[INFO] Using active Client List: {name} (ID {target_list_id})")
                break
    except Exception as e:
        print(f"[WARN] Could not resolve client list automatically: {e}")

    if not target_list_id:
        print("[ERROR] No valid active Client List ID found â€” cannot continue.")
        summary["failed"] += 1
        summary["details"].append({"stage": "resolve_client_list", "error": "No active list found"})
        return summary

    # ----------------------------------------------------------
    # STEP 2: Get all security policies (skip TEMP_)
    # ----------------------------------------------------------
    sp_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies"
    try:
        r = session.get(sp_url)
        r.raise_for_status()
        all_policies = r.json().get("policies", [])
    except Exception as e:
        print(f"[ERROR] Could not list security policies: {e}")
        summary["failed"] += 1
        return summary

    selected = []
    if policy_ids:
        idset = set(str(p) for p in policy_ids)
        selected = [p for p in all_policies if str(p.get("policyId")) in idset]
    else:
        for p in all_policies:
            name = (p.get("policyName") or "").strip()
            if not name.startswith(exclude_name_prefix):
                selected.append(p)

    if not selected:
        print("[INFO] No eligible (non-TEMP) security policies found; skipping DoS reassignment.")
        return summary

    # ----------------------------------------------------------
    # STEP 3: Iterate and update rate policies
    # ----------------------------------------------------------
    for sp in selected:
        sp_id = sp.get("policyId")
        sp_name = sp.get("policyName")
        summary["processed_policies"] += 1

        rp_list_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/security-policies/{sp_id}/rate-policies"
        print(f"[DBG] Listing rate policies for {sp_name} ({sp_id})")

        try:
            lr = session.get(rp_list_url)
            lr.raise_for_status()
            rate_items = lr.json().get("ratePolicies", [])
        except Exception as e:
            print(f"[WARN] Failed to fetch rate policies for {sp_name}: {e}")
            summary["failed"] += 1
            continue

        if not rate_items:
            print(f"[INFO] No rate policies attached to {sp_name}; skipping.")
            continue

        for rp in rate_items:
            rp_id = rp.get("id")
            rp_name = rp.get("name")
            if not rp_id:
                continue

            rp_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/rate-policies/{rp_id}"
            try:
                gr = session.get(rp_url)
                gr.raise_for_status()
                data = gr.json()
            except Exception as e:
                print(f"[WARN] Failed to GET rate policy {rp_name}: {e}")
                summary["failed"] += 1
                continue

            changed = False

            # Legacy structure
            mc = data.get("matchCriteria")
            if isinstance(mc, dict) and "bypassNetworkLists" in mc:
                old = mc.get("bypassNetworkLists", [])
                mc["bypassNetworkLists"] = [target_list_id]
                changed = True
                print(f"[DBG] {rp_name}: bypassNetworkLists {old} -> [{target_list_id}]")

            # Modern structure
            amo = data.get("additionalMatchOptions")
            if isinstance(amo, list):
                for opt in amo:
                    if isinstance(opt, dict) and opt.get("type") == "NetworkListCondition":
                        old_vals = opt.get("values", [])
                        opt["values"] = [target_list_id]
                        changed = True
                        print(f"[DBG] {rp_name}: NetworkListCondition {old_vals} -> [{target_list_id}]")

            if not changed:
                summary["details"].append({
                    "ratePolicyId": rp_id,
                    "name": rp_name,
                    "status": "unchanged"
                })
                continue

            # Remove read-only fields
            for field in ["id", "used", "createDate", "updateDate", "createdBy"]:
                data.pop(field, None)

            try:
                pr = session.put(rp_url, json=data)
                pr.raise_for_status()
                summary["successful"] += 1
                summary["processed_rate_policies"] += 1
                summary["details"].append({
                    "ratePolicyId": rp_id,
                    "name": rp_name,
                    "status": "updated"
                })
                print(f"[INFO] Updated rate policy {rp_name} ({rp_id}) on {sp_name}")
            except Exception as e:
                print(f"[ERROR] Failed to PUT rate policy {rp_name}: {e}")
                summary["failed"] += 1
                summary["details"].append({
                    "ratePolicyId": rp_id,
                    "name": rp_name,
                    "error": str(e)
                })

    print(f"[INFO] DoS reassignment complete. Success: {summary['successful']}  Failed: {summary['failed']}")
    return summary
