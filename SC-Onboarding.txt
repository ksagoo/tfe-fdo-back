def reassign_dos_protection_rate_policies(
    session,
    base_url,
    config_id,
    version,
    access_group,
    template_policy_name_prefix="Security Policy Template",
    target_policy_id=None,          # pass the new policy id here
    activate_clones=True,
):
    """
    For each DoS rate policy attached to this config/version:
      1) If it's still a template-named policy, clone it to SC-<access_group> <suffix>.
      2) Rewrite ALL client list references (IDs or names) to the SC- lists:
         - legacy: additionalMatchOptions/NetworkListCondition
         - new:    matchCriteria/criteria[...] with options.values
      3) PUT the updated policy and re-apply the assignment list to the config.
    """
    list_url      = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/dos-rates"
    clone_url     = f"{base_url}/appsec/v1/rate-policies/clone"
    policy_url_tpl= f"{base_url}/appsec/v1/rate-policies/{{pid}}"

    summary = {"processed": 0, "successful": 0, "failed": 0, "fixed_conditions": 0, "details": []}

    # Build templateID -> clonedID map (used when policies store IDs)
    try:
        id_map = build_cloned_list_id_map(session, base_url, access_group)
    except Exception as e:
        print(f"[WARN] Could not build template→clone list map: {e}")
        id_map = {}

    def _resolve_name_to_id(name_or_id: str) -> str:
        s = str(name_or_id).strip()
        if s.isdigit():
            # if it's a template id and we have the clone id, use it
            return id_map.get(s, s)

        # derive expected SC- name if it looks like a template
        expected = s
        if "Security Policy Template" in s:
            suffix = s.split("Security Policy Template", 1)[-1].strip()
            expected = f"SC-{access_group} {suffix}"

        try:
            found = search_client_lists_by_name(session, base_url, expected)
            if found:
                return str(found[0][0])  # (listId, name)
        except Exception:
            pass
        return s  # fallback

    def _remap_values(vals):
        changed = False
        out = []
        for v in vals:
            before = str(v)
            after  = _resolve_name_to_id(before)
            out.append(after)
            if after != before:
                changed = True
        return out, changed

    def _rewrite_policy_lists(policy_obj):
        changed_any = False

        # legacy spot
        for opt in policy_obj.get("additionalMatchOptions", []) or []:
            if opt.get("type") == "NetworkListCondition":
                new_vals, changed = _remap_values(opt.get("values", []))
                if changed:
                    opt["values"] = new_vals
                    changed_any = True

        # newer matchCriteria shape
        mc = policy_obj.get("matchCriteria")
        if isinstance(mc, dict):
            for crit in mc.get("criteria", []) or []:
                name = (crit.get("name") or "").lower()
                opts = crit.get("options") or {}
                vals = opts.get("values")
                if isinstance(vals, list) and ("networklist" in name or "clientnetworklist" in name):
                    new_vals, changed = _remap_values(vals)
                    if changed:
                        opts["values"] = new_vals
                        crit["options"] = opts
                        changed_any = True

        return changed_any

    def _safe_put_policy(pid, payload):
        for ro in ("id", "updateDate", "used"):
            payload.pop(ro, None)
        r = session.put(policy_url_tpl.format(pid=pid), json=payload)
        r.raise_for_status()
        return r

    # read assignment list
    resp = session.get(list_url)
    resp.raise_for_status()
    assigned = resp.json().get("ratePolicies", []) or []

    new_ids = []

    for rp in assigned:
        summary["processed"] += 1
        orig_id   = rp.get("id")
        orig_name = rp.get("name", "")

        kept_id   = orig_id
        kept_name = orig_name

        # clone template-named policies
        if orig_name.startswith(template_policy_name_prefix):
            suffix = orig_name.replace(template_policy_name_prefix, "").strip()
            clone_name = f"SC-{access_group} {suffix}"

            existing = next((x for x in assigned if x.get("name") == clone_name), None)
            if existing:
                kept_id = existing.get("id")
                kept_name = clone_name
            else:
                try:
                    c = session.post(clone_url, json={
                        "cloneFromRatePolicyId": orig_id,
                        "name": clone_name,
                        "description": f"Cloned from {orig_name}",
                        "matchType": rp.get("matchType"),
                    })
                    c.raise_for_status()
                    kept_id = c.json().get("id")
                    kept_name = clone_name

                    if activate_clones and kept_id:
                        # best effort; ignore failure
                        session.post(policy_url_tpl.format(pid=kept_id)+"/activate", json={"network":"STAGING"})

                    summary["successful"] += 1
                    summary["details"].append({"template": orig_name, "clone": kept_name, "status": "cloned"})
                except Exception as e:
                    summary["failed"] += 1
                    summary["details"].append({"template": orig_name, "status": "clone_failed", "error": str(e)})
                    kept_id = orig_id
                    kept_name = orig_name

        # fetch full policy and optionally filter to a specific security policy
        try:
            f = session.get(policy_url_tpl.format(pid=kept_id))
            f.raise_for_status()
            full = f.json()

            if target_policy_id and str(full.get("policyId")) != str(target_policy_id):
                new_ids.append(kept_id)
                continue

            if _rewrite_policy_lists(full):
                _safe_put_policy(kept_id, full)
                summary["fixed_conditions"] += 1

            new_ids.append(kept_id)

        except Exception as e:
            summary["failed"] += 1
            summary["details"].append({"id": kept_id, "name": kept_name, "status": "update_failed", "error": str(e)})
            new_ids.append(kept_id)  # keep assignment so config isn’t broken

    # re-apply assignment list
    try:
        u = session.put(list_url, json={"ratePolicies": new_ids})
        u.raise_for_status()
    except Exception as e:
        summary["failed"] += 1
        summary["details"].append({"status": "assign_failed", "error": str(e)})

    return summary
