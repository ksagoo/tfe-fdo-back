def update_rate_policies(session, base_url, config_id, version, access_group, 
                          search_client_lists_by_id, search_client_lists_by_name):
    import json

    url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/rate-policies"
    result = {"processed": 0, "successful": 0, "failed": 0, "skipped": 0, "details": []}

    try:
        response = session.get(url)
        response.raise_for_status()
        policies = response.json().get("ratePolicies", [])
    except Exception as e:
        print(f"[ERROR] Failed to fetch rate policies: {e}")
        return result

    result["processed"] = len(policies)

    for policy in policies:
        policy_id = policy.get("id")
        original_name = policy.get("name")
        updated = False

        if not original_name:
            result["failed"] += 1
            result["details"].append({
                "id": policy_id,
                "name": "(unknown)",
                "status": "skipped",
                "reason": "Policy name missing"
            })
            continue

        # Step 1: Rename if needed
        if "Security Policy Template" in original_name:
            suffix = original_name.split("Security Policy Template")[-1].strip()
            new_name = f"SC-{access_group} {suffix}"
            policy["name"] = new_name
            updated = True
        else:
            new_name = original_name

        # Step 2: Fix NetworkListCondition values
        for option in policy.get("additionalMatchOptions", []):
            if option.get("type") == "NetworkListCondition":
                new_ids = []
                for val in option.get("values", []):
                    if isinstance(val, str) and val.isdigit():
                        new_ids.append(val)
                    elif isinstance(val, str):
                        # Handle case where value might include name, extract just the ID
                        extracted_id = val.split("")[0] if "" in val else val
                        if extracted_id.isdigit():
                            new_ids.append(extracted_id)
                option["values"] = new_ids
                updated = True

        if updated:
            put_url = f"{base_url}/appsec/v1/configs/{config_id}/versions/{version}/rate-policies/{policy_id}"
            try:
                payload = json.loads(json.dumps(policy))  # Make deep copy for safety
                for field in ["id", "createDate", "updateDate", "used"]:
                    payload.pop(field, None)
                print("Payload:", json.dumps(payload, indent=2))
                put_response = session.put(put_url, json=payload)
                put_response.raise_for_status()
                result["successful"] += 1
                result["details"].append({"id": policy_id, "name": new_name, "status": "success"})
            except Exception as e:
                result["failed"] += 1
                result["details"].append({"id": policy_id, "name": new_name, "status": "failed", "error": str(e)})
        else:
            result["skipped"] += 1

    return result
