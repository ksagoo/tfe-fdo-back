def remove_existing_bypass_lists(website_target):
    """
    Removes all bypassNetworkLists entries from the given website target.
    """
    if "bypassNetworkLists" in website_target:
        original_count = len(website_target["bypassNetworkLists"])
        website_target["bypassNetworkLists"] = []
        print(f"[INFO] Removed {original_count} existing bypass network list(s)")
    else:
        print("[INFO] No bypassNetworkLists present to remove.")


# Remove existing bypass network lists (Phase 1 cleanup)
remove_existing_bypass_lists(website_target)

def find_appsec_bypass_lists_by_name(session, base_url, config_id, version, substring):
    """
    Fetches all match targets, extracts unique bypass network lists where the name contains the given substring.
    Returns list of {name, id} entries suitable for use in match target updates.
    """
    from urllib.parse import urljoin

    # Get all match targets
    mt_url = urljoin(base_url, f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets")
    mt_resp = session.get(mt_url)

    if not mt_resp.ok:
        raise Exception(f"Failed to fetch match targets: {mt_resp.status_code} - {mt_resp.text}")

    seen_ids = set()
    matched_lists = []

    match_targets = mt_resp.json().get("matchTargets", [])
    for mt in match_targets:
        for bypass_list in mt.get("bypassNetworkLists", []):
            name = bypass_list.get("name", "")
            bid = bypass_list.get("id")
            if bid not in seen_ids and substring.lower() in name.lower():
                seen_ids.add(bid)
                print(f"[MATCH] Name: {name}, ID: {bid}")
                matched_lists.append({
                    "name": name,
                    "id": bid
                })

    if not matched_lists:
        print(f"[INFO] No bypass lists found containing: '{substring}'")

    return matched_lists
