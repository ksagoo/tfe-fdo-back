security_policy = target.get("securityPolicy")
if isinstance(security_policy, dict):
    current_policy = security_policy.get("policyId", "").strip()
elif isinstance(security_policy, str):
    current_policy = security_policy.strip()
    print("[WARN] securityPolicy is a string instead of a dict.")
else:
    print("[WARN] Skipping target due to missing or invalid securityPolicy.")
    continue




def reassign_match_targets(session, base_url, config_id, version, old_policy_id, new_policy_id):
    url = f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets"
    response = session.get(urljoin(base_url, url))
    response.raise_for_status()
    match_targets = response.json()

    print(f"[VALIDATE] New Config ID: {config_id}")
    print(f"[VALIDATE] Temp Policy ID: {old_policy_id}")
    print(f"[VALIDATE] New Policy ID: {new_policy_id}")
    print(f"[VALIDATE] Matched Targets Returned: {json.dumps(match_targets, indent=2)}")

    reassigned = []

    for target in match_targets:
        print(f"[VALIDATE] Target Entry: {json.dumps(target, indent=2)}")

        security_policy = target.get("securityPolicy", {})
        if isinstance(security_policy, dict):
            current_policy = security_policy.get("policyId", "").strip()
        else:
            print("[WARN] Skipping target due to invalid securityPolicy format.")
            continue

        print(f"[DEBUG] Comparing: {current_policy} == {old_policy_id.strip()}")

        if current_policy == old_policy_id.strip():
            target["securityPolicy"]["policyId"] = new_policy_id
            put_url = f"/appsec/v1/configs/{config_id}/versions/{version}/match-targets/{target['targetId']}"
            put_resp = session.put(urljoin(base_url, put_url), json=target)
            put_resp.raise_for_status()
            reassigned.append(target["targetId"])
            print(f"[VALIDATE] Reassigned Target: {target['targetId']}")

    return reassigned
