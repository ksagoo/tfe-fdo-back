import os
import argparse
import requests
from akamai.edgegrid import EdgeGridAuth, EdgeRc
from urllib.parse import urljoin
import json

# Function to load EdgeRc and set up authentication
def setup_session(edgerc_file, section_name):
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = f"https://{edgerc.get(section_name, 'host')}/"
        client_token = edgerc.get(section_name, 'client_token')
        client_secret = edgerc.get(section_name, 'client_secret')
        access_token = edgerc.get(section_name, 'access_token')
        
        # Debugging output
        print(f"Base URL: {base_url}")
        print(f"Client Token: {client_token}")
        print(f"Client Secret: {client_secret}")
        print(f"Access Token: {access_token}")
        
        session = requests.Session()
        session.auth = EdgeGridAuth(
            client_token=client_token,
            client_secret=client_secret,
            access_token=access_token
        )
        
        return session, base_url
    except Exception as e:
        print(f"Error reading .edgerc file: {e}")
        exit(1)

# Recursive function to find the group by name or ID anywhere in the hierarchy
def find_group_by_name_or_id(groups, parent_group_name=None, parent_group_id=None):
    for group in groups:
        if (parent_group_name and group.get("groupName") == parent_group_name) or (parent_group_id and group.get("groupId") == parent_group_id):
            return group
        if group.get("subGroups"):
            found_group = find_group_by_name_or_id(group.get("subGroups"), parent_group_name, parent_group_id)
            if found_group:
                return found_group
    return None

# Function to check if a group exists directly under the found parent group
def check_group_exists_under_parent(parent_group, group_name):
    for subgroup in parent_group.get("subGroups", []):
        if subgroup.get("groupName") == group_name:
            return True, subgroup.get('groupId')
    return False, None

# Function to check if a group already exists under the specified parent group
def check_group_exists(session, base_url, group_name, parent_group_name=None, parent_group_id=None):
    try:
        url = urljoin(base_url, "identity-management/v3/user-admin/groups")
        print(f"Checking group existence at URL: {url}")
        headers = {"accept": "application/json"}
        response = session.get(url, headers=headers)

        if response.status_code == 200:
            groups = response.json()
            
            # Debugging output
            print("Complete JSON response of groups:")
            print(json.dumps(groups, indent=4))

            parent_group = find_group_by_name_or_id(groups, parent_group_name, parent_group_id)
            if parent_group:
                group_exists, existing_group_id = check_group_exists_under_parent(parent_group, group_name)
                return group_exists, existing_group_id, parent_group
            else:
                return None, None, None
        else:
            print(f"Failed to fetch groups: {response.status_code} - {response.text}")
            return None, None, None
    except Exception as e:
        print(f"Error during group existence check: {e}")
        return None, None, None

# Function to create a new group
def create_group(session, base_url, group_name, parent_group_id):
    try:
        url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{parent_group_id}")
        print(f"Creating group at URL: {url}")
        headers = {
            "accept": "application/json",
            "content-type": "application/json"
        }
        payload = {
            "groupName": group_name
        }
        
        response = session.post(url, json=payload, headers=headers)
        
        if response.status_code == 201:
            created_group = response.json()
            group_id = created_group.get('groupId')
            print(f"Group '{group_name}' created successfully with groupId: {group_id}")
            return group_id
        elif response.status_code == 409:
            print(f"Group '{group_name}' already exists.")
            return None
        else:
            print(f"Failed to create group: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"Error during group creation: {e}")
        return None

# Function to check and create missing subgroups
def ensure_subgroups(session, base_url, parent_group_id, region):
    parent_group_url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{parent_group_id}")
    response = session.get(parent_group_url)
    if response.status_code == 200:
        parent_group = response.json()
        region_group_name = f"{parent_group.get('groupName')}-{region}"
        
        region_group_exists, region_group_id = check_group_exists_under_parent(parent_group, region_group_name)
        if region_group_exists:
            print(f"Region group '{region_group_name}' already exists with groupId: {region_group_id}")
        else:
            region_group_id = create_group(session, base_url, region_group_name, parent_group_id)
        
        if region_group_id:
            ensure_subgroup(session, base_url, region_group_id, f"{region_group_name}-PreProd")
            ensure_subgroup(session, base_url, region_group_id, f"{region_group_name}-Prod")
    else:
        print(f"Failed to fetch parent group details for groupId: {parent_group_id}")

# Function to ensure a subgroup exists under a parent group
def ensure_subgroup(session, base_url, parent_group_id, subgroup_name):
    parent_group_url = urljoin(base_url, f"identity-management/v3/user-admin/groups/{parent_group_id}")
    response = session.get(parent_group_url)
    if response.status_code == 200:
        parent_group = response.json()
        subgroup_exists, subgroup_id = check_group_exists_under_parent(parent_group, subgroup_name)
        if subgroup_exists:
            print(f"Subgroup '{subgroup_name}' already exists with groupId: {subgroup_id}")
        else:
            create_group(session, base_url, subgroup_name, parent_group_id)
    else:
        print(f"Failed to fetch parent group details for groupId: {parent_group_id}")

# Main logic
def main():
    parser = argparse.ArgumentParser(description="Create an Akamai Access Group if it doesn't already exist.")
    parser.add_argument("group_name_segment", help="The name segment of the group to create.")
    parser.add_argument("--group_prefix", default="KSSS-DDoS-KSD", help="The prefix for the group name. Default is 'KSSS-DDoS-KSD'.")
    parser.add_argument("--regions", nargs='+', choices=["APAC", "EMEA", "AMER"], default=["APAC", "EMEA", "AMER"], 
                        help="Regions for which subgroups will be created (APAC, EMEA, AMER).")
    parser.add_argument("--parent_group_name", help="The name of the parent group. Provide either this or --parent_group_id.")
    parser.add_argument("--parent_group_id", type=int, help="The numeric ID of the parent group. Provide either this or --parent_group_name.")
    parser.add_argument("--env", choices=["DEV", "PROD"], default="DEV", help="The environment (DEV or PROD). Default is DEV.")
    parser.add_argument("--edgerc_file", default="~/.edgerc", help="Path to the .edgerc file. Default is '~/.edgerc'.")
    parser.add_argument("--section_name", default="default", help="Section name in the .edgerc file. Default is 'default'.")

    args = parser.parse_args()

    # Debugging output: Print the parameters being used
    print("Parameters being used:")
    print(f"Group Name Segment: {args.group_name_segment}")
    print(f"Group Prefix: {args.group_prefix}")
    print(f"Regions: {args.regions}")
    print(f"Parent Group Name: {args.parent_group_name}")
    print(f"Parent Group ID: {args.parent_group_id}")
    print(f"Environment: {args.env}")
    print(f"EdgeRC File: {args.edgerc_file}")
    print(f"Section Name: {args.section_name}")

    # Prepare the full group name with the option to override the prefix
    group_name = f"{args.group_prefix}-{args.group_name_segment.strip().upper()}"
    print(f"Constructed Group Name: {group_name}")

    # Determine default parent group ID based on environment
    default_parent_group_id = 185773

    # Determine which parent group ID to use
    if args.parent_group_id:
        resolved_parent_group_id = args.parent_group_id
        parent_group_name = None  # Ignore parent group name if ID is provided
    elif args.parent_group_name:
        resolved_parent_group_id = None  # To be determined based on the parent group name
    else:
        resolved_parent_group_id = default_parent_group_id

    edgerc_file = os.path.expanduser(args.edgerc_file)
    session, base_url = setup_session(edgerc_file, args.section_name)
    
    group_exists, existing_group_id, resolved_parent_group = check_group_exists(
        session, base_url, group_name, args.parent_group_name, resolved_parent_group_id
    )
    
    if group_exists is None:
        print("Error checking group existence. Exiting without creating the group.")
    elif not group_exists:
        new_group_id = create_group(session, base_url, group_name, resolved_parent_group_id)
        if new_group_id:
            for region in args.regions:
                ensure_subgroups(session, base_url, new_group_id, region)
    else:
        print(f"Group '{group_name}' already exists under parent group '{resolved_parent_group.get('groupName')}' with groupId '{existing_group_id}'. Checking for missing subgroups...")
        for region in args.regions:
            ensure_subgroups(session, base_url, existing_group_id, region)

if __name__ == "__main__":
    main()
